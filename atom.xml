<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mqray&#39;s blog</title>
  
  
  <link href="https://mqrayblog.cn/atom.xml" rel="self"/>
  
  <link href="https://mqrayblog.cn/"/>
  <updated>2023-09-19T14:42:53.823Z</updated>
  <id>https://mqrayblog.cn/</id>
  
  <author>
    <name>mqray</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux之iptable</title>
    <link href="https://mqrayblog.cn/2023/09/19/linux%E4%B9%8Biptable/"/>
    <id>https://mqrayblog.cn/2023/09/19/linux%E4%B9%8Biptable/</id>
    <published>2023-09-19T14:39:54.000Z</published>
    <updated>2023-09-19T14:42:53.823Z</updated>
    
    <content type="html"><![CDATA[<img src="/2023/09/19/linux%E4%B9%8Biptable/Netfilter-packet-flow.png">  ]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2023/09/19/linux%E4%B9%8Biptable/Netfilter-packet-flow.png&quot;&gt;  
</summary>
      
    
    
    
    
    <category term="linux" scheme="https://mqrayblog.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux之网络</title>
    <link href="https://mqrayblog.cn/2023/09/05/linux%E4%B9%8B%E7%BD%91%E7%BB%9C/"/>
    <id>https://mqrayblog.cn/2023/09/05/linux%E4%B9%8B%E7%BD%91%E7%BB%9C/</id>
    <published>2023-09-05T14:29:07.000Z</published>
    <updated>2023-09-19T14:38:06.071Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><h4 id="OSI七层网络模型"><a href="#OSI七层网络模型" class="headerlink" title="OSI七层网络模型"></a>OSI七层网络模型</h4><img src="/2023/09/05/linux%E4%B9%8B%E7%BD%91%E7%BB%9C/linux_network_arch.png">  <h4 id="四层网络"><a href="#四层网络" class="headerlink" title="四层网络"></a>四层网络</h4><img src="/2023/09/05/linux%E4%B9%8B%E7%BD%91%E7%BB%9C/linux_network_4.png">  <h4 id="linux网络"><a href="#linux网络" class="headerlink" title="linux网络"></a>linux网络</h4><img src="/2023/09/05/linux%E4%B9%8B%E7%BD%91%E7%BB%9C/linux_network_kernel.webp">  <h5 id="linux网络收发流程"><a href="#linux网络收发流程" class="headerlink" title="linux网络收发流程"></a>linux网络收发流程</h5><img src="/2023/09/05/linux%E4%B9%8B%E7%BD%91%E7%BB%9C/linux_network_send_receive.webp">  <h5 id="网络包的接收流程"><a href="#网络包的接收流程" class="headerlink" title="网络包的接收流程"></a>网络包的接收流程</h5><h5 id="网络包的发送流程"><a href="#网络包的发送流程" class="headerlink" title="网络包的发送流程"></a>网络包的发送流程</h5><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><h4 id="水平触发与边缘触发"><a href="#水平触发与边缘触发" class="headerlink" title="水平触发与边缘触发"></a>水平触发与边缘触发</h4><p>水平触发(level-trggered)：<br>边缘触发(edge-triggered):</p><h3 id="网络性能指标"><a href="#网络性能指标" class="headerlink" title="网络性能指标"></a>网络性能指标</h3><ol><li>带宽： 链路的最大传输速率，单位为b&#x2F;s。带宽和物理网卡的配置直接关联，实际带宽取决于整个网络链路中最小的一个。</li><li>时延: 网络请求发出后，一直到收到远端响应所需要的事件延迟。在不同场景下含义有所不同，比如连接建立的时间(TCP握手延时)或者一个数据包往返所需时间(rtt)</li><li>吞吐量：标识没有丢包时的最大数据传输速率，单位为b&#x2F;s。吞吐量受带宽限制。</li><li>PPS： 即packet per second的缩写，标识以网络包为单位的传输速率，通常用来评估网络的转发能力。在以linux服务器转发时，很容易受到网络包大小的影响。</li></ol><h4 id="网络性能测试"><a href="#网络性能测试" class="headerlink" title="网络性能测试"></a>网络性能测试</h4><p>linux网络基于TCP&#x2F;IP协议栈，而不同协议层的行为不同。在评估网络性能前，需要确定应用程序基于协议栈的哪一层：</p><ol><li>基于http或者https的web应用程序，属于应用层，需要测试http&#x2F;https的性能。</li><li>对于游戏服务器，为了支持更多在线人数，通常基于tcp&#x2F;udp与客户端交互，此时需要测试tcp&#x2F;udp的性能。</li><li>将linux作为软交换机或者路由器来使用，此时则更关注网络包的处理能力，特别是网络层的转发性能。</li></ol><blockquote><p>底层协议是其上各层网络协议的基础，底层的性能决定了高层的网络性能。</p></blockquote><h5 id="测试网络接口层和网络层的性能"><a href="#测试网络接口层和网络层的性能" class="headerlink" title="测试网络接口层和网络层的性能"></a>测试网络接口层和网络层的性能</h5><p>网络接口层和网络层主要负责网络包的封装、寻址、路由、发送以及接收。这两层中每秒可处理的网络包PPS即是最重要的性能指标，特别是64B小包的处理能力。</p><p>Linux 内核自带的高性能网络测试工具 pktgen</p><h5 id="tcp-udp性能测试"><a href="#tcp-udp性能测试" class="headerlink" title="tcp&#x2F;udp性能测试"></a>tcp&#x2F;udp性能测试</h5><p>iperf 和 netperf 都是最常用的网络性能测试工具</p><h5 id="http性能测试"><a href="#http性能测试" class="headerlink" title="http性能测试"></a>http性能测试</h5><p>要测试 HTTP 的性能，也有大量的工具可以使用，比如 ab、webbench 等，都是常用的 HTTP 压力测试工具。其中，ab 是 Apache 自带的 HTTP 压测工具，主要测试 HTTP 服务的每秒请求数、请求延迟、吞吐量以及请求延迟的分布情况等。</p><p>为了得到应用程序的实际性能，就要求性能工具本身可以模拟用户的请求负载，而 iperf、ab 这类工具就无能为力了。幸运的是，我们还可以用 wrk、TCPCopy、Jmeter 或者 LoadRunner 等实现这个目标。</p><blockquote><p>nslookup ip<br>time nslookup ip<br>ping -c3 <a href="http://www.baidu.com/">www.baidu.com</a><br>dnsmasq &#x2F;etc&#x2F;init.d&#x2F;dnsmasq start<br>dig +trace +nodnssec time.geekbang.org<br>strace</p></blockquote><p>域名劫持和规避<br>客户端：HTTPDNS</p><p>全局负载均衡（GSLB）</p><p>PTR 请求</p><p>tcpdump</p><p>iptable</p><p>traceroute<br>tracepath<br>nc</p><p>&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://time.geekbang.org/column/article/81268">1. 极客时间-linux性能优化</a><br><a href="https://blog.csdn.net/lihao21/article/details/67631516">2. 水平触发和边缘触发</a><br><a href="https://blog.csdn.net/yolo_yyh/article/details/118367979">3. 陈硕-muduo网络库与服务模型介绍</a><br><a href="https://cloud.tencent.com/developer/article/1721171">4. linux版本查看</a><br><a href="https://plantegg.github.io/2019/01/09/nslookup-OK-but-ping-fail/">5. dns排障实例</a><br><a href="https://www.rfc-editor.org/rfc-index.html">6. rfc</a><br><a href="https://wiki.wireshark.org/TCP%204-times%20close">7. wireshark四次挥手案例</a><br><a href>8. 林沛满《Wireshark网络分析就这么简单》和《Wireshark网络分析的艺术》</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;网络模型&quot;&gt;&lt;a href=&quot;#网络模型&quot; class=&quot;headerlink&quot; title=&quot;网络模型&quot;&gt;&lt;/a&gt;网络模型&lt;/h3&gt;&lt;h4 id=&quot;OSI七层网络模型&quot;&gt;&lt;a href=&quot;#OSI七层网络模型&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="linux" scheme="https://mqrayblog.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>redis之事务</title>
    <link href="https://mqrayblog.cn/2023/09/05/redis%E4%B9%8B%E4%BA%8B%E5%8A%A1/"/>
    <id>https://mqrayblog.cn/2023/09/05/redis%E4%B9%8B%E4%BA%8B%E5%8A%A1/</id>
    <published>2023-09-05T00:12:47.000Z</published>
    <updated>2023-09-06T00:48:31.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>redis 通过 multi、watch、exec等命令来实现事务功能。</p></blockquote><p>redis提供这样一种将多个待执行的命令入队，在事务开始之后执行入队的事务命令，即使事务队列中部分命令执行失败也不会中断事务，事务队列中的所有命令执行完毕后，才会去请求其他客户端的命令请求。</p><h3 id="事务的实现"><a href="#事务的实现" class="headerlink" title="事务的实现"></a>事务的实现</h3><p>redis中事务从开始到结束有如下三个阶段：</p><ol><li>事务开始</li><li>命令入队</li><li>事务执行</li></ol><h4 id="命令开始"><a href="#命令开始" class="headerlink" title="命令开始"></a>命令开始</h4><p>redis中，客户端使用<code>multi</code>命令标识当前客户端进入事务状态。<br>该命令将执行该命令的客户端从非事务状态切换到事务状态<code>#define CLIENT_MULTI (1&lt;&lt;3)</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> id;            <span class="comment">/* Client incremental unique ID. */</span></span><br><span class="line">    <span class="type">uint64_t</span> flags;         <span class="comment">/* Client flags: CLIENT_* macros. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命令入队"><a href="#命令入队" class="headerlink" title="命令入队"></a>命令入队</h4><p>客户端处于非事务状态时，这个客户端发送的命令将会被服务端立即执行。<br>而客户端处于事务状态时，服务器会根据这个客户端发来的不同命令执行不同的操作：</p><ol><li>如果是 <code>multi、exec、discard、watch</code>四个命令中的一个，服务器立即执行。</li><li>否则，将命令放入事件队列中，向客户端返回<code>QUEUED</code>回复。</li></ol><h4 id="事务队列"><a href="#事务队列" class="headerlink" title="事务队列"></a>事务队列</h4><p>客户端中使用<code>multiState mstate</code>保存事务队列，其定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">multiState</span> &#123;</span></span><br><span class="line">    multiCmd *commands;     <span class="comment">// 事务队列，记录命令</span></span><br><span class="line">    <span class="type">int</span> count;              <span class="comment">// 已入队的命令计数</span></span><br><span class="line">    <span class="type">int</span> cmd_flags;          <span class="comment">/* The accumulated command flags OR-ed together.</span></span><br><span class="line"><span class="comment">                               So if at least a command has a given flag, it</span></span><br><span class="line"><span class="comment">                               will be set in this field. */</span></span><br><span class="line">    <span class="type">int</span> cmd_inv_flags;      <span class="comment">/* Same as cmd_flags, OR-ing the ~flags. so that it</span></span><br><span class="line"><span class="comment">                               is possible to know if all the commands have a</span></span><br><span class="line"><span class="comment">                               certain flag. */</span></span><br><span class="line">    <span class="type">size_t</span> argv_len_sums;    <span class="comment">/* mem used by all commands arguments */</span></span><br><span class="line">    <span class="type">int</span> alloc_count;         <span class="comment">/* total number of multiCmd struct memory reserved. */</span></span><br><span class="line">&#125; multiState;</span><br></pre></td></tr></table></figure><p><code>multiState</code>中记录了事务命令，事务命令个数。其中，事务队列是一个<code>FIFO</code>队列。<br><code>commands</code>则保存了每个入队的命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">multiCmd</span> &#123;</span></span><br><span class="line">    robj **argv; <span class="comment">// 参数</span></span><br><span class="line">    <span class="type">int</span> argv_len; <span class="comment">// 参数个数</span></span><br><span class="line">    <span class="type">int</span> argc; <span class="comment">// 参数数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">cmd</span>;</span> <span class="comment">// 命令指针</span></span><br><span class="line">&#125; multiCmd;</span><br></pre></td></tr></table></figure><p>客户端执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">MULTI</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">SET <span class="string">&quot;name&quot;</span> <span class="string">&quot;Practical Common Lisp&quot;</span></span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">GET <span class="string">&quot;name&quot;</span></span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">SET <span class="string">&quot;author&quot;</span> <span class="string">&quot;Peter Seibel&quot;</span></span></span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">GET <span class="string">&quot;author&quot;</span></span></span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure><img src="/2023/09/05/redis%E4%B9%8B%E4%BA%8B%E5%8A%A1/redis_transaction.png">  <h4 id="事务执行"><a href="#事务执行" class="headerlink" title="事务执行"></a>事务执行</h4><p>处于事务状态的客户端向服务器发送<code>exec</code>命令时，该命令将被立即执行。服务端遍历客户端的事务队列，执行队列中保存的所有命令，最后将执行命令所得的结果返回给客户端。</p><h3 id="watch-命令的实现"><a href="#watch-命令的实现" class="headerlink" title="watch 命令的实现"></a>watch 命令的实现</h3><p><code>watch</code>命令是乐观锁，在执行<code>exec</code>命令之前，监视任意数量的数据库键，在执行<code>EXEC</code>命令时，检查被监视的键是否至少有一个已经被修改过，如果是，服务器将拒绝执行事务，并向事务所在的客户端发送代表事务执行失败的空返回。</p><h4 id="watch-监视-键"><a href="#watch-监视-键" class="headerlink" title="watch 监视 键"></a>watch 监视 键</h4><p>数据库中使用<code>watch_keys</code>字典记录数据库中的键，其中字典<code>key</code>为被<code>watch</code>命令监视的数据库键，字典值为所有监控相关数据库键的客户端。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span></span><br><span class="line">    dict *dict;                 <span class="comment">/* The keyspace for this DB */</span></span><br><span class="line">    dict *expires;              <span class="comment">/* Timeout of keys with a timeout set */</span></span><br><span class="line">    dict *blocking_keys;        <span class="comment">/* Keys with clients waiting for data (BLPOP)*/</span></span><br><span class="line">    dict *blocking_keys_unblock_on_nokey;   <span class="comment">/* Keys with clients waiting for</span></span><br><span class="line"><span class="comment">                                             * data, and should be unblocked if key is deleted (XREADEDGROUP).</span></span><br><span class="line"><span class="comment">                                             * This is a subset of blocking_keys*/</span></span><br><span class="line">    dict *ready_keys;           <span class="comment">/* Blocked keys that received a PUSH */</span></span><br><span class="line">    dict *watched_keys;         <span class="comment">/* WATCHED keys for MULTI/EXEC CAS */</span></span><br><span class="line">    <span class="type">int</span> id;                     <span class="comment">/* Database ID */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> avg_ttl;          <span class="comment">/* Average TTL, just for stats */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> expires_cursor; <span class="comment">/* Cursor of the active expire cycle. */</span></span><br><span class="line">    <span class="built_in">list</span> *defrag_later;         <span class="comment">/* List of key names to attempt to defrag one by one, gradually. */</span></span><br><span class="line">    clusterSlotToKeyMapping *slots_to_keys; <span class="comment">/* Array of slots to keys. Only used in cluster mode (db 0). */</span></span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><h4 id="监视触发"><a href="#监视触发" class="headerlink" title="监视触发"></a>监视触发</h4><p>所有对数据库进行修改的命令，比如<code>set、lpush、sadd、zrem，del</code>在执行之后都会调用<code>multi.c/touchKey</code>函数对<code>watched_keys</code>进行检查，查看是否有客户端正在监视刚刚被命令修改过的数据库键，如果有，将当前客户端的<code>flags</code>标识为<code>#define CLIENT_DIRTY_CAS (1&lt;&lt;5)</code></p><h4 id="判断事务是否安全"><a href="#判断事务是否安全" class="headerlink" title="判断事务是否安全"></a>判断事务是否安全</h4><p>当服务端收到户端发送<code>exec</code>命令时，服务器将根据这个客户端的<code>flags</code>是否打开了<code>CLIENT_DIRTY_CAS</code>标识来决定是否执行事务。</p><ol><li>如果<code>CLIENT_DIRTY_CAS</code>被打开，则说明客户端监视的数据库键中至少有一个已经被修改了，客户端提交的事务不再安全，服务器拒绝执行客户端提交的事务。</li><li>否则，认为事务安全，继续执行事务队列里的命令。</li></ol><h3 id="疑问质疑"><a href="#疑问质疑" class="headerlink" title="疑问质疑?"></a>疑问质疑?</h3><h5 id="集群模式下是否不支持事务？"><a href="#集群模式下是否不支持事务？" class="headerlink" title="集群模式下是否不支持事务？"></a>集群模式下是否不支持事务？</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.238:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">182.168.168.238:6379(TX)&gt; set name mqray</span><br><span class="line">QUEUED</span><br><span class="line">182.168.168.238:6379(TX)&gt; get name</span><br><span class="line">QUEUED</span><br><span class="line">182.168.168.238:6379(TX)&gt; set height 181</span><br><span class="line">QUEUED</span><br><span class="line">182.168.168.238:6379(TX)&gt; get height</span><br><span class="line">QUEUED</span><br><span class="line">182.168.168.238:6379(TX)&gt; exec  </span><br><span class="line">(error) CROSSSLOT Keys in request don&#x27;t hash to the same slot</span><br><span class="line">182.168.168.238:6379&gt; </span><br></pre></td></tr></table></figure><p>(集群模式下使用事务遇到的问题)<br>的确如此！</p><h5 id="redis集群模式下能否支持事务？"><a href="#redis集群模式下能否支持事务？" class="headerlink" title="redis集群模式下能否支持事务？"></a>redis集群模式下能否支持事务？</h5><p><a href>redis集群模式下支持事务</a></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="http://redisbook.com/preview/transaction/transaction_implement.html">1. 事务的实现</a><br><a href="http://blog.guonl.cn/2019/02/20/redis%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/#hash-tags">2. redis集群模式下能否支持事务</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;redis 通过 multi、watch、exec等命令来实现事务功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis提供这样一种将多个待执行的命令入队，在事务开始之后执行入队的事务命令，即使事务队列中部分命令执行失败也不会中断事务，事务队</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis之发布订阅</title>
    <link href="https://mqrayblog.cn/2023/09/04/redis%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <id>https://mqrayblog.cn/2023/09/04/redis%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</id>
    <published>2023-09-03T23:47:03.000Z</published>
    <updated>2023-09-05T10:54:31.545Z</updated>
    
    <content type="html"><![CDATA[<p>redis的发布订阅功能由<code>publish|subscribe|psubscribe</code>等命令组成。</p><h3 id="频道的订阅与退订"><a href="#频道的订阅与退订" class="headerlink" title="频道的订阅与退订"></a>频道的订阅与退订</h3><h4 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h4><p>当客户端执行<code>subscribe</code> 命令订阅一个或多个频道时，这个客户端与被订阅的频道建就建立了一种订阅关系。</p><p>redis中将所有频道的订阅关系存储在服务器状态<code>pubsub_channels</code>中，键为被订阅频道，值为记录了所有订阅此频道的客户端。：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="comment">/* Pubsub */</span></span><br><span class="line">    dict *pubsub_channels;  <span class="comment">/* Map channels to list of subscribed clients */</span></span><br><span class="line">    dict *pubsub_patterns;  <span class="comment">/* A dict of pubsub_patterns */</span></span><br><span class="line">    <span class="type">int</span> notify_keyspace_events; <span class="comment">/* Events to propagate via Pub/Sub. This is an</span></span><br><span class="line"><span class="comment">                                   xor of NOTIFY_... flags. */</span></span><br><span class="line">    dict *pubsubshard_channels;  <span class="comment">/* Map shard channels to list of subscribed clients */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，客户端上也会记录这一信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    dict *pubsub_channels;  <span class="comment">/* channels a client is interested in (SUBSCRIBE) */</span></span><br><span class="line">    dict *pubsub_patterns;  <span class="comment">/* patterns a client is interested in (PSUBSCRIBE) */</span></span><br><span class="line">    dict *pubsubshard_channels;  <span class="comment">/* shard level channels a client is interested in (SSUBSCRIBE) */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订阅过程的实现就是单链表的插入过程：</p><ol><li>检查频道中是否有其他订阅者</li><li>如果没有，则创建一个键值对，值为空链表，然后将当前客户端加到链表中</li><li>如果有，则将当前客户端加入到链表为</li></ol><h4 id="unscbscribe"><a href="#unscbscribe" class="headerlink" title="unscbscribe"></a>unscbscribe</h4><p>当一个客户端退订一个或多个频道时，将从<code>pubsub_channels</code>中解除客户端与该退订频道之间的关联。<br>操作过程即遍历<code>pubsub_channels</code>，对每个频道上的链表做删除操作。</p><h3 id="模式的订阅与退订"><a href="#模式的订阅与退订" class="headerlink" title="模式的订阅与退订"></a>模式的订阅与退订</h3><p>与频道订阅类似，redis客户端通过<code>psubscribe</code>命令订阅模式，并将模式的订阅关系保存在服务器的<code>pubsub_patterns</code>状态中。在<code>redis2.x</code>中，这一结构保存在<code>pubsubPattern</code>结构中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pubsubPattern</span>&#123;</span></span><br><span class="line">    redisClient *client； <span class="comment">// 记录模式订阅的客户端</span></span><br><span class="line">    robj *pattern； <span class="comment">// 记录被订阅的模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在当前版本中<code>redis 6.x</code>已经被修改为了dict。</p><h4 id="psubscribe"><a href="#psubscribe" class="headerlink" title="psubscribe"></a>psubscribe</h4><p>在新版本中，其操作和<code>subscribe</code>一致，将模式名作为key，使用链表记录订阅模式的客户端。<br>具体执行逻辑即链表的插入操作</p><h4 id="punsubscribe"><a href="#punsubscribe" class="headerlink" title="punsubscribe"></a>punsubscribe</h4><p>客户端执行此命令时，服务器将会剔除掉<code>pubsub_patterns</code>中维护的模式订阅关系，具体操作即对链表进行删除操作。</p><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><p>当客户端执行<code>publish &lt;channel&gt; &lt;message&gt;</code>命令将休息<code>message</code>发送给频道<code>channel</code>时，服务器需要执行如下两个动作：</p><ol><li>将消息发送给 <code>channel</code>频道的所有订阅者。</li><li>检测是否频道所符合的模式，如果匹配，则将消息发送给这些订阅了这些模式的订阅者。</li></ol><p>源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Publish a message to all the subscribers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pubsubPublishMessageInternal</span><span class="params">(robj *channel, robj *message, pubsubtype type)</span> &#123;</span><br><span class="line">    <span class="type">int</span> receivers = <span class="number">0</span>;</span><br><span class="line">    dictEntry *de;</span><br><span class="line">    dictIterator *di;</span><br><span class="line">    listNode *ln;</span><br><span class="line">    listIter li;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Send to clients listening for that channel */</span></span><br><span class="line">    de = dictFind(*type.serverPubSubChannels, channel);</span><br><span class="line">    <span class="keyword">if</span> (de) &#123;</span><br><span class="line">        <span class="built_in">list</span> *<span class="built_in">list</span> = dictGetVal(de);</span><br><span class="line">        listNode *ln;</span><br><span class="line">        listIter li;</span><br><span class="line"></span><br><span class="line">        listRewind(<span class="built_in">list</span>,&amp;li);</span><br><span class="line">        <span class="keyword">while</span> ((ln = listNext(&amp;li)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            client *c = ln-&gt;value;</span><br><span class="line">            addReplyPubsubMessage(c,channel,message,*type.messageBulk);</span><br><span class="line">            updateClientMemUsageAndBucket(c);</span><br><span class="line">            receivers++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type.shard) &#123;</span><br><span class="line">        <span class="comment">/* Shard pubsub ignores patterns. */</span></span><br><span class="line">        <span class="keyword">return</span> receivers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Send to clients listening to matching channels */</span></span><br><span class="line">    di = dictGetIterator(server.pubsub_patterns);</span><br><span class="line">    <span class="keyword">if</span> (di) &#123;</span><br><span class="line">        channel = getDecodedObject(channel);</span><br><span class="line">        <span class="keyword">while</span>((de = dictNext(di)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            robj *pattern = dictGetKey(de);</span><br><span class="line">            <span class="built_in">list</span> *clients = dictGetVal(de);</span><br><span class="line">            <span class="keyword">if</span> (!stringmatchlen((<span class="type">char</span>*)pattern-&gt;ptr,</span><br><span class="line">                                sdslen(pattern-&gt;ptr),</span><br><span class="line">                                (<span class="type">char</span>*)channel-&gt;ptr,</span><br><span class="line">                                sdslen(channel-&gt;ptr),<span class="number">0</span>)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            listRewind(clients,&amp;li);</span><br><span class="line">            <span class="keyword">while</span> ((ln = listNext(&amp;li)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                client *c = listNodeValue(ln);</span><br><span class="line">                addReplyPubsubPatMessage(c,pattern,channel,message);</span><br><span class="line">                updateClientMemUsageAndBucket(c);</span><br><span class="line">                receivers++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        decrRefCount(channel);</span><br><span class="line">        dictReleaseIterator(di);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> receivers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息发布"><a href="#消息发布" class="headerlink" title="消息发布"></a>消息发布</h4><p>可以看到，主体逻辑即是遍历订阅该频道的客户端，调用<code>addReplyPubsubMessage</code>发送消息；找到匹配的模式的客户端，调用<code>addReplyPubsubPatMessage</code>方法发送消息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Send a pubsub message of type &quot;message&quot; to the client.</span></span><br><span class="line"><span class="comment"> * Normally &#x27;msg&#x27; is a Redis object containing the string to send as</span></span><br><span class="line"><span class="comment"> * message. However if the caller sets &#x27;msg&#x27; as NULL, it will be able</span></span><br><span class="line"><span class="comment"> * to send a special message (for instance an Array type) by using the</span></span><br><span class="line"><span class="comment"> * addReply*() API family. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addReplyPubsubMessage</span><span class="params">(client *c, robj *channel, robj *msg, robj *message_bulk)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> old_flags = c-&gt;flags;</span><br><span class="line">    c-&gt;flags |= CLIENT_PUSHING;</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;resp == <span class="number">2</span>) <span class="comment">// resp版本，客户端服务器通信协议版本</span></span><br><span class="line">        addReply(c,shared.mbulkhdr[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addReplyPushLen(c,<span class="number">3</span>);</span><br><span class="line">    addReply(c,message_bulk);</span><br><span class="line">    addReplyBulk(c,channel);</span><br><span class="line">    <span class="keyword">if</span> (msg) addReplyBulk(c,msg);</span><br><span class="line">    <span class="keyword">if</span> (!(old_flags &amp; CLIENT_PUSHING)) c-&gt;flags &amp;= ~CLIENT_PUSHING;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Send a pubsub message of type &quot;pmessage&quot; to the client. The difference</span></span><br><span class="line"><span class="comment"> * with the &quot;message&quot; type delivered by addReplyPubsubMessage() is that</span></span><br><span class="line"><span class="comment"> * this message format also includes the pattern that matched the message. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addReplyPubsubPatMessage</span><span class="params">(client *c, robj *pat, robj *channel, robj *msg)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> old_flags = c-&gt;flags;</span><br><span class="line">    c-&gt;flags |= CLIENT_PUSHING;</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;resp == <span class="number">2</span>)</span><br><span class="line">        addReply(c,shared.mbulkhdr[<span class="number">4</span>]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        addReplyPushLen(c,<span class="number">4</span>);</span><br><span class="line">    addReply(c,shared.pmessagebulk);</span><br><span class="line">    addReplyBulk(c,pat);</span><br><span class="line">    addReplyBulk(c,channel);</span><br><span class="line">    addReplyBulk(c,msg);</span><br><span class="line">    <span class="keyword">if</span> (!(old_flags &amp; CLIENT_PUSHING)) c-&gt;flags &amp;= ~CLIENT_PUSHING;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上述函数的实现中，在判断客户端服务器通信协议版本之后，都是通过调用<code>addReply</code>函数实现的消息发送。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * Higher level functions to queue data on the client output buffer.</span></span><br><span class="line"><span class="comment"> * The following functions are the ones that commands implementations will call.</span></span><br><span class="line"><span class="comment"> * -------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Add the object &#x27;obj&#x27; string representation to the client output buffer. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addReply</span><span class="params">(client *c, robj *obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (prepareClientToWrite(c) != C_OK) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sdsEncodedObject(obj)) &#123;</span><br><span class="line">        _addReplyToBufferOrList(c,obj-&gt;ptr,sdslen(obj-&gt;ptr));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj-&gt;encoding == OBJ_ENCODING_INT) &#123;</span><br><span class="line">        <span class="comment">/* For integer encoded strings we just convert it into a string</span></span><br><span class="line"><span class="comment">         * using our optimized function, and attach the resulting string</span></span><br><span class="line"><span class="comment">         * to the output buffer. */</span></span><br><span class="line">        <span class="type">char</span> buf[<span class="number">32</span>];</span><br><span class="line">        <span class="type">size_t</span> len = ll2string(buf,<span class="keyword">sizeof</span>(buf),(<span class="type">long</span>)obj-&gt;ptr);</span><br><span class="line">        _addReplyToBufferOrList(c,buf,len);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        serverPanic(<span class="string">&quot;Wrong obj-&gt;encoding in addReply()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>message</code>的字符串表征后调用<code>_addReplyToBufferOrList</code>发送给客户端输出缓冲区.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _addReplyToBufferOrList(client *c, <span class="type">const</span> <span class="type">char</span> *s, <span class="type">size_t</span> len) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;flags &amp; CLIENT_CLOSE_AFTER_REPLY) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Replicas should normally not cause any writes to the reply buffer. In case a rogue replica sent a command on the</span></span><br><span class="line"><span class="comment">     * replication link that caused a reply to be generated we&#x27;ll simply disconnect it.</span></span><br><span class="line"><span class="comment">     * Note this is the simplest way to check a command added a response. Replication links are used to write data but</span></span><br><span class="line"><span class="comment">     * not for responses, so we should normally never get here on a replica client. */</span></span><br><span class="line">    <span class="keyword">if</span> (getClientType(c) == CLIENT_TYPE_SLAVE) &#123;</span><br><span class="line">        sds cmdname = c-&gt;lastcmd ? c-&gt;lastcmd-&gt;fullname : <span class="literal">NULL</span>;</span><br><span class="line">        logInvalidUseAndFreeClientAsync(c, <span class="string">&quot;Replica generated a reply to command &#x27;%s&#x27;&quot;</span>,</span><br><span class="line">                                        cmdname ? cmdname : <span class="string">&quot;&lt;unknown&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We call it here because this function may affect the reply</span></span><br><span class="line"><span class="comment">     * buffer offset (see function comment) */</span></span><br><span class="line">    reqresSaveClientReplyOffset(c);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If we&#x27;re processing a push message into the current client (i.e. executing PUBLISH</span></span><br><span class="line"><span class="comment">     * to a channel which we are subscribed to, then we wanna postpone that message to be added</span></span><br><span class="line"><span class="comment">     * after the command&#x27;s reply (specifically important during multi-exec). the exception is</span></span><br><span class="line"><span class="comment">     * the SUBSCRIBE command family, which (currently) have a push message instead of a proper reply.</span></span><br><span class="line"><span class="comment">     * The check for executing_client also avoids affecting push messages that are part of eviction. */</span></span><br><span class="line">    <span class="keyword">if</span> (c == server.current_client &amp;&amp; (c-&gt;flags &amp; CLIENT_PUSHING) &amp;&amp;</span><br><span class="line">        server.executing_client &amp;&amp; !cmdHasPushAsReply(server.executing_client-&gt;cmd))</span><br><span class="line">    &#123;</span><br><span class="line">        _addReplyProtoToList(c,server.pending_push_messages,s,len);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> reply_len = _addReplyToBuffer(c,s,len);</span><br><span class="line">    <span class="keyword">if</span> (len &gt; reply_len) _addReplyProtoToList(c,c-&gt;reply,s+reply_len,len-reply_len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看订阅信息"><a href="#查看订阅信息" class="headerlink" title="查看订阅信息"></a>查看订阅信息</h3><p><code>PUBSUB</code>是redis 2.8新增命令之一，客户端以此查看频道或者模式的相关信息。</p><h4 id="pubsub-channels"><a href="#pubsub-channels" class="headerlink" title="pubsub channels"></a>pubsub channels</h4><p><code>pubsub channels [patterns]</code>用于返回服务器当前被订阅的频道，其中<code>pattern</code>可选。</p><ol><li>指定<code>pattern</code>，返回服务器当前被订阅的频道中那些与<code>pattern</code>模式相匹配的频道。</li><li>不指定<code>pattern</code>参数，则命令返回服务器当前被订阅的所有频道。</li></ol><h4 id="pubsub-numsub"><a href="#pubsub-numsub" class="headerlink" title="pubsub numsub"></a>pubsub numsub</h4><p><code>pubsub numsub [channel1 channel2]</code>接收多个频道作为输入，返回这些频道的订阅者数量。这里是统计<code>pubsub_channels</code>的长度来实现的。</p><h4 id="pubsub-numpat"><a href="#pubsub-numpat" class="headerlink" title="pubsub numpat"></a>pubsub numpat</h4><p><code>pubsub numpat</code>用于返回服务器当前被订阅模式的数量。实现原理是返回<code>pubsub_patterns</code>的长度实现。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://github.com/redis/redis/blob/e792653753dc62b5a00822121e585511542a024b/src/pubsub.c">1. pubsub.c</a><br><a href="https://github.com/redis/redis/blob/a2046c1eb1bcfcdeffadfffffad3b1f635965652/src/networking.c">2. networking.c</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;redis的发布订阅功能由&lt;code&gt;publish|subscribe|psubscribe&lt;/code&gt;等命令组成。&lt;/p&gt;
&lt;h3 id=&quot;频道的订阅与退订&quot;&gt;&lt;a href=&quot;#频道的订阅与退订&quot; class=&quot;headerlink&quot; title=&quot;频道的订阅与退订</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis之集群模式</title>
    <link href="https://mqrayblog.cn/2023/08/28/redis%E4%B9%8B%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://mqrayblog.cn/2023/08/28/redis%E4%B9%8B%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-08-28T09:44:38.000Z</published>
    <updated>2023-09-05T10:54:44.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis-集群模式"><a href="#redis-集群模式" class="headerlink" title="redis 集群模式"></a>redis 集群模式</h2><p>redis集群是redis提供的分布式数据库方案，集群通过分片来进行数据共享，并提供复制和故障转移功能。</p><h3 id="redis集群的优点"><a href="#redis集群的优点" class="headerlink" title="redis集群的优点"></a>redis集群的优点</h3><ol><li>高可用： 节点故障时，能自动进行故障转移，保证服务的持续可用。</li><li>负载均衡： 工作负载能够被分发到不同的节点上，有效分摊单节点访问压力。</li><li>容灾恢复：通过主从复制、哨兵机制，节点故障时能够快速进行故障恢复</li><li>数据分片： 集群模式下，可以由多个主节点执行写入操作</li><li>易于扩展：可以根据业务需求和系统负载，动态的添加或减少节点，实现水平扩展。</li></ol><h2 id="集群的实现原理"><a href="#集群的实现原理" class="headerlink" title="集群的实现原理"></a>集群的实现原理</h2><p>一个redis集群通常由多个节点组成。在集群建立前，每个节点都是相互独立的，都处于一个只包含自己的集群中。在组件集群时，需要将每个独立的节点连接起来，构成一个包含多个节点的集群。</p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>一个节点就是一个运行在集群模式下的redis服务器，服务器在启动时回一句<code>cluster-enabled</code>配置来决定是否开启服务器的集群模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./src/redis-server --cluster-enabled <span class="built_in">yes</span> <span class="comment"># 开启集群模式</span></span><br></pre></td></tr></table></figure><p>运行在集群模式下的服务器，会继续使用所有在单机模式中使用的服务器组件。例如：</p><ol><li>使用文件事件处理器来处理命令请求和返回命令回复。</li><li>使用时间事件处理器执行<code>serverCron</code>函数，在集群模式下继续调用<code>clusterCron</code>函数执行集群模式下的常规操作。</li><li>继续使用数据库保存键值对数据。</li><li>继续使用<code>rdb</code>和<code>aof</code>进行持久化。</li><li>继续使用发布订阅机制执行<code>publish、subscribe</code>命令。</li><li>继续使用复制模块进行节点的复制工作。</li><li>使用<code>lua</code>脚本环境来执行客户端输入的<code>lua</code>脚本。</li></ol><h3 id="集群创建"><a href="#集群创建" class="headerlink" title="集群创建"></a>集群创建</h3><p>在节点<code>A</code>上执行<code>cluster meet ip port</code>，其中<code>ip|port</code>指向节点<code>B</code>，可以让节点<code>A</code>向节点<code>B</code>进行握手，当握手成功时，节点<code>A</code>就会将<code>B</code>节点添加到<code>A</code>节点所在的集群中。</p><p>假设目前有<code>A|B|C</code>三个节点，分别对应<code>&lt;ip_a|port_a&gt;、&lt;ip_b|port_b&gt;、&lt;ip_c|port_c&gt;</code>，在未组建集群前，可以理解为三个集群。如果此时需要将三个节点组成一个集群，则需要执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip_a:port_a&gt;cluster meet ip_b port_b #将b节点加入到a节点所在集群中</span><br><span class="line">ip_a:port_a&gt;cluster meet ip_c port_c #将c节点加入到a节点所在集群中</span><br></pre></td></tr></table></figure><p>在客户端中，可以通过<code>cluster nodes</code>获取当前集群的节点信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.167.98.52:6379&gt; cluster nodes</span><br><span class="line">c87ec22247436ee75969a2a524a82cec4d0be9c6 192.167.240.46:6379@16379 master - 0 1693237335871 2 connected 5461-10922</span><br><span class="line">a1520d54c3f1093ba701283cc2a61405776168f2 192.167.98.52:6379@16379 myself,master - 0 1693237334000 3 connected 10923-16383</span><br><span class="line">1e50e943a3ebf1fc955922fff55df6d372861f4b 192.167.76.255:6379@16379 master - 0 1693237334863 1 connected 0-5460</span><br></pre></td></tr></table></figure><h4 id="集群数据结构"><a href="#集群数据结构" class="headerlink" title="集群数据结构"></a>集群数据结构</h4><h5 id="clusterNode"><a href="#clusterNode" class="headerlink" title="clusterNode"></a>clusterNode</h5><p>每一个节点都会使用一个<code>clusterNode</code>结构记录自身状态，并为集群中的其他节点创建一个相应的<code>clusterNode</code>结构，以此记录其他节点的状态。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> &#123;</span></span><br><span class="line">    <span class="type">mstime_t</span> ctime; <span class="comment">// 节点创建时间</span></span><br><span class="line">    <span class="type">char</span> name[CLUSTER_NAMELEN]; <span class="comment">// 节点名称</span></span><br><span class="line">    <span class="type">char</span> shard_id[CLUSTER_NAMELEN]; <span class="comment">// 分片id</span></span><br><span class="line">    <span class="type">int</span> flags;      <span class="comment">// 节点标识</span></span><br><span class="line">    <span class="type">uint64_t</span> configEpoch; <span class="comment">// 配置纪元</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> slots[CLUSTER_SLOTS/<span class="number">8</span>]; <span class="comment">// 当前节点负责哈希槽</span></span><br><span class="line">    <span class="type">uint16_t</span> *slot_info_pairs; <span class="comment">/* Slots info represented as (start/end) pair (consecutive index). */</span></span><br><span class="line">    <span class="type">int</span> slot_info_pairs_count; <span class="comment">/* Used number of slots in slot_info_pairs */</span></span><br><span class="line">    <span class="type">int</span> numslots;   <span class="comment">// 当前节点负责处理的槽位数量</span></span><br><span class="line">    <span class="type">int</span> numslaves;  <span class="comment">// 如果当前节点是主节点，记录其从节点数量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> **<span class="title">slaves</span>;</span> <span class="comment">// 指向 从节点 的指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> *<span class="title">slaveof</span>;</span> <span class="comment">// 如果当前节点是从节点，则指向其主节点</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> last_in_ping_gossip; <span class="comment">/* The number of the last carried in the ping gossip section */</span></span><br><span class="line">    <span class="type">mstime_t</span> ping_sent;      <span class="comment">// 此节点上次发送 ping 消息的时间</span></span><br><span class="line">    <span class="type">mstime_t</span> pong_received;  <span class="comment">// 上次收到 pong 消息的时间</span></span><br><span class="line">    <span class="type">mstime_t</span> data_received;  <span class="comment">/* Unix time we received any data */</span></span><br><span class="line">    <span class="type">mstime_t</span> fail_time;      <span class="comment">// 上次 fail 的时间</span></span><br><span class="line">    <span class="type">mstime_t</span> voted_time;     <span class="comment">/* Last time we voted for a slave of this master */</span></span><br><span class="line">    <span class="type">mstime_t</span> repl_offset_time;  <span class="comment">// 上次 接收到 offset 的时间</span></span><br><span class="line">    <span class="type">mstime_t</span> orphaned_time;     <span class="comment">/* Starting time of orphaned master condition */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_offset;      <span class="comment">// 上次接收到的 offset 值</span></span><br><span class="line">    <span class="type">char</span> ip[NET_IP_STR_LEN];    <span class="comment">// 节点上次使用的 ip</span></span><br><span class="line">    sds hostname;               <span class="comment">// hostname</span></span><br><span class="line">    sds human_nodename;         <span class="comment">/* The known human readable nodename for this node */</span></span><br><span class="line">    <span class="type">int</span> tcp_port;               <span class="comment">// 客户端tcp端口</span></span><br><span class="line">    <span class="type">int</span> tls_port;               <span class="comment">// 客户端 tls 使用的端口</span></span><br><span class="line">    <span class="type">int</span> cport;                  <span class="comment">// 节点暴露的端口</span></span><br><span class="line">    clusterLink *link;          <span class="comment">// 连接节点所需要的信息，比如套接字描述符、输入输出缓冲区</span></span><br><span class="line">    clusterLink *inbound_link;  <span class="comment">/* TCP/IP link accepted from this node */</span></span><br><span class="line">    <span class="built_in">list</span> *fail_reports;         <span class="comment">// 记录其他节点的下线报告</span></span><br><span class="line">&#125; clusterNode;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="clusterNodeFailReport"><a href="#clusterNodeFailReport" class="headerlink" title="clusterNodeFailReport"></a>clusterNodeFailReport</h5><p>用于记录与当前节点握手过的其他节点的下线报告。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">clusterNodeFailReport</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> *<span class="title">node</span>;</span>  <span class="comment">/* Node reporting the failure condition. */</span></span><br><span class="line">    <span class="type">mstime_t</span> time;             <span class="comment">/* Time of the last report from this node. */</span></span><br><span class="line">&#125; clusterNodeFailReport;</span><br></pre></td></tr></table></figure><h5 id="clusterState"><a href="#clusterState" class="headerlink" title="clusterState"></a>clusterState</h5><p><code>clusterState</code>结构则记录了在当前节点视角下，集群目前所处的状态。如，集群状态、集群节点数量、分片</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">clusterState</span> &#123;</span></span><br><span class="line">    clusterNode *myself;  <span class="comment">// 当前节点</span></span><br><span class="line">    <span class="type">uint64_t</span> currentEpoch;</span><br><span class="line">    <span class="type">int</span> state;            <span class="comment">// 集群状态</span></span><br><span class="line">    <span class="type">int</span> size;             <span class="comment">// 主节点数量</span></span><br><span class="line">    dict *nodes;          <span class="comment">// 记录 name -&gt; clusterNode的哈希表</span></span><br><span class="line">    dict *shards;         <span class="comment">// 记录 shard_id -&gt; list(nodes) 的哈希表</span></span><br><span class="line">    dict *nodes_black_list; <span class="comment">/* Nodes we don&#x27;t re-add for a few seconds. */</span></span><br><span class="line">    clusterNode *migrating_slots_to[CLUSTER_SLOTS];</span><br><span class="line">    clusterNode *importing_slots_from[CLUSTER_SLOTS];</span><br><span class="line">    clusterNode *slots[CLUSTER_SLOTS];</span><br><span class="line">    rax *slots_to_channels;</span><br><span class="line">    <span class="comment">/* The following fields are used to take the slave state on elections. */</span></span><br><span class="line">    <span class="type">mstime_t</span> failover_auth_time; <span class="comment">/* Time of previous or next election. */</span></span><br><span class="line">    <span class="type">int</span> failover_auth_count;    <span class="comment">/* Number of votes received so far. */</span></span><br><span class="line">    <span class="type">int</span> failover_auth_sent;     <span class="comment">/* True if we already asked for votes. */</span></span><br><span class="line">    <span class="type">int</span> failover_auth_rank;     <span class="comment">/* This slave rank for current auth request. */</span></span><br><span class="line">    <span class="type">uint64_t</span> failover_auth_epoch; <span class="comment">/* Epoch of the current election. */</span></span><br><span class="line">    <span class="type">int</span> cant_failover_reason;   <span class="comment">/* Why a slave is currently not able to</span></span><br><span class="line"><span class="comment">                                   failover. See the CANT_FAILOVER_* macros. */</span></span><br><span class="line">    <span class="comment">/* Manual failover state in common. */</span></span><br><span class="line">    <span class="type">mstime_t</span> mf_end;            <span class="comment">/* Manual failover time limit (ms unixtime).</span></span><br><span class="line"><span class="comment">                                   It is zero if there is no MF in progress. */</span></span><br><span class="line">    <span class="comment">/* Manual failover state of master. */</span></span><br><span class="line">    clusterNode *mf_slave;      <span class="comment">/* Slave performing the manual failover. */</span></span><br><span class="line">    <span class="comment">/* Manual failover state of slave. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> mf_master_offset; <span class="comment">/* Master offset the slave needs to start MF</span></span><br><span class="line"><span class="comment">                                   or -1 if still not received. */</span></span><br><span class="line">    <span class="type">int</span> mf_can_start;           <span class="comment">/* If non-zero signal that the manual failover</span></span><br><span class="line"><span class="comment">                                   can start requesting masters vote. */</span></span><br><span class="line">    <span class="comment">/* The following fields are used by masters to take state on elections. */</span></span><br><span class="line">    <span class="type">uint64_t</span> lastVoteEpoch;     <span class="comment">/* Epoch of the last vote granted. */</span></span><br><span class="line">    <span class="type">int</span> todo_before_sleep; <span class="comment">/* Things to do in clusterBeforeSleep(). */</span></span><br><span class="line">    <span class="comment">/* Stats */</span></span><br><span class="line">    <span class="comment">/* Messages received and sent by type. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> stats_bus_messages_sent[CLUSTERMSG_TYPE_COUNT];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> stats_bus_messages_received[CLUSTERMSG_TYPE_COUNT];</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> stats_pfail_nodes;    <span class="comment">/* Number of nodes in PFAIL status,</span></span><br><span class="line"><span class="comment">                                       excluding nodes without address. */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> stat_cluster_links_buffer_limit_exceeded;  <span class="comment">/* Total number of cluster links freed due to exceeding buffer limit */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Bit map for slots that are no longer claimed by the owner in cluster PING</span></span><br><span class="line"><span class="comment">     * messages. During slot migration, the owner will stop claiming the slot after</span></span><br><span class="line"><span class="comment">     * the ownership transfer. Set the bit corresponding to the slot when a node</span></span><br><span class="line"><span class="comment">     * stops claiming the slot. This prevents spreading incorrect information (that</span></span><br><span class="line"><span class="comment">     * source still owns the slot) using UPDATE messages. */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> owner_not_claiming_slot[CLUSTER_SLOTS / <span class="number">8</span>];</span><br><span class="line">&#125; clusterState;</span><br></pre></td></tr></table></figure><h4 id="cluster-meet-命令执行过程"><a href="#cluster-meet-命令执行过程" class="headerlink" title="cluster meet 命令执行过程"></a>cluster meet 命令执行过程</h4><p>通过向节点<code>A</code>发送<code>cluster meet &lt;ip_b&gt; &lt;port_b&gt;</code>，可以将节点<code>B</code>纳入到节点<code>A</code>所在的集群中。<br>节点<code>A</code>收到命令后，将与节点<code>B</code>进行握手以确定彼此存在，并继续执行如下操作：</p><ol><li>节点<code>A</code>为节点<code>B</code>创建一个<code>clusterNode</code>结构，并将该结构保存至自己的<code>clusterState.nodes</code>字典中。</li><li>节点<code>A</code>依据<code>cluster meet &lt;ip_b&gt; &lt;port_b&gt;</code>命令中的IP地址和端口号向节点<code>B</code>发送一条<code>MEET消息</code>。(后续会介绍消息格式)</li><li>如果一切顺利，节点<code>B</code>接收到节点<code>A</code>发送的<code>meet</code>消息，节点<code>B</code>会为节点<code>A</code>创建一个<code>clusterNode</code>结构，并将此结构添加到自己的<code>clusterState.nodes</code>字典中。</li><li>节点<code>B</code>向节点<code>A</code>发送<code>PONG</code>消息。</li><li>如果节点<code>A</code>收到节点<code>B</code>发送的<code>PONG</code>消息，则节点<code>A</code>可获悉节点<code>B</code>已经收到自己发送的<code>meet</code>消息。</li><li>节点<code>A</code>向节点<code>B</code>返回一条<code>PING</code>命令。</li><li>如果顺利，节点<code>B</code>收到节点<code>A</code>返回的<code>PING</code>消息，以此获悉节点<code>A</code>已经成功接收到节点<code>B</code>返回的<code>PONG</code>消息。此时，握手完成。<br>节点<code>A|B</code>集群组建过程的时序图如下：<img src="/2023/08/28/redis%E4%B9%8B%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/redis_cluster_meet.png"></li></ol><h3 id="槽分派"><a href="#槽分派" class="headerlink" title="槽分派"></a>槽分派</h3><p>redis集群通过<code>分片</code>的方式来保存数据库中的键值对，集群的整个数据库被分为<code>16384</code>个槽位，数据库中的每个键都属于这些槽中的一个，集群中的每个节点可以处理0个或者<code>16384</code>个槽位。</p><p>当数据库中的<code>16384</code>个槽位都有节点在处理时，集群属于上线状态；否则，集群属于下线状态。</p><p>集群创建完毕后，可以使用如下命令将槽分配给节点a：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip_a:port_a&gt;cluster addslots &lt;slot&gt; [slot ...]</span><br></pre></td></tr></table></figure><p>当<code>16384</code>个槽位都有相应节点处理时，集群进入上线状态。可以使用<code>cluster info</code>查看集群状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">192.167.98.52:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:3</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:3</span><br><span class="line">cluster_my_epoch:3</span><br><span class="line">cluster_stats_messages_ping_sent:849247</span><br><span class="line">cluster_stats_messages_pong_sent:834979</span><br><span class="line">cluster_stats_messages_fail_sent:1</span><br><span class="line">cluster_stats_messages_publish_sent:224</span><br><span class="line">cluster_stats_messages_sent:1684451</span><br><span class="line">cluster_stats_messages_ping_received:834979</span><br><span class="line">cluster_stats_messages_pong_received:849246</span><br><span class="line">cluster_stats_messages_fail_received:1</span><br><span class="line">cluster_stats_messages_publish_received:57273</span><br><span class="line">cluster_stats_messages_received:1741499</span><br></pre></td></tr></table></figure><h4 id="相关命令实现原理"><a href="#相关命令实现原理" class="headerlink" title="相关命令实现原理"></a>相关命令实现原理</h4><h5 id="cluster-addslots"><a href="#cluster-addslots" class="headerlink" title="cluster addslots"></a>cluster addslots</h5><p>该命令的实现可以理解为对<code>clusterNode.slots</code>和<code>clusterState.slots</code>的更新标注。</p><h5 id="执行命令过程"><a href="#执行命令过程" class="headerlink" title="执行命令过程"></a>执行命令过程</h5><p>当客户端向节点发送与数据库有关的命令时，接收命令的节点会计算出命令要处理的数据库键属于哪个槽位，并检查该槽位是否由当前节点处理。</p><ol><li>如果键所在槽位指派给当前节点，当前节点直接执行命令。</li><li>否则，节点向客户端返回<code>MOVED</code>错误，指引客户端重定向到正确的节点，并再次发送待执行的命令。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.167.98.52:6379&gt; <span class="built_in">set</span> mqray181162 hh</span><br><span class="line">-&gt; Redirected to slot [2196] located at 192.167.76.255:6379</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>通过<code>cluster keyslot</code>可以查阅键所属的槽位：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.167.76.255:6379&gt; cluster keyslot mqray181162</span><br><span class="line">(<span class="built_in">integer</span>) 2196</span><br></pre></td></tr></table></figure><p>前面通过<code>cluster nodes</code>已获悉当前节点处理的槽位信息，可以看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.167.76.255:6379&gt; cluster nodes</span><br><span class="line">a1520d54c3f1093ba701283cc2a61405776168f2 192.167.98.52:6379@16379 master - 0 1693270395063 3 connected 10923-16383</span><br><span class="line">c87ec22247436ee75969a2a524a82cec4d0be9c6 192.167.240.46:6379@16379 master - 0 1693270396071 2 connected 5461-10922</span><br><span class="line">1e50e943a3ebf1fc955922fff55df6d372861f4b 192.167.76.255:6379@16379 myself,master - 0 1693270394000 1 connected 0-5460</span><br></pre></td></tr></table></figure><p>可以看到，<code>192.167.98.52:6379</code>节点负责处理的槽位区间为<code>10923-16383</code>，接收到命令时，检测到当前命令操作的键所指向的节点为<code>192.167.76.255:6379</code>后，返回了<code>MOVED</code>错误，重定向后重新执行该命令。<br>实际上，一个集群客户端通常会维护多个节点的套接字连接，而所谓的重定向只是换一个套接字来发送命令。</p><h5 id="key对应槽位的计算方式"><a href="#key对应槽位的计算方式" class="headerlink" title="key对应槽位的计算方式"></a>key对应槽位的计算方式</h5><p>使用<code>cluster keyslot key</code>可以获取键所属槽位，其计算公式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slot  = CRC16(key) % 16384</span><br></pre></td></tr></table></figure><h4 id="节点如何记录槽位"><a href="#节点如何记录槽位" class="headerlink" title="节点如何记录槽位"></a>节点如何记录槽位</h4><h5 id="clusterNode-slots"><a href="#clusterNode-slots" class="headerlink" title="clusterNode.slots"></a>clusterNode.slots</h5><p><code>clusterNode</code>中通过如下两个属性记录该节点负责处理的槽位：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> slots[CLUSTER_SLOTS/<span class="number">8</span>]; <span class="comment">// 当前节点负责哈希槽</span></span><br><span class="line">    <span class="type">uint16_t</span> *slot_info_pairs; <span class="comment">/* Slots info represented as (start/end) pair (consecutive index). */</span></span><br><span class="line">    <span class="type">int</span> numslots;   <span class="comment">// 当前节点负责处理的槽位数量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>slots</code>是一个二进制位数组，数组长度为<code>16384/8=2048</code>字节。<br>reis以0为起始索引，对<code>slots</code>数组中的<code>16384</code>个二进制位进行编号，根据索引上的二进制位来判断当前节点是否需要处理槽<code>i</code>。</p><blockquote><p>对于一个节点而言，检查具体某一个槽位是否被当前节点处理的时间复杂度是O(1)。<br>而<code>numslots</code>即为这个二进制数组中1的个数。</p></blockquote><h5 id="clusterState-slots"><a href="#clusterState-slots" class="headerlink" title="clusterState.slots"></a>clusterState.slots</h5><p>一个节点除了将自己所负责的槽位记录在<code>slots</code>数组中，还会将自己的<code>slots</code>数组通过消息的方式发送给集群中的其他节点，以通知其他节点，当前节点负责处理哪些槽位。<br>集群中的其他节点收到此消息，会更新该节点视角下的<code>clusterState.nodes</code>更新其中传递该消息的节点所负责的槽位分配情况。<br>因此，集群中的每个节点都知道数据库中<code>16384</code>个槽位的分配情况。</p><h4 id="集群槽位分配记录"><a href="#集群槽位分配记录" class="headerlink" title="集群槽位分配记录"></a>集群槽位分配记录</h4><p><code>clusterState</code>结构中记录了如下信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">clusterState</span> &#123;</span></span><br><span class="line">    clusterNode *slots[CLUSTER_SLOTS];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>slots</code>数组长达<code>16384</code>，记录了每个槽位被分配的节点<code>clusterNode</code>的指针。<br>如果<code>slots[i]==null</code>，则表示当前槽位尚未分配；如果指向某个<code>clusterNode</code>，则表示当前槽位被分配给该节点。</p><h4 id="为什么需要将节点槽位信息存储在-clusterNode中又需要存在-clusterState中？"><a href="#为什么需要将节点槽位信息存储在-clusterNode中又需要存在-clusterState中？" class="headerlink" title="为什么需要将节点槽位信息存储在 clusterNode中又需要存在 clusterState中？"></a>为什么需要将节点槽位信息存储在 clusterNode中又需要存在 clusterState中？</h4><p>如果只在<code>clusterNode.slots</code>中记录，则无法高效处理如下情况：</p><ol><li>检测槽位<code>i</code>是否被分配&#x2F;检测槽位<code>i</code>被分配给了哪个节点： 这两种场景需要遍历集群中的每个节点的<code>clusterNode.slots</code>数组，直到找到该槽位被分配的节点。时间复杂度为<code>O(N)</code>。而如果<code>clusterState.slots</code>存储了，则时间复杂度为<code>O(1)</code>。</li></ol><p>那么是否可以只将槽位分派信息记录在<code>clusterNode.slots</code>中呢？<br>由于redis槽位分配中，某节点的槽位分配会通过消息传递给集群中的其他节点，传递消息时只需要将<code>clusterNode.slots</code>传递出去即可。而如果只存在<code>clusterState.slots</code>中，那么每次传播槽位分派信息时，需要遍历<code>clusterState.slots</code>以获取当前的槽位分派信息。</p><h3 id="节点数据库的实现"><a href="#节点数据库的实现" class="headerlink" title="节点数据库的实现"></a>节点数据库的实现</h3><p>节点和单机服务器在数据方面的区别是： 节点只能使用0号数据库，而单机服务器则没有此限制。<br>除了将键值对保存在数据库中，还会用<code>clusterState。slots_to_keys</code>记录槽位和键之间的关系。注意，在当前版本中，这一结构被移动到<code>clusterInit.slotToKeyInit</code>函数中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Initialize slots-keys map of given db. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">slotToKeyInit</span><span class="params">(redisDb *db)</span> &#123;</span><br><span class="line">    db-&gt;slots_to_keys = zcalloc(<span class="keyword">sizeof</span>(clusterSlotToKeyMapping));</span><br><span class="line">    clusterDictMetadata *dictmeta = dictMetadata(db-&gt;dict);</span><br><span class="line">    dictmeta-&gt;db = db;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Slot to keys mapping for all slots, opaque outside this file. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">clusterSlotToKeyMapping</span> &#123;</span></span><br><span class="line">    slotToKeys by_slot[CLUSTER_SLOTS];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Slot to keys for a single slot. The keys in the same slot are linked together</span></span><br><span class="line"><span class="comment"> * using dictEntry metadata. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slotToKeys</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> count;             <span class="comment">/* Number of keys in the slot. */</span></span><br><span class="line">    dictEntry *head;            <span class="comment">/* The first key-value entry in the slot. */</span></span><br><span class="line">&#125; slotToKeys;</span><br></pre></td></tr></table></figure><h3 id="重新分片"><a href="#重新分片" class="headerlink" title="重新分片"></a>重新分片</h3><p>redis集群的重新分片是指可以将任意数量的已经指派给某个节点<code>A</code>(源节点)的槽位重新指派给节点<code>B</code>(目标节点)，并且相关槽位所属的键值对也会从源节点移动到目标节点。<br><code>重新分片</code>操作过程中集群不需要下线，且源节点和目标节点可以继续处理命令请求。</p><h4 id="重新分片的实现原理"><a href="#重新分片的实现原理" class="headerlink" title="重新分片的实现原理"></a>重新分片的实现原理</h4><p>集群中的重新分配操作是由redis的集群管理软件<code>redis-trib</code>负责执行的。redis提供了进行重新分片所需要的命令，而<code>redis-trib</code>通过向源目标节点发送命令来进行重新分片。<br><code>redis-trib</code>对集群的单个槽位进行分片的过程如下：<br><img src="/2023/08/28/redis%E4%B9%8B%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/redis_cluster_sharding.png"></p><p>另外注意到，<code>clusterState</code>结构中记录了集群得重新分片信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">clusterState</span> &#123;</span></span><br><span class="line">    clusterNode *migrating_slots_to[CLUSTER_SLOTS];</span><br><span class="line">    clusterNode *importing_slots_from[CLUSTER_SLOTS];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>migrating_slots_to</code>记录了当前节点正在迁移至其他节点的槽。而<code>importing_slots_from</code>则记录了当前节点正在从哪些节点导入槽。</p><h4 id="ASK错误"><a href="#ASK错误" class="headerlink" title="ASK错误"></a>ASK错误</h4><p>重新分片过程中，可能存在这样一种场景：<br>待迁移的槽位中键值对部分存在于源节点中，另一部分被存储在目标节点中。<br>当客户端向源节点发送一个于数据库键有关的命令，并且命令要处理的数据库键恰好属于正在被迁移的槽时：</p><ol><li>源节点会先在自己的数据库中查找键，找到则执行客户端命令；</li><li>如果未找到，则该键有可能已经被迁移到了目标节点，源节点将向客户端返回一个<code>ASK错误</code>，指引这个客户端重定向到正在导入槽的目标节点，并再次发送之前想要执行的命令。(查看<code>clusterState.migrating_slots_to[i]</code>已检查是否在进行迁移，如果指向不为null，则重定向到指针指向的节点)</li></ol><h4 id="ASKING"><a href="#ASKING" class="headerlink" title="ASKING"></a>ASKING</h4><p>打开发送该命令的客户端的<code>redis_asking</code>标识，以使得客户端在遇到moved错误时能够破例在当前节点中执行关于槽i的命令一次。注意该标识是一次性的，当节点执行了一个带有<code>redis_asking</code>标识的客户端发送的命令后，该标志位将被移除。</p><h4 id="ASK错误-和-MOVED-错误"><a href="#ASK错误-和-MOVED-错误" class="headerlink" title="ASK错误 和 MOVED 错误"></a>ASK错误 和 MOVED 错误</h4><ul><li>MOVED错误： 槽的指派关系发生变化，使得客户端需要从 MOVED错误返回的 ip port 中获取到最新的槽位负责节点然后执行命令</li><li>ASK错误：是两个节点在迁移槽的过程中的临时措施，当客户端收到关于槽i的<code>ASK错误</code>后，客户端只会在接下来的一次命令请求中将关于槽i的命令请求发送至发生<code>ASK错误</code>所指示的节点。但对该客户端之后的命令请求无效。</li></ul><h3 id="复制与故障转移"><a href="#复制与故障转移" class="headerlink" title="复制与故障转移"></a>复制与故障转移</h3><p>集群模式中，节点分为主节点和从节点，主节点负责处理槽，从节点负责复制某个主节点，并在被复制的主节点下线时，代替下线主节点继续处理命令请求。</p><p>集群中有节点<code>A|b|c</code>，各有三个从节点，此时节点<code>A</code>下线，则将由<code>B|C</code>负责从节点<code>A</code>的从节点中选出一个作为新的主节点，由这个被选中的节点负责处理原先节点<code>A</code>负责的槽位，并继续处理客户端的命令请求。</p><h4 id="配置从节点"><a href="#配置从节点" class="headerlink" title="配置从节点"></a>配置从节点</h4><p>在前文中，集群架构还只是顶层的多个主节点。集群模式当然是支持为节点分配从节点的。使用如下命令可以让接收命令的节点成为<code>node_id</code>所指定的从节点，并开始对主节点进行复制。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster replicate &lt;node_id &gt;</span><br></pre></td></tr></table></figure><h4 id="从节点如何复制主节点"><a href="#从节点如何复制主节点" class="headerlink" title="从节点如何复制主节点"></a>从节点如何复制主节点</h4><ol><li>收到命令的节点从<code>clusterNode.nodes</code>中找到<code>noed_id</code>对应节点的<code>clusterNode</code>结构，并且将自己的<code>clusterState.myself.slaveof</code>指向该节点，以记录当前正在复制的主节点。另外，将<code>clusterState.myself.flags</code>修改为<code>REDIS_NODE_slave</code>，以标识当前是从节点。</li><li>根据<code>clusterState.myself.slaveof</code>指向的<code>clusterNode</code>中保存的<code>IP|port</code>对主节点进行复制。<br><code>slaveof ip pport</code></li><li>一个节点成为从节点，并且开始复制主节点这一信息会<code>通过消息</code>发送给集群中的其他节点<br>，最终所有节点都会知道这一消息。</li></ol><h4 id="故障检测"><a href="#故障检测" class="headerlink" title="故障检测"></a>故障检测</h4><h5 id="疑似下线-pfail"><a href="#疑似下线-pfail" class="headerlink" title="疑似下线 pfail"></a>疑似下线 pfail</h5><p>集群中的每个节点都会定期向集群中的其他节点发送<code>ping</code>消息，以此检测对方是否在线，如果该命令没有在规定时间内响应，那么发送消息的节点会将收到消息的节点标记为<code>pfail， 疑似下线</code>。<br>同理，集群中的各个节点会通过互相发消息的方式来交换集群中各个节点的状态信息。<br>如果主节点<code>A</code>通过消息得知主节点<code>B</code>认为主节点<code>C</code>进入疑似下线状态，则主节点<code>a</code>会将<code>clusterNode.nodes</code>中找到节点<code>C</code>，并将节点<code>B</code>报告的下线报告加入到<code>clusterNode.fail_reports</code>链表中。<br>每个下线报告中记录了如下信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This structure represent elements of node-&gt;fail_reports. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">clusterNodeFailReport</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">clusterNode</span> *<span class="title">node</span>;</span>  <span class="comment">// 报告目标节点下线的主节点</span></span><br><span class="line">    <span class="type">mstime_t</span> time;             <span class="comment">// 最后一次从node收到下线报告的时间</span></span><br><span class="line">&#125; clusterNodeFailReport;</span><br></pre></td></tr></table></figure><h5 id="已下线-fail"><a href="#已下线-fail" class="headerlink" title="已下线 fail"></a>已下线 fail</h5><p>如果在一个集群中，半数以上负责处理槽的主节点都将某个主节点<code>X</code>报告为疑似下线，那么这个节点<code>X</code>将被标记为<code>已下线</code>，将主节点标记为已下线的节点会向集群<code>广播</code>一条关于主节点<code>X</code>的<code>fail</code>消息，收到此消息的所有节点会立即将<code>clusterNode.nodes</code>中节点<code>X</code>的状态修改为已下线。</p><h4 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h4><img src="/2023/08/28/redis%E4%B9%8B%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F/redis_cluster_fialover.png"><p>如果从节点检测到自己正在复制的主节点进入了下线状态，从节点将开始对下线主节点进行故障转移：</p><ol><li>复制下线节点的所有从节点中选出一个。</li><li>被选中的从节点执行<code>slaveof no one</code>，成为主节点</li><li>原先指派给下线主节点的槽位重新指派给当前节点。</li><li>向集群广播一条<code>pong</code>消息，通知集群中的其他节点，当前节点已成为主节点，并且负责接管下线节点所负责的槽位。</li><li>新的主节点开始接收和自己负责槽位相关的命令请求，故障转移完成。</li></ol><h5 id="集群选主"><a href="#集群选主" class="headerlink" title="集群选主"></a>集群选主</h5><p>从节点检测到主节点下线后如何进行选主？</p><ol><li>集群中的某个节点开始一次故障转移操作时，集群的配置纪元<code>+1</code>.</li><li>在每个配置纪元中，集群中每个负责处理槽的主节点拥有一次投票机会，第一个向此主节点请求投票的节点将获得投票。</li><li>从节点发现复制的主节点下线时，将广播<code>CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST</code>消息，要求所有收到消息且具有投票权的主节点进行投票。</li><li>具有投票权且尚未投票的主节点，将返回消息<code>CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK</code>。</li><li>每个从节点统计自己获取的投票数量，如果得票数大于等于<code>N/2+1</code>，则此从节点将当选成为新的主节点。N是集群中具有投票权的主节点数量。</li><li>如果一个配置纪元中无法选出主节点，则将进行下一次选举。</li></ol><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><p>节点发送的消息主要有如下五种：</p><ol><li><code>MEET</code>： 发送者通过客户端向接受者发送，标识请</li><li><code>PING</code>: 集群中的每个节点默认每隔一秒从已知的节点列表中随机选出<code>5</code>个节点，对最长时间没有发送过<code>ping</code>消息的节点发送<code>ping</code>消息，以此检测被选中的节点是否在线。如果节点<code>a</code>最后一次收到节点<code>b</code>发送的<code>PONG</code>消息的时间距当前时间已超出节点<code>a</code>设置的<code>cluster-node-timeout</code>的一般，那么节点<code>a</code>也会向节点<code>B</code>发送<code>ping</code>消息。</li><li><code>PONG</code>：接收者回复<code>meet|ping</code>命令；或者向节点广播<code>PONG</code>命令以通知其他节点当前节点状态变化。</li><li><code>FAIL</code>：主节点<code>A</code>判断主节点<code>B</code>进入<code>Fail</code>状态，节点<code>A</code>会向集群广播一条关于节点<code>B</code>fail的消息，所有收到此消息的节点都会立即将节点<code>B</code>标记为已下线。</li><li><code>publish</code>： 节点收到<code>publish</code>命令时，节点会执行命令，并向集群广播一条<code>publish</code>消息，所有接收到此消息的节点都会执行相同的<code>publish</code>命令。</li></ol><h4 id="gossip协议"><a href="#gossip协议" class="headerlink" title="gossip协议"></a>gossip协议</h4><h3 id="扩容-缩容"><a href="#扩容-缩容" class="headerlink" title="扩容 缩容"></a>扩容 缩容</h3><h4 id="扩容方案"><a href="#扩容方案" class="headerlink" title="扩容方案"></a>扩容方案</h4><ol><li>将新节点纳入集群， 使用<code>cluster meet</code>或者 <code>redis-trib add node</code></li><li>确定 加入的新节点 所负责的槽位， 同时查询<code>clusterState.slots</code>查询该槽位的原先被指派的主节点。</li><li>遍历 所有槽位， 将每个槽位关联的节点中的 键值对 迁移到 新加入的节点中。</li><li>该主节点负责的槽位全部迁移完毕，向集群广播当前的节点状态，负责迁移后槽位，以及相关命令的执行。</li></ol><h4 id="缩容方案"><a href="#缩容方案" class="headerlink" title="缩容方案"></a>缩容方案</h4><ol><li>是否是主节点。</li><li>是主节点，有无被分派的槽位。</li><li>有分配的槽位，先将当前负责的槽位分配到其他节点。</li><li>所有槽位完成重新指派并完成数据库键值对的迁移后，广播当前节点准备下线。</li><li>原先该主节点的从节点下线。</li></ol><h3 id="思考？"><a href="#思考？" class="headerlink" title="思考？"></a>思考？</h3><h4 id="为什么redis支持16384个槽位？"><a href="#为什么redis支持16384个槽位？" class="headerlink" title="为什么redis支持16384个槽位？"></a>为什么redis支持16384个槽位？</h4><p>前面我们提到过，redis中计算一个键所对应的槽位的计算方式是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slot  = CRC16(key) % <span class="number">16384</span></span><br></pre></td></tr></table></figure><p>而CRC16能够获得65535个值，那为什么redis只支持16384个呢？<br>原因在于，redis的各种检测命令、广播命令中，都会将携带<code>slots</code>信息。两者的开销分别是 <code>2^16/8=8KB</code>和<code>2^14/8=2KB</code>。<br>而redis集群模式最多支持<code>1000</code>个分片，故而选择16384相对65535是更合理的选择。</p><h5 id="为什么要传全量的slot状态？"><a href="#为什么要传全量的slot状态？" class="headerlink" title="为什么要传全量的slot状态？"></a>为什么要传全量的slot状态？</h5><p>因为分布式场景，基于状态的设计更合理，状态的传播具有幂等性</p><h6 id="为什么不考虑压缩？"><a href="#为什么不考虑压缩？" class="headerlink" title="为什么不考虑压缩？"></a>为什么不考虑压缩？</h6><p>集群规模较小的场景下，每个分片负责大量的slot，很难压缩。</p><p>详见<a href="https://github.com/redis/redis/issues/2576">https://github.com/redis/redis/issues/2576</a></p><h4 id="为什么-集群模式中不适用-发布订阅"><a href="#为什么-集群模式中不适用-发布订阅" class="headerlink" title="为什么 集群模式中不适用 发布订阅"></a>为什么 集群模式中不适用 发布订阅</h4><p>所有的publish命令都会向所有节点（包括从节点）进行广播，造成每条publish数据都会在集群内所有节点传播一次，加重了带宽负担，对于在有大量节点的集群中频繁使用pub，会严重消耗带宽。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://www.cnblogs.com/yidengjiagou/p/17345831.html">1. redis集群模式</a><br><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-cluster.html#%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E5%8F%8A%E7%BB%B4%E6%8A%A4">2. 状态检测及维护</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redis-集群模式&quot;&gt;&lt;a href=&quot;#redis-集群模式&quot; class=&quot;headerlink&quot; title=&quot;redis 集群模式&quot;&gt;&lt;/a&gt;redis 集群模式&lt;/h2&gt;&lt;p&gt;redis集群是redis提供的分布式数据库方案，集群通过分片来进行数据共享</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>java之ConcurrentHashMap</title>
    <link href="https://mqrayblog.cn/2023/08/28/java%E4%B9%8BConcurrentHashMap/"/>
    <id>https://mqrayblog.cn/2023/08/28/java%E4%B9%8BConcurrentHashMap/</id>
    <published>2023-08-28T09:44:02.000Z</published>
    <updated>2023-09-05T11:12:31.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://juejin.cn/post/7064061605185028110">1. 一文彻底弄懂ConcurrentHashMap</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7064061605185028110&quot;&gt;1. 一文彻底弄懂Concurre</summary>
      
    
    
    
    <category term="coding" scheme="https://mqrayblog.cn/categories/coding/"/>
    
    
    <category term="java" scheme="https://mqrayblog.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java之spring注解</title>
    <link href="https://mqrayblog.cn/2023/08/17/java%E4%B9%8Bspring%E6%B3%A8%E8%A7%A3/"/>
    <id>https://mqrayblog.cn/2023/08/17/java%E4%B9%8Bspring%E6%B3%A8%E8%A7%A3/</id>
    <published>2023-08-17T15:01:54.000Z</published>
    <updated>2023-09-05T11:12:42.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><ol><li>@Transactional</li><li>@TransmittableThreadLocal</li><li>@PostConstruct</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="http://mysql.taobao.org/monthly/2021/10/02/">1. PolarDB 数据库内核月报</a><br><a href="https://www.cnblogs.com/caoyc/p/5632963.html">2. spring @Transactional注解参数详解</a><br><a href="https://juejin.cn/post/6998552093795549191">3. TransmittableThreadLocal原理解析</a><br><a href="https://blog.csdn.net/wk52525/article/details/107859685">4. TransmittableThreadLocal（TTL）实现线程变量传递的原理分析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;@Transactional&lt;/li&gt;
&lt;li&gt;@TransmittableThreadLocal&lt;/li&gt;
&lt;li&gt;@PostConstruct&lt;/li&gt;</summary>
      
    
    
    
    <category term="coding" scheme="https://mqrayblog.cn/categories/coding/"/>
    
    
    <category term="java" scheme="https://mqrayblog.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>redis之哨兵机制</title>
    <link href="https://mqrayblog.cn/2023/08/17/redis%E4%B9%8B%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/"/>
    <id>https://mqrayblog.cn/2023/08/17/redis%E4%B9%8B%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/</id>
    <published>2023-08-16T23:44:03.000Z</published>
    <updated>2023-09-05T10:54:34.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>前文<a href="https://mqrayblog.cn/2023/08/07/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/">redis之主从复制</a>中，在讲述<code>redis</code>主从模式时，提及主从模式在主节点故障时，无法自主恢复，需要人工干预才能恢复。那么有没有什么方法可以使集群能够自动进行故障恢复呢？当然有，那就是<code>哨兵模式</code>。</p><h2 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h2><p>哨兵机制是<code>redis高可用</code>的解决方案： 由一个或者多个<code>sentinel</code>实例组成的<code>sentinel</code>系统监控任意多个主服务器，同时监控这些主服务器下的从服务器。在所监视的主服务器下线时，自动完成故障恢复：包括新选主、剩从切换新主、旧主变新从。故障恢复后，由新主处理命令请求。</p><img src="/2023/08/17/redis%E4%B9%8B%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6/sentinel_arch.jpg">  <blockquote><p>第一次看到这里有疑惑，哨兵机制是对 主从做的改进， 那为什么 哨兵机制能够监控多个主服务器呢？此时的redis架构是多个 <code>主从=主从-主从</code> 模式么？</p></blockquote><p>综上所述，<code>哨兵机制需要提供如下服务</code>：</p><ol><li>感知 主服务器故障 </li><li>拥有故障恢复能力  [选主过程由谁落实，有哪些条件？]<ul><li>选取 leader sentinel  </li><li>选取新的主服务器</li><li>剩从切换新主</li><li>旧主变新从<br>那么<code>redis</code> 是如何为它提供如此能力的呢？</li></ul></li></ol><h3 id="如何理解哨兵？"><a href="#如何理解哨兵？" class="headerlink" title="如何理解哨兵？"></a>如何理解哨兵？</h3><p>目前可以先这样理解： <code>sentinel</code>是功能特殊的<code>redis</code>服务器，它能执行的命令不同于主从服务器。</p><h3 id="如何感知主服务器故障？"><a href="#如何感知主服务器故障？" class="headerlink" title="如何感知主服务器故障？"></a>如何感知主服务器故障？</h3><p>简单的概括是： 主观下线 + 客观下线</p><h4 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h4><p>在<code>sentinel.conf</code>中有如下配置，指定了<code>sentinel</code>判断主观下线的策略。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br></pre></td></tr></table></figure><p>在默认情况下,<code>sentinel</code>会以每秒一次的频率向所有与它创建了命令连接的实例(包含主、从、sentinel)发送<code>ping</code>命令。通过实例的返回判断实例是否在线。<br>实例对<code>ping</code>命令的返回有两种：</p><ol><li>有效回复：实例返回<code>+PONG| -LOADING | -MASTERDOWN</code>三种回复中的一种。 </li><li>无效回复：上述三种外的回复，或者在指定时限内没有任何回复。<br>如果超出<code>down-after-milliseconds</code>未有有效回复，则<code>sentinel</code>会将该实例的<code>flags</code>状态修改为<code>SRI_S_DOWN</code>。</li></ol><p>上述配置不仅仅是<code>sentinel</code>判断主服务器的标准，同样是判断从服务器、其他<code>sentinel</code>是否主观下线的标准。</p><p>另外，要注意的是：对于监控同一个主服务器的多个<code>sentienl</code>而言，每个<code>sentinel</code>所设置的<code>down-after-milliseconds</code>可能不同，即不同<code>sentinel</code>判断主观下线的时长可能不同。</p><h4 id="客观下线"><a href="#客观下线" class="headerlink" title="客观下线"></a>客观下线</h4><p>当<code>sentinel</code>判断某个主服务器主观下线后，会确认是否这个主服务器真的下线了。于是，它会向其他监视该主服务器的其他<code>sentinel</code>发送请求，检查是否其他<code>sentinel</code>也认为该主服务器是否主观下线了。如果认为主服务器主观下线的<code>sentinel</code>数量超过配置值，则将进行后续的故障恢复操作。</p><p>判断客观下线的配置值是在<code>sentinel</code>启动时指定的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br></pre></td></tr></table></figure><p>由于每个<code>sentinel</code>启动配置并不一致，所以会导致由不同的<code>sentinel</code>判断某主服务器主观下线的判断条件是不同的。</p><h3 id="如何进行故障恢复"><a href="#如何进行故障恢复" class="headerlink" title="如何进行故障恢复"></a>如何进行故障恢复</h3><p>当一个主服务器被标记为<code>客观下线</code>之后，监控该主服务器的各个<code>sentinel</code>会进行协商，选出一个 <code>leader sentinel</code>，由它完成下线主服务器的故障转移操作。</p><h4 id="如何选取leader-sentinel"><a href="#如何选取leader-sentinel" class="headerlink" title="如何选取leader sentinel"></a>如何选取leader sentinel</h4><p>所有<code>sentinel</code>都有可能成为领头<code>sentinel</code>。每次进行<code>leader sentinel</code>选举后，不论是否成功，所有<code>sentinel</code>的配置纪元<code>configuration epoch</code>的值都会自增。<br>在一个配置纪元里，所有<code>sentinel</code>都有一次将某个<code>sentinel</code>设置为局部领头<code>sentinel</code>的机会，且局部领头<code>sentinel</code>一旦被设置，在这个配置纪元里不能被更改。<br>发现主服务器客观下线的<code>sentinel</code>都会要求其他<code>sentinel</code>将自己设置为局部领头<code>sentinel</code>。发送的命令格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel is-master-down-by-addr ip port epoch run_id</span><br></pre></td></tr></table></figure><p>如果 <code>run_id != *</code>而是源<code>sentinel</code>的运行id时，则表明源<code>sentinel</code>要求目标<code>sentinel</code>将它设置为局部领头<code>sentinel</code><br><code>sentinel</code>设置局部领头<code>sentinel</code>的规则是先到先得，最先向<code>sentinel</code>发送请求要求设置为局部领头<code>sentinel</code>的将成为目标<code>sentinel</code>的局部领头<code>sentinel</code>，之后收到的设置要求都将被拒绝。</p><p>源<code>sentinel</code>收到上述命令的返回后，会检查回复中的<code>leader_epoch</code>的值是否和自己的相同，相同则继续比对<code>run_id</code>，如果相同则表示目标<code>sentinel</code>将源<code>sentinel</code>设置为了局部领头<code>sentinel</code>。<br>如果某个<code>sentinel</code>被超过半数<code>sentinel</code>选举为局部领头<code>sentinel</code>，则该<code>sentinel</code>为 <code>leader sentinel</code>。<br>一个配置纪元里，可能产生多个局部领头<code>sentinel</code>，但是只会产生一个 <code>leader sentinel</code>。 如果本次配置纪元无法选出 <code>leader sentinel</code>，则继续下一轮，知道选出  <code>leader sentinel</code>。</p><p>疑惑： 如果某一个sentinel挂了呢？似乎也不影响选主sentinel，只需要保障&gt; sentinel_nums &#x2F; 2 + 1即可 ，<code>sentinel_nums</code>为在线数量。  </p><p>在选出 <code>leader sentinel</code>后正式开始故障恢复过程。</p><h4 id="选取新的主服务器"><a href="#选取新的主服务器" class="headerlink" title="选取新的主服务器"></a>选取新的主服务器</h4><p>由 <code>leader sentinel</code> 从已下线主服务器的从服务器中，找出状态良好、数据完整的从服务器。然后向这个从服务器发送<code>slave no one</code>命令，将这个从服务器转换为主服务器。</p><p>选主的过程是，先将下线主服务器的从服务器保存在列表中，然后按照如下条件过滤：</p><ul><li>剔除所有正处于下线状态或者断线状态的从服务器。</li><li>删除列表中所有最近5min没有回复过<code>leader sentinel</code>发送的<code>INFO</code>命令的从服务器，保障所有剩下的从服务器和<code>leader sentinel</code>正常通信。</li><li>删除所有与下线主服务器连接断开超过 <code>down-after-millseconds * 10</code>的从服务器，以保障从服务器的数据库状态与下线主服务器状态尽可能一致。</li><li>根据从服务器的优先级，对列表中剩余的从服务器排序，选出优先级最高的从服务器。</li><li>如果优先级最高的从服务器有多个，则对比从服务器中的复制偏移量，最终选出偏移量最大的从服务器。</li><li>如果偏移量也存在一致的，则按照从服务器的<code>run_id</code>进行排序，选择<code>run_id</code>最小的从服务器。</li></ul><h4 id="剩从切换新主"><a href="#剩从切换新主" class="headerlink" title="剩从切换新主"></a>剩从切换新主</h4><p><code>leader sentinel</code>向剩余的从服务器发送<code>slave of &lt;new_master_ip&gt; &lt;new_master_port&gt;</code>。</p><h4 id="结合源码对应-故障转移状态"><a href="#结合源码对应-故障转移状态" class="headerlink" title="结合源码对应 故障转移状态"></a>结合源码对应 故障转移状态</h4><h5 id="旧主变新从"><a href="#旧主变新从" class="headerlink" title="旧主变新从"></a>旧主变新从</h5><p>最后，修改旧主服务器的实例结构，将其主服务器设置为 <code>&lt;new_master&gt;</code></p><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><h3 id="main函数中启动sentinel"><a href="#main函数中启动sentinel" class="headerlink" title="main函数中启动sentinel"></a>main函数中启动sentinel</h3><p>在<code>server.h</code>中有这样一段代码，用以检测当前是否是<code>sentinel</code>模式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line">    ... </span><br><span class="line">    server.sentinel_mode = checkForSentinelMode(argc,argv, exec_name);</span><br><span class="line">    initServerConfig(); <span class="comment">// 初始化服务器配置</span></span><br><span class="line">    ... </span><br><span class="line">    <span class="keyword">if</span> (server.sentinel_mode) &#123;</span><br><span class="line">        initSentinelConfig();</span><br><span class="line">        initSentinel();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    loadServerConfig(server.configfile, config_from_stdin, options);</span><br><span class="line">    <span class="comment">// 如果指定了配置文件</span></span><br><span class="line">    <span class="keyword">if</span> (argc &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (server.sentinel_mode) loadSentinelConfigFromQueue();</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (server.sentinel_mode) sentinelCheckConfigFile();</span><br><span class="line">    ...</span><br><span class="line">    initServer(); <span class="comment">// void initServer(void)</span></span><br><span class="line">    ...</span><br><span class="line">    initListeners();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (!server.sentinel_mode)&#123;</span><br><span class="line">        <span class="comment">// 非 sentinel模式，正常模式里的功能。--&gt; 可以对比 sentinel和 其他模式的差异！此处按下不表</span></span><br><span class="line">        aofLoadManifestFromDisk();</span><br><span class="line">        loadDataFromDisk();</span><br><span class="line">        aofOpenIfNeededOnServerStart();</span><br><span class="line">        aofDelHistoryFiles();</span><br><span class="line">        ...</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sentinelIsRunning();</span><br><span class="line">        <span class="keyword">if</span> (server.supervised_mode == SUPERVISED_SYSTEMD) &#123;</span><br><span class="line">            redisCommunicateSystemd(<span class="string">&quot;STATUS=Ready to accept connections\n&quot;</span>);</span><br><span class="line">            redisCommunicateSystemd(<span class="string">&quot;READY=1\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main-checkForSentinelMode"><a href="#main-checkForSentinelMode" class="headerlink" title="main checkForSentinelMode"></a>main checkForSentinelMode</h4><p>通过<code>sentinel</code>的两种启动命令来判断是否是<code>sentinel</code>模式。<br><code>checkForSentinelMode</code>的 判断逻辑是：</p><ul><li>程序使用<code>redis-sentinel</code>可执行文件启动</li><li>启动配置中是否有配置项<code>--sentinel</code></li></ul><p>分别对应了<code>sentinel</code>的两种启动命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel /path/to/sentinel.conf // redis-sentinel程序</span><br><span class="line">redis-server /path/to/sentinel.conf --sentinel // redis-server程序</span><br></pre></td></tr></table></figure><p>具体的实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">checkForSentinelMode</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> *exec_name)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(exec_name,<span class="string">&quot;redis-sentinel&quot;</span>) != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; argc; j++)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[j],<span class="string">&quot;--sentinel&quot;</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h4 id="main-initSentinelConfig"><a href="#main-initSentinelConfig" class="headerlink" title="main initSentinelConfig"></a>main initSentinelConfig</h4><p>如果是<code>sentinel</code>模式，则执行初始化操作：<br>在<code>initSentinelConfig</code>函数中使用<code>26379</code>代替<code>6379</code>作为服务的端口号，同时禁用服务器运行保护模式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function overwrites a few normal Redis config default with Sentinel</span></span><br><span class="line"><span class="comment"> * specific defaults. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initSentinelConfig</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    server.port = REDIS_SENTINEL_PORT; <span class="comment">// #define REDIS_SENTINEL_PORT 26379</span></span><br><span class="line">    server.protected_mode = <span class="number">0</span>; <span class="comment">/* Sentinel must be exposed. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main-initSentinel"><a href="#main-initSentinel" class="headerlink" title="main initSentinel"></a>main initSentinel</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Perform the Sentinel mode initialization. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initSentinel</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/* Initialize various data structures. */</span></span><br><span class="line">    sentinel.current_epoch = <span class="number">0</span>;</span><br><span class="line">    sentinel.masters = dictCreate(&amp;instancesDictType); </span><br><span class="line">    sentinel.tilt = <span class="number">0</span>;</span><br><span class="line">    sentinel.tilt_start_time = <span class="number">0</span>;</span><br><span class="line">    sentinel.previous_time = mstime();</span><br><span class="line">    sentinel.running_scripts = <span class="number">0</span>;</span><br><span class="line">    sentinel.scripts_queue = listCreate(); <span class="comment">// 初始化一个列表</span></span><br><span class="line">    sentinel.announce_ip = <span class="literal">NULL</span>;</span><br><span class="line">    sentinel.announce_port = <span class="number">0</span>;</span><br><span class="line">    sentinel.simfailure_flags = SENTINEL_SIMFAILURE_NONE;</span><br><span class="line">    sentinel.deny_scripts_reconfig = SENTINEL_DEFAULT_DENY_SCRIPTS_RECONFIG;</span><br><span class="line">    sentinel.sentinel_auth_pass = <span class="literal">NULL</span>;</span><br><span class="line">    sentinel.sentinel_auth_user = <span class="literal">NULL</span>;</span><br><span class="line">    sentinel.resolve_hostnames = SENTINEL_DEFAULT_RESOLVE_HOSTNAMES;</span><br><span class="line">    sentinel.announce_hostnames = SENTINEL_DEFAULT_ANNOUNCE_HOSTNAMES;</span><br><span class="line">    <span class="built_in">memset</span>(sentinel.myid,<span class="number">0</span>,<span class="keyword">sizeof</span>(sentinel.myid));</span><br><span class="line">    server.sentinel_config = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>initSentinel</code>函数中使用<code>dict.h/dictCreate</code>初始化一个哈希表，用以保存<code>sentinelRedisInstance名称</code>和<code>sentinelRedisInstance</code>的映射。（后文中使用<code>sri</code>替代<code>sentinelRedisInstance</code>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Instance name (sds) -&gt; instance (sentinelRedisInstance pointer)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * also used for: sentinelRedisInstance-&gt;sentinels dictionary that maps</span></span><br><span class="line"><span class="comment"> * sentinels ip:port to last seen time in Pub/Sub hello message. */</span></span><br><span class="line">dictType instancesDictType = &#123;</span><br><span class="line">    dictSdsHash,               <span class="comment">/* hash function */</span></span><br><span class="line">    <span class="literal">NULL</span>,                      <span class="comment">/* key dup */</span></span><br><span class="line">    <span class="literal">NULL</span>,                      <span class="comment">/* val dup */</span></span><br><span class="line">    dictSdsKeyCompare,         <span class="comment">/* key compare */</span></span><br><span class="line">    <span class="literal">NULL</span>,                      <span class="comment">/* key destructor */</span></span><br><span class="line">    dictInstancesValDestructor,<span class="comment">/* val destructor */</span></span><br><span class="line">    <span class="literal">NULL</span>                       <span class="comment">/* allow to expand */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意到<code>initSentinel</code>执行完毕之后，诸多参数类似<code>sentinel_config</code>都还是空值。</p><h4 id="main-loadSentinelConfigFromQueue"><a href="#main-loadSentinelConfigFromQueue" class="headerlink" title="main -&gt; loadSentinelConfigFromQueue"></a>main -&gt; loadSentinelConfigFromQueue</h4><p><code>sentinelHandleConfiguration</code>函数中多个<code>if-else</code>块分别对应不同的执行命令。其中最主要的就是通过调用<code>sentinelHandleConfiguration</code>处理<code>sentinel</code>配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function is used for loading the sentinel configuration from</span></span><br><span class="line"><span class="comment"> * pre_monitor_cfg, monitor_cfg and post_monitor_cfg list */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">loadSentinelConfigFromQueue</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *err = <span class="literal">NULL</span>;</span><br><span class="line">    listIter li;</span><br><span class="line">    listNode *ln;</span><br><span class="line">    <span class="type">int</span> linenum = <span class="number">0</span>;</span><br><span class="line">    sds line = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* if there is no sentinel_config entry, we can return immediately */</span></span><br><span class="line">    <span class="keyword">if</span> (server.sentinel_config == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span> *sentinel_configs[<span class="number">3</span>] = &#123;</span><br><span class="line">        server.sentinel_config-&gt;pre_monitor_cfg,</span><br><span class="line">        server.sentinel_config-&gt;monitor_cfg,</span><br><span class="line">        server.sentinel_config-&gt;post_monitor_cfg</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/* loading from pre monitor config queue first to avoid dependency issues</span></span><br><span class="line"><span class="comment">     * loading from monitor config queue</span></span><br><span class="line"><span class="comment">     * loading from the post monitor config queue */</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="keyword">sizeof</span>(sentinel_configs) / <span class="keyword">sizeof</span>(sentinel_configs[<span class="number">0</span>]); j++) &#123;</span><br><span class="line">        listRewind(sentinel_configs[j],&amp;li);</span><br><span class="line">        <span class="keyword">while</span>((ln = listNext(&amp;li))) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">sentinelLoadQueueEntry</span> *<span class="title">entry</span> =</span> ln-&gt;value;</span><br><span class="line">            err = sentinelHandleConfiguration(entry-&gt;argv,entry-&gt;argc);</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                linenum = entry-&gt;linenum;</span><br><span class="line">                line = entry-&gt;line;</span><br><span class="line">                <span class="keyword">goto</span> loaderr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* free sentinel_config when config loading is finished */</span></span><br><span class="line">    freeSentinelConfig();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">loaderr:</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n*** FATAL CONFIG FILE ERROR (Redis %s) ***\n&quot;</span>,</span><br><span class="line">        REDIS_VERSION);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Reading the configuration file, at line %d\n&quot;</span>, linenum);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;&gt;&gt;&gt; &#x27;%s&#x27;\n&quot;</span>, line);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, err);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="loadSentinelConfigFromQueue-sentinelHandleConfiguration"><a href="#loadSentinelConfigFromQueue-sentinelHandleConfiguration" class="headerlink" title="loadSentinelConfigFromQueue -&gt; sentinelHandleConfiguration"></a>loadSentinelConfigFromQueue -&gt; sentinelHandleConfiguration</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">sentinelHandleConfiguration</span><span class="params">(<span class="type">char</span> **argv, <span class="type">int</span> argc)</span> &#123;</span><br><span class="line"></span><br><span class="line">    sentinelRedisInstance *ri;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;monitor&quot;</span>) &amp;&amp; argc == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="comment">/* monitor &lt;name&gt; &lt;host&gt; &lt;port&gt; &lt;quorum&gt; */</span></span><br><span class="line">        <span class="type">int</span> quorum = atoi(argv[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (quorum &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;Quorum must be 1 or greater.&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (createSentinelRedisInstance(argv[<span class="number">1</span>],SRI_MASTER,argv[<span class="number">2</span>],</span><br><span class="line">                                        atoi(argv[<span class="number">3</span>]),quorum,<span class="literal">NULL</span>) == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> sentinelCheckCreateInstanceErrors(SRI_MASTER);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;down-after-milliseconds&quot;</span>) &amp;&amp; argc == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* down-after-milliseconds &lt;name&gt; &lt;milliseconds&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        ri-&gt;down_after_period = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (ri-&gt;down_after_period &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;negative or zero time parameter.&quot;</span>;</span><br><span class="line">        sentinelPropagateDownAfterPeriod(ri);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;failover-timeout&quot;</span>) &amp;&amp; argc == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* failover-timeout &lt;name&gt; &lt;milliseconds&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        ri-&gt;failover_timeout = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (ri-&gt;failover_timeout &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;negative or zero time parameter.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;parallel-syncs&quot;</span>) &amp;&amp; argc == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* parallel-syncs &lt;name&gt; &lt;milliseconds&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        ri-&gt;parallel_syncs = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;notification-script&quot;</span>) &amp;&amp; argc == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* notification-script &lt;name&gt; &lt;path&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (access(argv[<span class="number">2</span>],X_OK) == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Notification script seems non existing or non executable.&quot;</span>;</span><br><span class="line">        ri-&gt;notification_script = sdsnew(argv[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;client-reconfig-script&quot;</span>) &amp;&amp; argc == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* client-reconfig-script &lt;name&gt; &lt;path&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (access(argv[<span class="number">2</span>],X_OK) == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Client reconfiguration script seems non existing or &quot;</span></span><br><span class="line">                   <span class="string">&quot;non executable.&quot;</span>;</span><br><span class="line">        ri-&gt;client_reconfig_script = sdsnew(argv[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;auth-pass&quot;</span>) &amp;&amp; argc == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* auth-pass &lt;name&gt; &lt;password&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        ri-&gt;auth_pass = sdsnew(argv[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;auth-user&quot;</span>) &amp;&amp; argc == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* auth-user &lt;name&gt; &lt;username&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        ri-&gt;auth_user = sdsnew(argv[<span class="number">2</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;current-epoch&quot;</span>) &amp;&amp; argc == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">/* current-epoch &lt;epoch&gt; */</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> current_epoch = strtoull(argv[<span class="number">1</span>],<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (current_epoch &gt; sentinel.current_epoch)</span><br><span class="line">            sentinel.current_epoch = current_epoch;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;myid&quot;</span>) &amp;&amp; argc == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != CONFIG_RUN_ID_SIZE)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Malformed Sentinel id in myid option.&quot;</span>;</span><br><span class="line">        <span class="built_in">memcpy</span>(sentinel.myid,argv[<span class="number">1</span>],CONFIG_RUN_ID_SIZE);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;config-epoch&quot;</span>) &amp;&amp; argc == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* config-epoch &lt;name&gt; &lt;epoch&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        ri-&gt;config_epoch = strtoull(argv[<span class="number">2</span>],<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="comment">/* The following update of current_epoch is not really useful as</span></span><br><span class="line"><span class="comment">         * now the current epoch is persisted on the config file, but</span></span><br><span class="line"><span class="comment">         * we leave this check here for redundancy. */</span></span><br><span class="line">        <span class="keyword">if</span> (ri-&gt;config_epoch &gt; sentinel.current_epoch)</span><br><span class="line">            sentinel.current_epoch = ri-&gt;config_epoch;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;leader-epoch&quot;</span>) &amp;&amp; argc == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* leader-epoch &lt;name&gt; &lt;epoch&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        ri-&gt;leader_epoch = strtoull(argv[<span class="number">2</span>],<span class="literal">NULL</span>,<span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;known-slave&quot;</span>) ||</span><br><span class="line">                !strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;known-replica&quot;</span>)) &amp;&amp; argc == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sentinelRedisInstance *slave;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* known-replica &lt;name&gt; &lt;ip&gt; &lt;port&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ((slave = createSentinelRedisInstance(<span class="literal">NULL</span>,SRI_SLAVE,argv[<span class="number">2</span>],</span><br><span class="line">                    atoi(argv[<span class="number">3</span>]), ri-&gt;quorum, ri)) == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> sentinelCheckCreateInstanceErrors(SRI_SLAVE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;known-sentinel&quot;</span>) &amp;&amp;</span><br><span class="line">               (argc == <span class="number">4</span> || argc == <span class="number">5</span>)) &#123;</span><br><span class="line">        sentinelRedisInstance *si;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (argc == <span class="number">5</span>) &#123; <span class="comment">/* Ignore the old form without runid. */</span></span><br><span class="line">            <span class="comment">/* known-sentinel &lt;name&gt; &lt;ip&gt; &lt;port&gt; [runid] */</span></span><br><span class="line">            ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> ((si = createSentinelRedisInstance(argv[<span class="number">4</span>],SRI_SENTINEL,argv[<span class="number">2</span>],</span><br><span class="line">                        atoi(argv[<span class="number">3</span>]), ri-&gt;quorum, ri)) == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> sentinelCheckCreateInstanceErrors(SRI_SENTINEL);</span><br><span class="line">            &#125;</span><br><span class="line">            si-&gt;runid = sdsnew(argv[<span class="number">4</span>]);</span><br><span class="line">            sentinelTryConnectionSharing(si);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;rename-command&quot;</span>) &amp;&amp; argc == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">/* rename-command &lt;name&gt; &lt;command&gt; &lt;renamed-command&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        sds oldcmd = sdsnew(argv[<span class="number">2</span>]);</span><br><span class="line">        sds newcmd = sdsnew(argv[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">if</span> (dictAdd(ri-&gt;renamed_commands,oldcmd,newcmd) != DICT_OK) &#123;</span><br><span class="line">            sdsfree(oldcmd);</span><br><span class="line">            sdsfree(newcmd);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Same command renamed multiple times with rename-command.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;announce-ip&quot;</span>) &amp;&amp; argc == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">/* announce-ip &lt;ip-address&gt; */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[<span class="number">1</span>]))</span><br><span class="line">            sentinel.announce_ip = sdsnew(argv[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;announce-port&quot;</span>) &amp;&amp; argc == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">/* announce-port &lt;port&gt; */</span></span><br><span class="line">        sentinel.announce_port = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;deny-scripts-reconfig&quot;</span>) &amp;&amp; argc == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">/* deny-scripts-reconfig &lt;yes|no&gt; */</span></span><br><span class="line">        <span class="keyword">if</span> ((sentinel.deny_scripts_reconfig = yesnotoi(argv[<span class="number">1</span>])) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Please specify yes or no for the &quot;</span></span><br><span class="line">                   <span class="string">&quot;deny-scripts-reconfig options.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;sentinel-user&quot;</span>) &amp;&amp; argc == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">/* sentinel-user &lt;user-name&gt; */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[<span class="number">1</span>]))</span><br><span class="line">            sentinel.sentinel_auth_user = sdsnew(argv[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;sentinel-pass&quot;</span>) &amp;&amp; argc == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">/* sentinel-pass &lt;password&gt; */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(argv[<span class="number">1</span>]))</span><br><span class="line">            sentinel.sentinel_auth_pass = sdsnew(argv[<span class="number">1</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;resolve-hostnames&quot;</span>) &amp;&amp; argc == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">/* resolve-hostnames &lt;yes|no&gt; */</span></span><br><span class="line">        <span class="keyword">if</span> ((sentinel.resolve_hostnames = yesnotoi(argv[<span class="number">1</span>])) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Please specify yes or no for the resolve-hostnames option.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;announce-hostnames&quot;</span>) &amp;&amp; argc == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">/* announce-hostnames &lt;yes|no&gt; */</span></span><br><span class="line">        <span class="keyword">if</span> ((sentinel.announce_hostnames = yesnotoi(argv[<span class="number">1</span>])) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Please specify yes or no for the announce-hostnames option.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!strcasecmp(argv[<span class="number">0</span>],<span class="string">&quot;master-reboot-down-after-period&quot;</span>) &amp;&amp; argc == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* master-reboot-down-after-period &lt;name&gt; &lt;milliseconds&gt; */</span></span><br><span class="line">        ri = sentinelGetMasterByName(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!ri) <span class="keyword">return</span> <span class="string">&quot;No such master with specified name.&quot;</span>;</span><br><span class="line">        ri-&gt;master_reboot_down_after_period = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (ri-&gt;master_reboot_down_after_period &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;negative time parameter.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unrecognized sentinel configuration statement.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一处<code>if-else</code>语句对应了<code>monitor &lt;name&gt; &lt;host&gt; &lt;port&gt; &lt;quorum&gt;</code>，从配置中读取 客观下线配置<code>quorum</code>，如果小于0，则直接退出。<br>而后调用<code>createSentinelRedisInstance</code>函数尝试创建<code>rsi</code>实例：</p><h6 id="sentinelHandleConfiguration-createSentinelRedisInstance"><a href="#sentinelHandleConfiguration-createSentinelRedisInstance" class="headerlink" title="sentinelHandleConfiguration -&gt; createSentinelRedisInstance"></a>sentinelHandleConfiguration -&gt; createSentinelRedisInstance</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用者</span></span><br><span class="line">createSentinelRedisInstance(argv[<span class="number">1</span>],SRI_MASTER,argv[<span class="number">2</span>],atoi(argv[<span class="number">3</span>]),quorum,<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">sentinelRedisInstance *<span class="title function_">createSentinelRedisInstance</span><span class="params">(<span class="type">char</span> *name, <span class="type">int</span> flags, <span class="type">char</span> *hostname, <span class="type">int</span> port, <span class="type">int</span> quorum, sentinelRedisInstance *master)</span> &#123;</span><br><span class="line">    sentinelRedisInstance *ri;</span><br><span class="line">    sentinelAddr *addr;</span><br><span class="line">    dict *table = <span class="literal">NULL</span>;</span><br><span class="line">    sds sdsname;</span><br><span class="line"></span><br><span class="line">    serverAssert(flags &amp; (SRI_MASTER|SRI_SLAVE|SRI_SENTINEL));</span><br><span class="line">    serverAssert((flags &amp; SRI_MASTER) || master != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check address validity. */</span></span><br><span class="line">    addr = createSentinelAddr(hostname,port,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (addr == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* For slaves use ip/host:port as name. */</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; SRI_SLAVE)</span><br><span class="line">        sdsname = announceSentinelAddrAndPort(addr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        sdsname = sdsnew(name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查以防止master、slave、sentinel重复添加</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; SRI_MASTER) table = sentinel.masters; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; SRI_SLAVE) table = master-&gt;slaves;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; SRI_SENTINEL) table = master-&gt;sentinels;</span><br><span class="line">    <span class="keyword">if</span> (dictFind(table,sdsname)) &#123;</span><br><span class="line">        releaseSentinelAddr(addr);</span><br><span class="line">        sdsfree(sdsname);</span><br><span class="line">        errno = EBUSY;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 rsi 实例，并赋初值</span></span><br><span class="line">    ri = zmalloc(<span class="keyword">sizeof</span>(*ri));</span><br><span class="line">    <span class="comment">/* Note that all the instances are started in the disconnected state,</span></span><br><span class="line"><span class="comment">     * the event loop will take care of connecting them. */</span></span><br><span class="line">    ri-&gt;flags = flags;</span><br><span class="line">    ri-&gt;name = sdsname;</span><br><span class="line">    ri-&gt;runid = <span class="literal">NULL</span>;</span><br><span class="line">    ri-&gt;config_epoch = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;addr = addr;</span><br><span class="line">    ri-&gt;link = createInstanceLink();  <span class="comment">// 这个要重点关注</span></span><br><span class="line">    ri-&gt;last_pub_time = mstime();</span><br><span class="line">    ri-&gt;last_hello_time = mstime();</span><br><span class="line">    ri-&gt;last_master_down_reply_time = mstime();</span><br><span class="line">    ri-&gt;s_down_since_time = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;o_down_since_time = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;down_after_period = master ? master-&gt;down_after_period : sentinel_default_down_after;</span><br><span class="line">    ri-&gt;master_reboot_down_after_period = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;master_link_down_time = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;auth_pass = <span class="literal">NULL</span>;</span><br><span class="line">    ri-&gt;auth_user = <span class="literal">NULL</span>;</span><br><span class="line">    ri-&gt;slave_priority = SENTINEL_DEFAULT_SLAVE_PRIORITY;</span><br><span class="line">    ri-&gt;replica_announced = <span class="number">1</span>;</span><br><span class="line">    ri-&gt;slave_reconf_sent_time = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;slave_master_host = <span class="literal">NULL</span>;</span><br><span class="line">    ri-&gt;slave_master_port = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;slave_master_link_status = SENTINEL_MASTER_LINK_STATUS_DOWN;</span><br><span class="line">    ri-&gt;slave_repl_offset = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;sentinels = dictCreate(&amp;instancesDictType);</span><br><span class="line">    ri-&gt;quorum = quorum;</span><br><span class="line">    ri-&gt;parallel_syncs = SENTINEL_DEFAULT_PARALLEL_SYNCS;</span><br><span class="line">    ri-&gt;master = master;</span><br><span class="line">    ri-&gt;slaves = dictCreate(&amp;instancesDictType);</span><br><span class="line">    ri-&gt;info_refresh = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;renamed_commands = dictCreate(&amp;renamedCommandsDictType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 故障恢复 相关功能配置</span></span><br><span class="line">    ri-&gt;leader = <span class="literal">NULL</span>;</span><br><span class="line">    ri-&gt;leader_epoch = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;failover_epoch = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;failover_state = SENTINEL_FAILOVER_STATE_NONE;</span><br><span class="line">    ri-&gt;failover_state_change_time = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;failover_start_time = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;failover_timeout = sentinel_default_failover_timeout;</span><br><span class="line">    ri-&gt;failover_delay_logged = <span class="number">0</span>;</span><br><span class="line">    ri-&gt;promoted_slave = <span class="literal">NULL</span>;</span><br><span class="line">    ri-&gt;notification_script = <span class="literal">NULL</span>;</span><br><span class="line">    ri-&gt;client_reconfig_script = <span class="literal">NULL</span>;</span><br><span class="line">    ri-&gt;info = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置当前 rsi的实例角色</span></span><br><span class="line">    ri-&gt;role_reported = ri-&gt;flags &amp; (SRI_MASTER|SRI_SLAVE);</span><br><span class="line">    ri-&gt;role_reported_time = mstime();</span><br><span class="line">    ri-&gt;slave_conf_change_time = mstime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Add into the right table. */</span></span><br><span class="line">    dictAdd(table, ri-&gt;name, ri);</span><br><span class="line">    <span class="keyword">return</span> ri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>createSentinelRedisInstance</code>函数时需要传入：</p><ol><li>runid： 设置为null，将在第一次收到<code>info</code>的响应时填充。</li><li>info_refresh: 如果置为0，则说明尚未收到<code>info</code>响应。</li><li>如果设置为<code>SRI_MASTER</code>，它将被加入到<code>sentinel.masters</code>中；如果是<code>SRI_SLAVE</code>或者<code>SRI_SENTINEL</code>，则<code>master！=null</code>且将会被加入到<code>master-&gt;slaves</code>或者<code>master-&gt;sentinels</code>中。</li><li>在<code>SRI_SLAVE</code>时，传入的<code>name</code>字段将会被忽略，创建出的<code>sri</code>中的名称将自动创建，形如<code>ip/hostname:port</code>。</li><li><code>createSentinelRedisInstance</code>创建失败的场景包括：<ul><li>hostname无法被解析。</li><li>端口超出范围。</li><li>master重名，slave地址重复或者 sentinel id重复等。</li></ul></li></ol><p><code>createSentinelRedisInstance</code>中主要包含如下逻辑：</p><ol><li>检查地址有效性</li><li>为slave等分配name</li><li>对比table， 保障实例不会被反复添加</li><li>创建<code>rsi</code>并赋初值 <ul><li>sentinel配置</li><li>故障恢复配置</li><li>sentinel 角色配置</li></ul></li><li>name-rsi table更新</li></ol><p>而后调用栈返回，抵达<code>loadSentinelConfigFromQueue</code>，释放<code>sentinel_config</code>配置。</p><h3 id="main-sentinelCheckConfigFile"><a href="#main-sentinelCheckConfigFile" class="headerlink" title="main -&gt; sentinelCheckConfigFile"></a>main -&gt; sentinelCheckConfigFile</h3><p>此时程序返回，继续执行<code>server.c/sentinelCheckConfigFile</code>中，检查<code>sentinel</code>是否被设置以及检查该配置为简是否有写权限，如果异常则返回。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function is for checking whether sentinel config file has been set,</span></span><br><span class="line"><span class="comment"> * also checking whether we have write permissions. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelCheckConfigFile</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// server.configfile 在 server.c 中已被赋值</span></span><br><span class="line">    <span class="keyword">if</span> (server.configfile == <span class="literal">NULL</span>) &#123; </span><br><span class="line">        serverLog(LL_WARNING,</span><br><span class="line">            <span class="string">&quot;Sentinel needs config file on disk to save state. Exiting...&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (access(server.configfile,W_OK) == <span class="number">-1</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING,</span><br><span class="line">            <span class="string">&quot;Sentinel config file %s is not writable: %s. Exiting...&quot;</span>,</span><br><span class="line">            server.configfile,strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-sentinelIsRunning"><a href="#main-sentinelIsRunning" class="headerlink" title="main -&gt; sentinelIsRunning"></a>main -&gt; sentinelIsRunning</h3><p>完成<code>rsi</code>初始化以及<code>initServer</code>和<code>initListeners</code>之后，还会检查是否<code>sentinel</code>状态，如果是<code>sentinel模式</code>，则调用<code>sentinelIsRunning</code>检查其运行状态；否则，开启额外配置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sentinelIsRunning</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; CONFIG_RUN_ID_SIZE; j++)</span><br><span class="line">        <span class="keyword">if</span> (sentinel.myid[j] != <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == CONFIG_RUN_ID_SIZE) &#123;</span><br><span class="line">        <span class="comment">/* Pick ID and persist the config. */</span></span><br><span class="line">        getRandomHexChars(sentinel.myid,CONFIG_RUN_ID_SIZE);</span><br><span class="line">        sentinelFlushConfig();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Log its ID to make debugging of issues simpler. */</span></span><br><span class="line">    serverLog(LL_NOTICE,<span class="string">&quot;Sentinel ID is %s&quot;</span>, sentinel.myid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We want to generate a +monitor event for every configured master</span></span><br><span class="line"><span class="comment">     * at startup. */</span></span><br><span class="line">    sentinelGenerateInitialMonitorEvents();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sentinelIsRunning</code>中检查该<code>rsi</code>是否有<code>runid</code>，如果没有则随机生成一个并刷入到磁盘文件中。然后调用<code>sentinelGenerateInitialMonitorEvents</code>函数生成监听事件。</p><h4 id="sentinelIsRunning-sentinelGenerateInitialMonitorEvents"><a href="#sentinelIsRunning-sentinelGenerateInitialMonitorEvents" class="headerlink" title="sentinelIsRunning -&gt; sentinelGenerateInitialMonitorEvents"></a>sentinelIsRunning -&gt; sentinelGenerateInitialMonitorEvents</h4><p><code>sentinelGenerateInitialMonitorEvents</code>函数遍历<code>sentinel.masters</code>，为每一个待监听的<code>sentinel</code>创建<code>+monitor</code>事件。<br>该方法在每次调用<code>sentinel monitor master ip port quorum</code>命令时触发，用以为每一个配置的<code>master</code>创建<code>+monitor event</code>事件。<br><code>sentinel monitor</code>命令的作用是让<code>sentinel</code>监听主节点配置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function is called only at startup and is used to generate a</span></span><br><span class="line"><span class="comment"> * +monitor event for every configured master. The same events are also</span></span><br><span class="line"><span class="comment"> * generated when a master to monitor is added at runtime via the</span></span><br><span class="line"><span class="comment"> * SENTINEL MONITOR command. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelGenerateInitialMonitorEvents</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    dictIterator *di;</span><br><span class="line">    dictEntry *de;</span><br><span class="line"></span><br><span class="line">    di = dictGetIterator(sentinel.masters); </span><br><span class="line">    <span class="keyword">while</span>((de = dictNext(di)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        sentinelRedisInstance *ri = dictGetVal(de);</span><br><span class="line">        sentinelEvent(LL_WARNING,<span class="string">&quot;+monitor&quot;</span>,ri,<span class="string">&quot;%@ quorum %d&quot;</span>,ri-&gt;quorum);</span><br><span class="line">    &#125;</span><br><span class="line">    dictReleaseIterator(di);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sentinelEvent</code>函数的逻辑如下：<br>如果日志级别非<code>LL_DEBUG</code>，则调用<code>pubsubPublishMessage</code>传递该事件通知。其实现位于<code>pubsub.c</code>中。<br>如果日志级别为<code>LL_DEBUG</code>且<code>ri！=null</code>，且指定了通知脚本，则调用<code>sentinelScheduleScriptExecution</code>传递。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sentinelEvent</span><span class="params">(<span class="type">int</span> level, <span class="type">char</span> *type, sentinelRedisInstance *ri,</span></span><br><span class="line"><span class="params">                   <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span> &#123;</span><br><span class="line">    va_list ap;</span><br><span class="line">    <span class="type">char</span> msg[LOG_MAX_LEN];</span><br><span class="line">    robj *channel, *payload;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Handle %@ */</span></span><br><span class="line">    <span class="keyword">if</span> (fmt[<span class="number">0</span>] == <span class="string">&#x27;%&#x27;</span> &amp;&amp; fmt[<span class="number">1</span>] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">        sentinelRedisInstance *master = (ri-&gt;flags &amp; SRI_MASTER) ?</span><br><span class="line">                                         <span class="literal">NULL</span> : ri-&gt;master;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (master) &#123;</span><br><span class="line">            <span class="built_in">snprintf</span>(msg, <span class="keyword">sizeof</span>(msg), <span class="string">&quot;%s %s %s %d @ %s %s %d&quot;</span>,</span><br><span class="line">                sentinelRedisInstanceTypeStr(ri),</span><br><span class="line">                ri-&gt;name, announceSentinelAddr(ri-&gt;addr), ri-&gt;addr-&gt;port,</span><br><span class="line">                master-&gt;name, announceSentinelAddr(master-&gt;addr), master-&gt;addr-&gt;port);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">snprintf</span>(msg, <span class="keyword">sizeof</span>(msg), <span class="string">&quot;%s %s %s %d&quot;</span>,</span><br><span class="line">                sentinelRedisInstanceTypeStr(ri),</span><br><span class="line">                ri-&gt;name, announceSentinelAddr(ri-&gt;addr), ri-&gt;addr-&gt;port);</span><br><span class="line">        &#125;</span><br><span class="line">        fmt += <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        msg[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use vsprintf for the rest of the formatting if any. */</span></span><br><span class="line">    <span class="keyword">if</span> (fmt[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        va_start(ap, fmt);</span><br><span class="line">        vsnprintf(msg+<span class="built_in">strlen</span>(msg), <span class="keyword">sizeof</span>(msg)-<span class="built_in">strlen</span>(msg), fmt, ap);</span><br><span class="line">        va_end(ap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Log the message if the log level allows it to be logged. */</span></span><br><span class="line">    <span class="keyword">if</span> (level &gt;= server.verbosity)</span><br><span class="line">        serverLog(level,<span class="string">&quot;%s %s&quot;</span>,type,msg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Publish the message via Pub/Sub if it&#x27;s not a debugging one. */</span></span><br><span class="line">    <span class="keyword">if</span> (level != LL_DEBUG) &#123;</span><br><span class="line">        channel = createStringObject(type,<span class="built_in">strlen</span>(type));</span><br><span class="line">        payload = createStringObject(msg,<span class="built_in">strlen</span>(msg));</span><br><span class="line">        pubsubPublishMessage(channel,payload,<span class="number">0</span>);</span><br><span class="line">        decrRefCount(channel);</span><br><span class="line">        decrRefCount(payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Call the notification script if applicable. */</span></span><br><span class="line">    <span class="keyword">if</span> (level == LL_WARNING &amp;&amp; ri != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        sentinelRedisInstance *master = (ri-&gt;flags &amp; SRI_MASTER) ?</span><br><span class="line">                                         ri : ri-&gt;master;</span><br><span class="line">        <span class="keyword">if</span> (master &amp;&amp; master-&gt;notification_script) &#123;</span><br><span class="line">            sentinelScheduleScriptExecution(master-&gt;notification_script,</span><br><span class="line">                type,msg,<span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此<code>rsi</code>就创建完毕了，但是各实例间是如何通信的呢？来看下面这段代码：</p><h3 id="serverCron"><a href="#serverCron" class="headerlink" title="serverCron"></a>serverCron</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">serverCron</span><span class="params">(<span class="keyword">struct</span> aeEventLoop *eventLoop, <span class="type">long</span> <span class="type">long</span> id, <span class="type">void</span> *clientData)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (server.sentinel_mode) sentinelTimer();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="serverCron-sentinelTimer"><a href="#serverCron-sentinelTimer" class="headerlink" title="serverCron -&gt; sentinelTimer"></a>serverCron -&gt; sentinelTimer</h4><p>在<code>server.c/main</code>代码块的末尾，会注册事件循环，每次注册事件的时会调用<code>aeCreateTimeEvent</code>创建时间事件。<br>来看<code>sentinelTimer</code>函数具体做了什么：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sentinelTimer</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    sentinelCheckTiltCondition();</span><br><span class="line">    sentinelHandleDictOfRedisInstances(sentinel.masters);</span><br><span class="line">    sentinelRunPendingScripts();</span><br><span class="line">    sentinelCollectTerminatedScripts();</span><br><span class="line">    sentinelKillTimedoutScripts();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We continuously change the frequency of the Redis &quot;timer interrupt&quot;</span></span><br><span class="line"><span class="comment">     * in order to desynchronize every Sentinel from every other.</span></span><br><span class="line"><span class="comment">     * This non-determinism avoids that Sentinels started at the same time</span></span><br><span class="line"><span class="comment">     * exactly continue to stay synchronized asking to be voted at the</span></span><br><span class="line"><span class="comment">     * same time again and again (resulting in nobody likely winning the</span></span><br><span class="line"><span class="comment">     * election because of split brain voting). */</span></span><br><span class="line">    server.hz = CONFIG_DEFAULT_HZ + rand() % CONFIG_DEFAULT_HZ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>sentinelTimer</code>中主要分为三部分：</p><ol><li>检查是否处于<code>titl</code>静默模式中</li><li>处理<code>rsi</code>实例</li><li>处理脚本</li></ol><h4 id="sentinelTimer-sentinelCheckTiltCondition"><a href="#sentinelTimer-sentinelCheckTiltCondition" class="headerlink" title="sentinelTimer -&gt;  sentinelCheckTiltCondition"></a>sentinelTimer -&gt;  sentinelCheckTiltCondition</h4><p>下面逐一来看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sentinelCheckTiltCondition</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">mstime_t</span> now = mstime();</span><br><span class="line">    <span class="type">mstime_t</span> delta = now - sentinel.previous_time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (delta &lt; <span class="number">0</span> || delta &gt; sentinel_tilt_trigger) &#123;</span><br><span class="line">        sentinel.tilt = <span class="number">1</span>;</span><br><span class="line">        sentinel.tilt_start_time = mstime();</span><br><span class="line">        sentinelEvent(LL_WARNING,<span class="string">&quot;+tilt&quot;</span>,<span class="literal">NULL</span>,<span class="string">&quot;#tilt mode entered&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sentinel.previous_time = mstime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sentinelCheckTiltCondition</code>函数检查当前<code>sentinel</code>是否进入<code>TILT</code>状态: 如果检测到两次时间任务的返回值为负数或者非常大的数，则将进入<code>TILT</code>模式。在进入<code>TITL</code>模式后，等待<code>SENTINEL_TILT_PERIOD </code>再执行操作。<br>出现如上现象的原因有：</p><ol><li><code>sentinel</code>在处理某些任务时阻塞了，可能原因是加载过大的数据，主机io异常，进程接收到信号stop。</li><li>系统时钟发生了重大变化。</li></ol><h4 id="sentinelTimer-sentinelHandleDictOfRedisInstances"><a href="#sentinelTimer-sentinelHandleDictOfRedisInstances" class="headerlink" title="sentinelTimer -&gt;  sentinelHandleDictOfRedisInstances"></a>sentinelTimer -&gt;  sentinelHandleDictOfRedisInstances</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Perform scheduled operations for all the instances in the dictionary.</span></span><br><span class="line"><span class="comment"> * Recursively call the function against dictionaries of slaves. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelHandleDictOfRedisInstances</span><span class="params">(dict *instances)</span> &#123;</span><br><span class="line">    dictIterator *di;</span><br><span class="line">    dictEntry *de;</span><br><span class="line">    sentinelRedisInstance *switch_to_promoted = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* There are a number of things we need to perform against every master. */</span></span><br><span class="line">    di = dictGetIterator(instances);</span><br><span class="line">    <span class="keyword">while</span>((de = dictNext(di)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        sentinelRedisInstance *ri = dictGetVal(de);</span><br><span class="line"></span><br><span class="line">        sentinelHandleRedisInstance(ri);</span><br><span class="line">        <span class="keyword">if</span> (ri-&gt;flags &amp; SRI_MASTER) &#123;</span><br><span class="line">            sentinelHandleDictOfRedisInstances(ri-&gt;slaves);</span><br><span class="line">            sentinelHandleDictOfRedisInstances(ri-&gt;sentinels);</span><br><span class="line">            <span class="keyword">if</span> (ri-&gt;failover_state == SENTINEL_FAILOVER_STATE_UPDATE_CONFIG) &#123;</span><br><span class="line">                switch_to_promoted = ri;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (switch_to_promoted)</span><br><span class="line">        sentinelFailoverSwitchToPromotedSlave(switch_to_promoted);</span><br><span class="line">    dictReleaseIterator(di);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sentinelHandleDictOfRedisInstances</code>函数执行时传参为<code>sentinel.masters</code>,该值在<code>initSentinel</code>时初始化，在<code>createSentinelRedisInstance</code>中完成赋值。<br>遍历当前模式中的所有主服务器，执行<code>sentinelHandleRedisInstance</code>操作。<br>如果当前遍历到的服务器是主服务器，则还需要对其<code>sentinels</code>和<code>slaves</code>进行相同的处理。<br><code>sentinelHandleDictOfRedisInstances</code>中递归处理<code>rsi</code>实例，并判断是否需要故障恢复并完成<code>主节点的选举</code>。</p><h5 id="sentinelHandleDictOfRedisInstances-sentinelHandleRedisInstance"><a href="#sentinelHandleDictOfRedisInstances-sentinelHandleRedisInstance" class="headerlink" title="sentinelHandleDictOfRedisInstances -&gt; sentinelHandleRedisInstance"></a>sentinelHandleDictOfRedisInstances -&gt; sentinelHandleRedisInstance</h5><p><code>sentinelHandleRedisInstance</code>函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Perform scheduled operations for the specified Redis instance. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelHandleRedisInstance</span><span class="params">(sentinelRedisInstance *ri)</span> &#123;</span><br><span class="line">    <span class="comment">/* ========== MONITORING HALF ============ */</span></span><br><span class="line">    <span class="comment">/* Every kind of instance */</span></span><br><span class="line">    sentinelReconnectInstance(ri);</span><br><span class="line">    sentinelSendPeriodicCommands(ri);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ============== ACTING HALF ============= */</span></span><br><span class="line">    <span class="comment">/* We don&#x27;t proceed with the acting half if we are in TILT mode.</span></span><br><span class="line"><span class="comment">     * TILT happens when we find something odd with the time, like a</span></span><br><span class="line"><span class="comment">     * sudden change in the clock. */</span></span><br><span class="line">    <span class="keyword">if</span> (sentinel.tilt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mstime()-sentinel.tilt_start_time &lt; sentinel_tilt_period) <span class="keyword">return</span>;</span><br><span class="line">        sentinel.tilt = <span class="number">0</span>;</span><br><span class="line">        sentinelEvent(LL_WARNING,<span class="string">&quot;-tilt&quot;</span>,<span class="literal">NULL</span>,<span class="string">&quot;#tilt mode exited&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Every kind of instance */</span></span><br><span class="line">    sentinelCheckSubjectivelyDown(ri);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Masters and slaves */</span></span><br><span class="line">    <span class="keyword">if</span> (ri-&gt;flags &amp; (SRI_MASTER|SRI_SLAVE)) &#123;</span><br><span class="line">        <span class="comment">/* Nothing so far. */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Only masters */</span></span><br><span class="line">    <span class="keyword">if</span> (ri-&gt;flags &amp; SRI_MASTER) &#123;</span><br><span class="line">        sentinelCheckObjectivelyDown(ri);</span><br><span class="line">        <span class="keyword">if</span> (sentinelStartFailoverIfNeeded(ri))</span><br><span class="line">            sentinelAskMasterStateToOtherSentinels(ri,SENTINEL_ASK_FORCED);</span><br><span class="line">        sentinelFailoverStateMachine(ri);</span><br><span class="line">        sentinelAskMasterStateToOtherSentinels(ri,SENTINEL_NO_FLAGS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要包含如下操作：</p><ol><li>sentinel重连其他实例。  </li><li>sentinel向其他实例发送定期任务。  </li><li>判断是否titl模式，如果是则发送<code>-titl</code>事件。</li><li>对每种类型的实例判断是否主观下线。</li><li>针对<code>master</code>，判断是否客观下线。<ul><li>如果需要进行故障恢复，向其他<code>sentinel</code>询问<code>master</code>的状态。</li><li>选出执行故障恢复的 <code>leader sentinel</code>。</li><li>向其他<code>sentinel</code>询问<code>master</code>的状态。</li></ul></li></ol><p>如果当前已经变为保护模式，则执行<code>sentinelFailoverSwitchToPromotedSlave</code>函数。</p><p>这部分代码逻辑不在此处展开，放到后面的具体场景中介绍。</p><h6 id="sentinelHandleRedisInstance-sentinelReconnectInstance"><a href="#sentinelHandleRedisInstance-sentinelReconnectInstance" class="headerlink" title="sentinelHandleRedisInstance -&gt; sentinelReconnectInstance"></a>sentinelHandleRedisInstance -&gt; sentinelReconnectInstance</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Create the async connections for the instance link if the link</span></span><br><span class="line"><span class="comment"> * is disconnected. Note that link-&gt;disconnected is true even if just</span></span><br><span class="line"><span class="comment"> * one of the two links (commands and pub/sub) is missing. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelReconnectInstance</span><span class="params">(sentinelRedisInstance *ri)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ri-&gt;link-&gt;disconnected == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (ri-&gt;addr-&gt;port == <span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">/* port == 0 means invalid address. */</span></span><br><span class="line">    instanceLink *link = ri-&gt;link;</span><br><span class="line">    <span class="type">mstime_t</span> now = mstime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (now - ri-&gt;link-&gt;last_reconn_time &lt; sentinel_ping_period) <span class="keyword">return</span>;</span><br><span class="line">    ri-&gt;link-&gt;last_reconn_time = now;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Commands connection. */</span></span><br><span class="line">    <span class="keyword">if</span> (link-&gt;cc == <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* It might be that the instance is disconnected because it wasn&#x27;t available earlier when the instance</span></span><br><span class="line"><span class="comment">         * allocated, say during failover, and therefore we failed to resolve its ip.</span></span><br><span class="line"><span class="comment">         * Another scenario is that the instance restarted with new ip, and we should resolve its new ip based on</span></span><br><span class="line"><span class="comment">         * its hostname */</span></span><br><span class="line">        <span class="keyword">if</span> (sentinel.resolve_hostnames) &#123;</span><br><span class="line">            sentinelAddr *tryResolveAddr = createSentinelAddr(ri-&gt;addr-&gt;hostname, ri-&gt;addr-&gt;port, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (tryResolveAddr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                releaseSentinelAddr(ri-&gt;addr);</span><br><span class="line">                ri-&gt;addr = tryResolveAddr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        link-&gt;cc = redisAsyncConnectBind(ri-&gt;addr-&gt;ip,ri-&gt;addr-&gt;port,server.bind_source_addr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (link-&gt;cc &amp;&amp; !link-&gt;cc-&gt;err) anetCloexec(link-&gt;cc-&gt;c.fd);</span><br><span class="line">        <span class="keyword">if</span> (!link-&gt;cc) &#123;</span><br><span class="line">            sentinelEvent(LL_DEBUG,<span class="string">&quot;-cmd-link-reconnection&quot;</span>,ri,<span class="string">&quot;%@ #Failed to establish connection&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!link-&gt;cc-&gt;err &amp;&amp; server.tls_replication &amp;&amp;</span><br><span class="line">                (instanceLinkNegotiateTLS(link-&gt;cc) == C_ERR)) &#123;</span><br><span class="line">            sentinelEvent(LL_DEBUG,<span class="string">&quot;-cmd-link-reconnection&quot;</span>,ri,<span class="string">&quot;%@ #Failed to initialize TLS&quot;</span>);</span><br><span class="line">            instanceLinkCloseConnection(link,link-&gt;cc);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (link-&gt;cc-&gt;err) &#123;</span><br><span class="line">            sentinelEvent(LL_DEBUG,<span class="string">&quot;-cmd-link-reconnection&quot;</span>,ri,<span class="string">&quot;%@ #%s&quot;</span>,</span><br><span class="line">                link-&gt;cc-&gt;errstr);</span><br><span class="line">            instanceLinkCloseConnection(link,link-&gt;cc);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            link-&gt;pending_commands = <span class="number">0</span>;</span><br><span class="line">            link-&gt;cc_conn_time = mstime();</span><br><span class="line">            link-&gt;cc-&gt;data = link;</span><br><span class="line">            redisAeAttach(server.el,link-&gt;cc);</span><br><span class="line">            redisAsyncSetConnectCallback(link-&gt;cc,</span><br><span class="line">                    sentinelLinkEstablishedCallback);</span><br><span class="line">            redisAsyncSetDisconnectCallback(link-&gt;cc,</span><br><span class="line">                    sentinelDisconnectCallback);</span><br><span class="line">            sentinelSendAuthIfNeeded(ri,link-&gt;cc);</span><br><span class="line">            sentinelSetClientName(ri,link-&gt;cc,<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Send a PING ASAP when reconnecting. */</span></span><br><span class="line">            sentinelSendPing(ri);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Pub / Sub */</span></span><br><span class="line">    <span class="keyword">if</span> ((ri-&gt;flags &amp; (SRI_MASTER|SRI_SLAVE)) &amp;&amp; link-&gt;pc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        link-&gt;pc = redisAsyncConnectBind(ri-&gt;addr-&gt;ip,ri-&gt;addr-&gt;port,server.bind_source_addr);</span><br><span class="line">        <span class="keyword">if</span> (link-&gt;pc &amp;&amp; !link-&gt;pc-&gt;err) anetCloexec(link-&gt;pc-&gt;c.fd);</span><br><span class="line">        <span class="keyword">if</span> (!link-&gt;pc) &#123;</span><br><span class="line">            sentinelEvent(LL_DEBUG,<span class="string">&quot;-pubsub-link-reconnection&quot;</span>,ri,<span class="string">&quot;%@ #Failed to establish connection&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!link-&gt;pc-&gt;err &amp;&amp; server.tls_replication &amp;&amp;</span><br><span class="line">                (instanceLinkNegotiateTLS(link-&gt;pc) == C_ERR)) &#123;</span><br><span class="line">            sentinelEvent(LL_DEBUG,<span class="string">&quot;-pubsub-link-reconnection&quot;</span>,ri,<span class="string">&quot;%@ #Failed to initialize TLS&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (link-&gt;pc-&gt;err) &#123;</span><br><span class="line">            sentinelEvent(LL_DEBUG,<span class="string">&quot;-pubsub-link-reconnection&quot;</span>,ri,<span class="string">&quot;%@ #%s&quot;</span>,</span><br><span class="line">                link-&gt;pc-&gt;errstr);</span><br><span class="line">            instanceLinkCloseConnection(link,link-&gt;pc);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> retval;</span><br><span class="line">            link-&gt;pc_conn_time = mstime();</span><br><span class="line">            link-&gt;pc-&gt;data = link;</span><br><span class="line">            redisAeAttach(server.el,link-&gt;pc);</span><br><span class="line">            redisAsyncSetConnectCallback(link-&gt;pc,</span><br><span class="line">                    sentinelLinkEstablishedCallback);</span><br><span class="line">            redisAsyncSetDisconnectCallback(link-&gt;pc,</span><br><span class="line">                    sentinelDisconnectCallback);</span><br><span class="line">            sentinelSendAuthIfNeeded(ri,link-&gt;pc);</span><br><span class="line">            sentinelSetClientName(ri,link-&gt;pc,<span class="string">&quot;pubsub&quot;</span>);</span><br><span class="line">            <span class="comment">/* Now we subscribe to the Sentinels &quot;Hello&quot; channel. */</span></span><br><span class="line">            retval = redisAsyncCommand(link-&gt;pc,</span><br><span class="line">                sentinelReceiveHelloMessages, ri, <span class="string">&quot;%s %s&quot;</span>,</span><br><span class="line">                sentinelInstanceMapCommand(ri,<span class="string">&quot;SUBSCRIBE&quot;</span>),</span><br><span class="line">                SENTINEL_HELLO_CHANNEL);</span><br><span class="line">            <span class="keyword">if</span> (retval != C_OK) &#123;</span><br><span class="line">                <span class="comment">/* If we can&#x27;t subscribe, the Pub/Sub connection is useless</span></span><br><span class="line"><span class="comment">                 * and we can simply disconnect it and try again. */</span></span><br><span class="line">                instanceLinkCloseConnection(link,link-&gt;pc);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Clear the disconnected status only if we have both the connections</span></span><br><span class="line"><span class="comment">     * (or just the commands connection if this is a sentinel instance). */</span></span><br><span class="line">    <span class="keyword">if</span> (link-&gt;cc &amp;&amp; (ri-&gt;flags &amp; SRI_SENTINEL || link-&gt;pc))</span><br><span class="line">        link-&gt;disconnected = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="sentinelHandleRedisInstance-sentinelSendPeriodicCommands"><a href="#sentinelHandleRedisInstance-sentinelSendPeriodicCommands" class="headerlink" title="sentinelHandleRedisInstance -&gt; sentinelSendPeriodicCommands"></a>sentinelHandleRedisInstance -&gt; sentinelSendPeriodicCommands</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Send periodic PING, INFO, and PUBLISH to the Hello channel to</span></span><br><span class="line"><span class="comment"> * the specified master or slave instance. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelSendPeriodicCommands</span><span class="params">(sentinelRedisInstance *ri)</span> &#123;</span><br><span class="line">    <span class="type">mstime_t</span> now = mstime();</span><br><span class="line">    <span class="type">mstime_t</span> info_period, ping_period;</span><br><span class="line">    <span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Return ASAP if we have already a PING or INFO already pending, or</span></span><br><span class="line"><span class="comment">     * in the case the instance is not properly connected. */</span></span><br><span class="line">    <span class="keyword">if</span> (ri-&gt;link-&gt;disconnected) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* For INFO, PING, PUBLISH that are not critical commands to send we</span></span><br><span class="line"><span class="comment">     * also have a limit of SENTINEL_MAX_PENDING_COMMANDS. We don&#x27;t</span></span><br><span class="line"><span class="comment">     * want to use a lot of memory just because a link is not working</span></span><br><span class="line"><span class="comment">     * properly (note that anyway there is a redundant protection about this,</span></span><br><span class="line"><span class="comment">     * that is, the link will be disconnected and reconnected if a long</span></span><br><span class="line"><span class="comment">     * timeout condition is detected. */</span></span><br><span class="line">    <span class="keyword">if</span> (ri-&gt;link-&gt;pending_commands &gt;=</span><br><span class="line">        SENTINEL_MAX_PENDING_COMMANDS * ri-&gt;link-&gt;refcount) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If this is a slave of a master in O_DOWN condition we start sending</span></span><br><span class="line"><span class="comment">     * it INFO every second, instead of the usual SENTINEL_INFO_PERIOD</span></span><br><span class="line"><span class="comment">     * period. In this state we want to closely monitor slaves in case they</span></span><br><span class="line"><span class="comment">     * are turned into masters by another Sentinel, or by the sysadmin.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Similarly we monitor the INFO output more often if the slave reports</span></span><br><span class="line"><span class="comment">     * to be disconnected from the master, so that we can have a fresh</span></span><br><span class="line"><span class="comment">     * disconnection time figure. */</span></span><br><span class="line">    <span class="keyword">if</span> ((ri-&gt;flags &amp; SRI_SLAVE) &amp;&amp;</span><br><span class="line">        ((ri-&gt;master-&gt;flags &amp; (SRI_O_DOWN|SRI_FAILOVER_IN_PROGRESS)) ||</span><br><span class="line">         (ri-&gt;master_link_down_time != <span class="number">0</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        info_period = <span class="number">1000</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        info_period = sentinel_info_period;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We ping instances every time the last received pong is older than</span></span><br><span class="line"><span class="comment">     * the configured &#x27;down-after-milliseconds&#x27; time, but every second</span></span><br><span class="line"><span class="comment">     * anyway if &#x27;down-after-milliseconds&#x27; is greater than 1 second. */</span></span><br><span class="line">    ping_period = ri-&gt;down_after_period;</span><br><span class="line">    <span class="keyword">if</span> (ping_period &gt; sentinel_ping_period) ping_period = sentinel_ping_period;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Send INFO to masters and slaves, not sentinels. */</span></span><br><span class="line">    <span class="keyword">if</span> ((ri-&gt;flags &amp; SRI_SENTINEL) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (ri-&gt;info_refresh == <span class="number">0</span> ||</span><br><span class="line">        (now - ri-&gt;info_refresh) &gt; info_period))</span><br><span class="line">    &#123;</span><br><span class="line">        retval = redisAsyncCommand(ri-&gt;link-&gt;cc,</span><br><span class="line">            sentinelInfoReplyCallback, ri, <span class="string">&quot;%s&quot;</span>,</span><br><span class="line">            sentinelInstanceMapCommand(ri,<span class="string">&quot;INFO&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (retval == C_OK) ri-&gt;link-&gt;pending_commands++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Send PING to all the three kinds of instances. */</span></span><br><span class="line">    <span class="keyword">if</span> ((now - ri-&gt;link-&gt;last_pong_time) &gt; ping_period &amp;&amp;</span><br><span class="line">               (now - ri-&gt;link-&gt;last_ping_time) &gt; ping_period/<span class="number">2</span>) &#123;</span><br><span class="line">        sentinelSendPing(ri);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* PUBLISH hello messages to all the three kinds of instances. */</span></span><br><span class="line">    <span class="keyword">if</span> ((now - ri-&gt;last_pub_time) &gt; sentinel_publish_period) &#123;</span><br><span class="line">        sentinelSendHello(ri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sentinelTimer-sentinelRunPendingScripts"><a href="#sentinelTimer-sentinelRunPendingScripts" class="headerlink" title="sentinelTimer -&gt; sentinelRunPendingScripts"></a>sentinelTimer -&gt; sentinelRunPendingScripts</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sentinelRunPendingScripts</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    listNode *ln;</span><br><span class="line">    listIter li;</span><br><span class="line">    <span class="type">mstime_t</span> now = mstime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Find jobs that are not running and run them, from the top to the</span></span><br><span class="line"><span class="comment">     * tail of the queue, so we run older jobs first. */</span></span><br><span class="line">    listRewind(sentinel.scripts_queue,&amp;li);</span><br><span class="line">    <span class="keyword">while</span> (sentinel.running_scripts &lt; SENTINEL_SCRIPT_MAX_RUNNING &amp;&amp;</span><br><span class="line">           (ln = listNext(&amp;li)) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sentinelScriptJob *sj = ln-&gt;value;</span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Skip if already running. */</span></span><br><span class="line">        <span class="keyword">if</span> (sj-&gt;flags &amp; SENTINEL_SCRIPT_RUNNING) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Skip if it&#x27;s a retry, but not enough time has elapsed. */</span></span><br><span class="line">        <span class="keyword">if</span> (sj-&gt;start_time &amp;&amp; sj-&gt;start_time &gt; now) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        sj-&gt;flags |= SENTINEL_SCRIPT_RUNNING;</span><br><span class="line">        sj-&gt;start_time = mstime();</span><br><span class="line">        sj-&gt;retry_num++;</span><br><span class="line">        pid = fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">/* Parent (fork error).</span></span><br><span class="line"><span class="comment">             * We report fork errors as signal 99, in order to unify the</span></span><br><span class="line"><span class="comment">             * reporting with other kind of errors. */</span></span><br><span class="line">            sentinelEvent(LL_WARNING,<span class="string">&quot;-script-error&quot;</span>,<span class="literal">NULL</span>,</span><br><span class="line">                          <span class="string">&quot;%s %d %d&quot;</span>, sj-&gt;argv[<span class="number">0</span>], <span class="number">99</span>, <span class="number">0</span>);</span><br><span class="line">            sj-&gt;flags &amp;= ~SENTINEL_SCRIPT_RUNNING;</span><br><span class="line">            sj-&gt;pid = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* Child */</span></span><br><span class="line">            connTypeCleanupAll();</span><br><span class="line">            execve(sj-&gt;argv[<span class="number">0</span>],sj-&gt;argv,environ);</span><br><span class="line">            <span class="comment">/* If we are here an error occurred. */</span></span><br><span class="line">            _exit(<span class="number">2</span>); <span class="comment">/* Don&#x27;t retry execution. */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sentinel.running_scripts++;</span><br><span class="line">            sj-&gt;pid = pid;</span><br><span class="line">            sentinelEvent(LL_DEBUG,<span class="string">&quot;+script-child&quot;</span>,<span class="literal">NULL</span>,<span class="string">&quot;%ld&quot;</span>,(<span class="type">long</span>)pid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sentinelTimer-sentinelCollectTerminatedScripts"><a href="#sentinelTimer-sentinelCollectTerminatedScripts" class="headerlink" title="sentinelTimer -&gt; sentinelCollectTerminatedScripts"></a>sentinelTimer -&gt; sentinelCollectTerminatedScripts</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Check for scripts that terminated, and remove them from the queue if the</span></span><br><span class="line"><span class="comment"> * script terminated successfully. If instead the script was terminated by</span></span><br><span class="line"><span class="comment"> * a signal, or returned exit code &quot;1&quot;, it is scheduled to run again if</span></span><br><span class="line"><span class="comment"> * the max number of retries did not already elapsed. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelCollectTerminatedScripts</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> statloc;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((pid = waitpid(<span class="number">-1</span>, &amp;statloc, WNOHANG)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> exitcode = WEXITSTATUS(statloc);</span><br><span class="line">        <span class="type">int</span> bysignal = <span class="number">0</span>;</span><br><span class="line">        listNode *ln;</span><br><span class="line">        sentinelScriptJob *sj;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (WIFSIGNALED(statloc)) bysignal = WTERMSIG(statloc);</span><br><span class="line">        sentinelEvent(LL_DEBUG,<span class="string">&quot;-script-child&quot;</span>,<span class="literal">NULL</span>,<span class="string">&quot;%ld %d %d&quot;</span>,</span><br><span class="line">            (<span class="type">long</span>)pid, exitcode, bysignal);</span><br><span class="line"></span><br><span class="line">        ln = sentinelGetScriptListNodeByPid(pid);</span><br><span class="line">        <span class="keyword">if</span> (ln == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            serverLog(LL_WARNING,<span class="string">&quot;waitpid() returned a pid (%ld) we can&#x27;t find in our scripts execution queue!&quot;</span>, (<span class="type">long</span>)pid);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sj = ln-&gt;value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If the script was terminated by a signal or returns an</span></span><br><span class="line"><span class="comment">         * exit code of &quot;1&quot; (that means: please retry), we reschedule it</span></span><br><span class="line"><span class="comment">         * if the max number of retries is not already reached. */</span></span><br><span class="line">        <span class="keyword">if</span> ((bysignal || exitcode == <span class="number">1</span>) &amp;&amp;</span><br><span class="line">            sj-&gt;retry_num != SENTINEL_SCRIPT_MAX_RETRY)</span><br><span class="line">        &#123;</span><br><span class="line">            sj-&gt;flags &amp;= ~SENTINEL_SCRIPT_RUNNING;</span><br><span class="line">            sj-&gt;pid = <span class="number">0</span>;</span><br><span class="line">            sj-&gt;start_time = mstime() +</span><br><span class="line">                             sentinelScriptRetryDelay(sj-&gt;retry_num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* Otherwise let&#x27;s remove the script, but log the event if the</span></span><br><span class="line"><span class="comment">             * execution did not terminated in the best of the ways. */</span></span><br><span class="line">            <span class="keyword">if</span> (bysignal || exitcode != <span class="number">0</span>) &#123;</span><br><span class="line">                sentinelEvent(LL_WARNING,<span class="string">&quot;-script-error&quot;</span>,<span class="literal">NULL</span>,</span><br><span class="line">                              <span class="string">&quot;%s %d %d&quot;</span>, sj-&gt;argv[<span class="number">0</span>], bysignal, exitcode);</span><br><span class="line">            &#125;</span><br><span class="line">            listDelNode(sentinel.scripts_queue,ln);</span><br><span class="line">            sentinelReleaseScriptJob(sj);</span><br><span class="line">        &#125;</span><br><span class="line">        sentinel.running_scripts--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sentinelTimer-sentinelKillTimedoutScripts"><a href="#sentinelTimer-sentinelKillTimedoutScripts" class="headerlink" title="sentinelTimer -&gt; sentinelKillTimedoutScripts"></a>sentinelTimer -&gt; sentinelKillTimedoutScripts</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Kill scripts in timeout, they&#x27;ll be collected by the</span></span><br><span class="line"><span class="comment"> * sentinelCollectTerminatedScripts() function. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelKillTimedoutScripts</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    listNode *ln;</span><br><span class="line">    listIter li;</span><br><span class="line">    <span class="type">mstime_t</span> now = mstime();</span><br><span class="line"></span><br><span class="line">    listRewind(sentinel.scripts_queue,&amp;li);</span><br><span class="line">    <span class="keyword">while</span> ((ln = listNext(&amp;li)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        sentinelScriptJob *sj = ln-&gt;value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sj-&gt;flags &amp; SENTINEL_SCRIPT_RUNNING &amp;&amp;</span><br><span class="line">            (now - sj-&gt;start_time) &gt; sentinel_script_max_runtime)</span><br><span class="line">        &#123;</span><br><span class="line">            sentinelEvent(LL_WARNING,<span class="string">&quot;-script-timeout&quot;</span>,<span class="literal">NULL</span>,<span class="string">&quot;%s %ld&quot;</span>,</span><br><span class="line">                sj-&gt;argv[<span class="number">0</span>], (<span class="type">long</span>)sj-&gt;pid);</span><br><span class="line">            kill(sj-&gt;pid,SIGKILL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sentinel-创建过程"><a href="#sentinel-创建过程" class="headerlink" title="sentinel 创建过程"></a>sentinel 创建过程</h3><h4 id="启动并初始化sentinel"><a href="#启动并初始化sentinel" class="headerlink" title="启动并初始化sentinel"></a>启动并初始化sentinel</h4><h4 id="初始化服务器"><a href="#初始化服务器" class="headerlink" title="初始化服务器"></a>初始化服务器</h4><h4 id="初始化-sentinel状态"><a href="#初始化-sentinel状态" class="headerlink" title="初始化 sentinel状态"></a>初始化 sentinel状态</h4><h4 id="初始化sentinel状态和masters属性"><a href="#初始化sentinel状态和masters属性" class="headerlink" title="初始化sentinel状态和masters属性"></a>初始化sentinel状态和masters属性</h4><h4 id="创建连向主服务器的网络连接"><a href="#创建连向主服务器的网络连接" class="headerlink" title="创建连向主服务器的网络连接"></a>创建连向主服务器的网络连接</h4><h3 id="sentinel、server之间如何通信？"><a href="#sentinel、server之间如何通信？" class="headerlink" title="sentinel、server之间如何通信？"></a>sentinel、server之间如何通信？</h3><h4 id="通信过程中的命令？"><a href="#通信过程中的命令？" class="headerlink" title="通信过程中的命令？"></a>通信过程中的命令？</h4><h4 id="sentinel如何应对脑裂？"><a href="#sentinel如何应对脑裂？" class="headerlink" title="sentinel如何应对脑裂？"></a>sentinel如何应对脑裂？</h4><p><code>sentinelSendPeriodicCommands</code>函数中定义了通信过程中使用的命令</p><h4 id="什么是TILT-mode？"><a href="#什么是TILT-mode？" class="headerlink" title="什么是TILT mode？"></a>什么是TILT mode？</h4><h3 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Only masters */</span></span><br><span class="line">    <span class="keyword">if</span> (ri-&gt;flags &amp; SRI_MASTER) &#123;</span><br><span class="line">        sentinelCheckObjectivelyDown(ri);</span><br><span class="line">        <span class="keyword">if</span> (sentinelStartFailoverIfNeeded(ri))</span><br><span class="line">            sentinelAskMasterStateToOtherSentinels(ri,SENTINEL_ASK_FORCED);</span><br><span class="line">        sentinelFailoverStateMachine(ri);</span><br><span class="line">        sentinelAskMasterStateToOtherSentinels(ri,SENTINEL_NO_FLAGS);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="如何检测主观下线"><a href="#如何检测主观下线" class="headerlink" title="如何检测主观下线"></a>如何检测主观下线</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Is this instance down from our point of view? */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelCheckSubjectivelyDown</span><span class="params">(sentinelRedisInstance *ri)</span> &#123;</span><br><span class="line">    <span class="type">mstime_t</span> elapsed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ri-&gt;link-&gt;act_ping_time)</span><br><span class="line">        elapsed = mstime() - ri-&gt;link-&gt;act_ping_time;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ri-&gt;link-&gt;disconnected)</span><br><span class="line">        elapsed = mstime() - ri-&gt;link-&gt;last_avail_time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check if we are in need for a reconnection of one of the</span></span><br><span class="line"><span class="comment">     * links, because we are detecting low activity.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1) Check if the command link seems connected, was connected not less</span></span><br><span class="line"><span class="comment">     *    than SENTINEL_MIN_LINK_RECONNECT_PERIOD, but still we have a</span></span><br><span class="line"><span class="comment">     *    pending ping for more than half the timeout. */</span></span><br><span class="line">    <span class="keyword">if</span> (ri-&gt;link-&gt;cc &amp;&amp;</span><br><span class="line">        (mstime() - ri-&gt;link-&gt;cc_conn_time) &gt;</span><br><span class="line">        sentinel_min_link_reconnect_period &amp;&amp;</span><br><span class="line">        ri-&gt;link-&gt;act_ping_time != <span class="number">0</span> &amp;&amp; <span class="comment">/* There is a pending ping... */</span></span><br><span class="line">        <span class="comment">/* The pending ping is delayed, and we did not receive</span></span><br><span class="line"><span class="comment">         * error replies as well. */</span></span><br><span class="line">        (mstime() - ri-&gt;link-&gt;act_ping_time) &gt; (ri-&gt;down_after_period/<span class="number">2</span>) &amp;&amp;</span><br><span class="line">        (mstime() - ri-&gt;link-&gt;last_pong_time) &gt; (ri-&gt;down_after_period/<span class="number">2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        instanceLinkCloseConnection(ri-&gt;link,ri-&gt;link-&gt;cc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 2) Check if the pubsub link seems connected, was connected not less</span></span><br><span class="line"><span class="comment">     *    than SENTINEL_MIN_LINK_RECONNECT_PERIOD, but still we have no</span></span><br><span class="line"><span class="comment">     *    activity in the Pub/Sub channel for more than</span></span><br><span class="line"><span class="comment">     *    SENTINEL_PUBLISH_PERIOD * 3.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (ri-&gt;link-&gt;pc &amp;&amp;</span><br><span class="line">        (mstime() - ri-&gt;link-&gt;pc_conn_time) &gt;</span><br><span class="line">         sentinel_min_link_reconnect_period &amp;&amp;</span><br><span class="line">        (mstime() - ri-&gt;link-&gt;pc_last_activity) &gt; (sentinel_publish_period*<span class="number">3</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        instanceLinkCloseConnection(ri-&gt;link,ri-&gt;link-&gt;pc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Update the SDOWN flag. We believe the instance is SDOWN if:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1) It is not replying.</span></span><br><span class="line"><span class="comment">     * 2) We believe it is a master, it reports to be a slave for enough time</span></span><br><span class="line"><span class="comment">     *    to meet the down_after_period, plus enough time to get two times</span></span><br><span class="line"><span class="comment">     *    INFO report from the instance. */</span></span><br><span class="line">    <span class="keyword">if</span> (elapsed &gt; ri-&gt;down_after_period ||</span><br><span class="line">        (ri-&gt;flags &amp; SRI_MASTER &amp;&amp;</span><br><span class="line">         ri-&gt;role_reported == SRI_SLAVE &amp;&amp;</span><br><span class="line">         mstime() - ri-&gt;role_reported_time &gt;</span><br><span class="line">          (ri-&gt;down_after_period+sentinel_info_period*<span class="number">2</span>)) ||</span><br><span class="line">          (ri-&gt;flags &amp; SRI_MASTER_REBOOT &amp;&amp; </span><br><span class="line">           mstime()-ri-&gt;master_reboot_since_time &gt; ri-&gt;master_reboot_down_after_period))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Is subjectively down */</span></span><br><span class="line">        <span class="keyword">if</span> ((ri-&gt;flags &amp; SRI_S_DOWN) == <span class="number">0</span>) &#123;</span><br><span class="line">            sentinelEvent(LL_WARNING,<span class="string">&quot;+sdown&quot;</span>,ri,<span class="string">&quot;%@&quot;</span>);</span><br><span class="line">            ri-&gt;s_down_since_time = mstime();</span><br><span class="line">            ri-&gt;flags |= SRI_S_DOWN;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Is subjectively up */</span></span><br><span class="line">        <span class="keyword">if</span> (ri-&gt;flags &amp; SRI_S_DOWN) &#123;</span><br><span class="line">            sentinelEvent(LL_WARNING,<span class="string">&quot;-sdown&quot;</span>,ri,<span class="string">&quot;%@&quot;</span>);</span><br><span class="line">            ri-&gt;flags &amp;= ~(SRI_S_DOWN|SRI_SCRIPT_KILL_SENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何检测客观下线"><a href="#如何检测客观下线" class="headerlink" title="如何检测客观下线"></a>如何检测客观下线</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sentinelCheckObjectivelyDown</span><span class="params">(sentinelRedisInstance *master)</span> &#123;</span><br><span class="line">    dictIterator *di;</span><br><span class="line">    dictEntry *de;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> quorum = <span class="number">0</span>, odown = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (master-&gt;flags &amp; SRI_S_DOWN) &#123;</span><br><span class="line">        <span class="comment">/* Is down for enough sentinels? */</span></span><br><span class="line">        quorum = <span class="number">1</span>; <span class="comment">/* the current sentinel. */</span></span><br><span class="line">        <span class="comment">/* Count all the other sentinels. */</span></span><br><span class="line">        di = dictGetIterator(master-&gt;sentinels);</span><br><span class="line">        <span class="keyword">while</span>((de = dictNext(di)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            sentinelRedisInstance *ri = dictGetVal(de);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ri-&gt;flags &amp; SRI_MASTER_DOWN) quorum++;</span><br><span class="line">        &#125;</span><br><span class="line">        dictReleaseIterator(di);</span><br><span class="line">        <span class="keyword">if</span> (quorum &gt;= master-&gt;quorum) odown = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Set the flag accordingly to the outcome. */</span></span><br><span class="line">    <span class="keyword">if</span> (odown) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((master-&gt;flags &amp; SRI_O_DOWN) == <span class="number">0</span>) &#123;</span><br><span class="line">            sentinelEvent(LL_WARNING,<span class="string">&quot;+odown&quot;</span>,master,<span class="string">&quot;%@ #quorum %d/%d&quot;</span>,</span><br><span class="line">                quorum, master-&gt;quorum);</span><br><span class="line">            master-&gt;flags |= SRI_O_DOWN;</span><br><span class="line">            master-&gt;o_down_since_time = mstime();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (master-&gt;flags &amp; SRI_O_DOWN) &#123;</span><br><span class="line">            sentinelEvent(LL_WARNING,<span class="string">&quot;-odown&quot;</span>,master,<span class="string">&quot;%@&quot;</span>);</span><br><span class="line">            master-&gt;flags &amp;= ~SRI_O_DOWN;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sentinelFailoverStateMachine"><a href="#sentinelFailoverStateMachine" class="headerlink" title="sentinelFailoverStateMachine"></a>sentinelFailoverStateMachine</h5><p>根据<code>rsi</code>当前的故障恢复状态，进行不同的操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sentinelFailoverStateMachine</span><span class="params">(sentinelRedisInstance *ri)</span> &#123;</span><br><span class="line">    serverAssert(ri-&gt;flags &amp; SRI_MASTER);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(ri-&gt;flags &amp; SRI_FAILOVER_IN_PROGRESS)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(ri-&gt;failover_state) &#123;</span><br><span class="line">        <span class="keyword">case</span> SENTINEL_FAILOVER_STATE_WAIT_START:</span><br><span class="line">            sentinelFailoverWaitStart(ri);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SENTINEL_FAILOVER_STATE_SELECT_SLAVE:</span><br><span class="line">            sentinelFailoverSelectSlave(ri);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE:</span><br><span class="line">            sentinelFailoverSendSlaveOfNoOne(ri);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SENTINEL_FAILOVER_STATE_WAIT_PROMOTION:</span><br><span class="line">            sentinelFailoverWaitPromotion(ri);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SENTINEL_FAILOVER_STATE_RECONF_SLAVES:</span><br><span class="line">            sentinelFailoverReconfNextSlave(ri);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sentinelAskMasterStateToOtherSentinels"><a href="#sentinelAskMasterStateToOtherSentinels" class="headerlink" title="sentinelAskMasterStateToOtherSentinels"></a>sentinelAskMasterStateToOtherSentinels</h5><p>向其他<code>sentinel</code>询问<code>master</code>的状态</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* If we think the master is down, we start sending</span></span><br><span class="line"><span class="comment"> * SENTINEL IS-MASTER-DOWN-BY-ADDR requests to other sentinels</span></span><br><span class="line"><span class="comment"> * in order to get the replies that allow to reach the quorum</span></span><br><span class="line"><span class="comment"> * needed to mark the master in ODOWN state and trigger a failover. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SENTINEL_ASK_FORCED (1&lt;&lt;0)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelAskMasterStateToOtherSentinels</span><span class="params">(sentinelRedisInstance *master, <span class="type">int</span> flags)</span> &#123;</span><br><span class="line">    dictIterator *di;</span><br><span class="line">    dictEntry *de;</span><br><span class="line"></span><br><span class="line">    di = dictGetIterator(master-&gt;sentinels);</span><br><span class="line">    <span class="keyword">while</span>((de = dictNext(di)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        sentinelRedisInstance *ri = dictGetVal(de);</span><br><span class="line">        <span class="type">mstime_t</span> elapsed = mstime() - ri-&gt;last_master_down_reply_time;</span><br><span class="line">        <span class="type">char</span> port[<span class="number">32</span>];</span><br><span class="line">        <span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If the master state from other sentinel is too old, we clear it. */</span></span><br><span class="line">        <span class="keyword">if</span> (elapsed &gt; sentinel_ask_period*<span class="number">5</span>) &#123;</span><br><span class="line">            ri-&gt;flags &amp;= ~SRI_MASTER_DOWN;</span><br><span class="line">            sdsfree(ri-&gt;leader);</span><br><span class="line">            ri-&gt;leader = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Only ask if master is down to other sentinels if:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1) We believe it is down, or there is a failover in progress.</span></span><br><span class="line"><span class="comment">         * 2) Sentinel is connected.</span></span><br><span class="line"><span class="comment">         * 3) We did not receive the info within SENTINEL_ASK_PERIOD ms. */</span></span><br><span class="line">        <span class="keyword">if</span> ((master-&gt;flags &amp; SRI_S_DOWN) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (ri-&gt;link-&gt;disconnected) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(flags &amp; SENTINEL_ASK_FORCED) &amp;&amp;</span><br><span class="line">            mstime() - ri-&gt;last_master_down_reply_time &lt; sentinel_ask_period)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Ask */</span></span><br><span class="line">        ll2string(port,<span class="keyword">sizeof</span>(port),master-&gt;addr-&gt;port);</span><br><span class="line">        retval = redisAsyncCommand(ri-&gt;link-&gt;cc,</span><br><span class="line">                    sentinelReceiveIsMasterDownReply, ri,</span><br><span class="line">                    <span class="string">&quot;%s is-master-down-by-addr %s %s %llu %s&quot;</span>,</span><br><span class="line">                    sentinelInstanceMapCommand(ri,<span class="string">&quot;SENTINEL&quot;</span>),</span><br><span class="line">                    announceSentinelAddr(master-&gt;addr), port,</span><br><span class="line">                    sentinel.current_epoch,</span><br><span class="line">                    (master-&gt;failover_state &gt; SENTINEL_FAILOVER_STATE_NONE) ?</span><br><span class="line">                    sentinel.myid : <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (retval == C_OK) ri-&gt;link-&gt;pending_commands++;</span><br><span class="line">    &#125;</span><br><span class="line">    dictReleaseIterator(di);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sentinelHandleDictOfRedisInstances-sentinelFailoverSwitchToPromotedSlave"><a href="#sentinelHandleDictOfRedisInstances-sentinelFailoverSwitchToPromotedSlave" class="headerlink" title="sentinelHandleDictOfRedisInstances -&gt; sentinelFailoverSwitchToPromotedSlave"></a>sentinelHandleDictOfRedisInstances -&gt; sentinelFailoverSwitchToPromotedSlave</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function is called when the slave is in</span></span><br><span class="line"><span class="comment"> * SENTINEL_FAILOVER_STATE_UPDATE_CONFIG state. In this state we need</span></span><br><span class="line"><span class="comment"> * to remove it from the master table and add the promoted slave instead. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelFailoverSwitchToPromotedSlave</span><span class="params">(sentinelRedisInstance *master)</span> &#123;</span><br><span class="line">    sentinelRedisInstance *ref = master-&gt;promoted_slave ?</span><br><span class="line">                                 master-&gt;promoted_slave : master;</span><br><span class="line"></span><br><span class="line">    sentinelEvent(LL_WARNING,<span class="string">&quot;+switch-master&quot;</span>,master,<span class="string">&quot;%s %s %d %s %d&quot;</span>,</span><br><span class="line">        master-&gt;name, announceSentinelAddr(master-&gt;addr), master-&gt;addr-&gt;port,</span><br><span class="line">        announceSentinelAddr(ref-&gt;addr), ref-&gt;addr-&gt;port);</span><br><span class="line"></span><br><span class="line">    sentinelResetMasterAndChangeAddress(master,ref-&gt;addr-&gt;hostname,ref-&gt;addr-&gt;port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This function is called when the slave is in</span></span><br><span class="line"><span class="comment"> * SENTINEL_FAILOVER_STATE_UPDATE_CONFIG state. In this state we need</span></span><br><span class="line"><span class="comment"> * to remove it from the master table and add the promoted slave instead. */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelFailoverSwitchToPromotedSlave</span><span class="params">(sentinelRedisInstance *master)</span> &#123;</span><br><span class="line">    sentinelRedisInstance *ref = master-&gt;promoted_slave ?</span><br><span class="line">                                 master-&gt;promoted_slave : master;</span><br><span class="line"></span><br><span class="line">    sentinelEvent(LL_WARNING,<span class="string">&quot;+switch-master&quot;</span>,master,<span class="string">&quot;%s %s %d %s %d&quot;</span>,</span><br><span class="line">        master-&gt;name, announceSentinelAddr(master-&gt;addr), master-&gt;addr-&gt;port,</span><br><span class="line">        announceSentinelAddr(ref-&gt;addr), ref-&gt;addr-&gt;port);</span><br><span class="line"></span><br><span class="line">    sentinelResetMasterAndChangeAddress(master,ref-&gt;addr-&gt;hostname,ref-&gt;addr-&gt;port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sentinelFailoverStateMachine</span><span class="params">(sentinelRedisInstance *ri)</span> &#123;</span><br><span class="line">    serverAssert(ri-&gt;flags &amp; SRI_MASTER);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(ri-&gt;flags &amp; SRI_FAILOVER_IN_PROGRESS)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(ri-&gt;failover_state) &#123;</span><br><span class="line">        <span class="keyword">case</span> SENTINEL_FAILOVER_STATE_WAIT_START:</span><br><span class="line">            sentinelFailoverWaitStart(ri);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SENTINEL_FAILOVER_STATE_SELECT_SLAVE:</span><br><span class="line">            sentinelFailoverSelectSlave(ri);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE:</span><br><span class="line">            sentinelFailoverSendSlaveOfNoOne(ri);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SENTINEL_FAILOVER_STATE_WAIT_PROMOTION:</span><br><span class="line">            sentinelFailoverWaitPromotion(ri);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SENTINEL_FAILOVER_STATE_RECONF_SLAVES:</span><br><span class="line">            sentinelFailoverReconfNextSlave(ri);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sentinelFailoverSwitchToPromotedSlave</code>函数首先发起<code>+switch-master</code>事件，并通知所有<code>sentinel</code>。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://juejin.cn/post/7072740438452469774">1. redis设计与实现</a><br><a href="https://cloud.tencent.com/developer/article/1021467">2. Raft协议实战之Redis Sentinel的选举Leader源码解析</a><br><a href="https://time.geekbang.org/column/article/275337">3. 极客时间-关于哨兵模式的讨论</a><br><a href="https://z.itpub.net/article/detail/61F53FE9A1487984804DB48AAB9EF262">4. Redis主从、哨兵、 Cluster集群一锅端！</a><br><a href="https://bbs.huaweicloud.com/blogs/detail/234846">5. Redis Sentinel 源码分析（1）Sentinel的初始化</a><br><a href="https://cloud.tencent.com/developer/article/1021467">6. Raft协议实战之Redis Sentinel的选举Leader源码解析</a><br><a href="http://redisdoc.com/topic/sentinel.html">7. sentinel命令参考</a><br><a href="https://bbs.huaweicloud.com/blogs/242476">8. Redis Sentinel 源码：Redis的高可用模型分析</a><br><a href="https://www.modb.pro/db/221414">9. Redis专题：深入解读哨兵模式</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;前文&lt;a href=&quot;https://mqrayblog.cn/2023/08/07/redis%E4%B9%8B%E4%B8%BB%E4%</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis之主从复制</title>
    <link href="https://mqrayblog.cn/2023/08/07/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>https://mqrayblog.cn/2023/08/07/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2023-08-07T15:13:18.000Z</published>
    <updated>2023-09-05T10:47:06.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><p>主从结构是常用的计算机系统架构，通常被用于分布式系统中，其中一个节点<code>master</code>拥有最新的数据，其他节点<code>slave</code>复制并同步主节点的数据。  </p><p>主从结构中，主节点负责写入数据，并将这些数据同步到从节点中；从节点只能读取数据。主从节点键通过网络连接，完成数据同步。  </p><p>主从模式也常被用于数据库系统中，提供高可用能力。当主节点发生故障或者失效时，从节点可以被选举为新的主节点，保证系统的可用性。 </p><img src="/2023/08/07/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/redis_master_slave_arch.png">  <h3 id="主从模式的优点"><a href="#主从模式的优点" class="headerlink" title="主从模式的优点"></a>主从模式的优点</h3><ol><li>负载均衡：读写分离：提高服务器的性能。</li><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的数据冗余手段。</li><li>高可用基石：主从模式是哨兵模式和集群模式的基础。</li></ol><h3 id="主从模式的缺点？"><a href="#主从模式的缺点？" class="headerlink" title="主从模式的缺点？"></a>主从模式的缺点？</h3><ol><li>主从模式不具备自动容错和恢复功能，主节点故障，集群无法工作，可用性较低。从节点升为主节点需要人工手动干预。</li></ol><h2 id="为什么redis要使用主从模式？"><a href="#为什么redis要使用主从模式？" class="headerlink" title="为什么redis要使用主从模式？"></a>为什么redis要使用主从模式？</h2><p>在了解<code>redis</code>主从结构的原理前，先来了解一下分布式系统的理论基石 <code>CAP</code>原理：</p><ol><li>C, Consistent, 即一致性；</li><li>A, Availability, 即可用性；</li><li>P, Partition， 即分区容忍性。</li></ol><p>redis复制过程主从节点之间网络故障时，不能满足强一致性，故而只能满足AP。</p><h3 id="如何使用主从复制？"><a href="#如何使用主从复制？" class="headerlink" title="如何使用主从复制？"></a>如何使用主从复制？</h3><p><code>redis 2.8</code>对主从复制功能进行了优化，早先的版本主从复制功能的实现包含两个步骤：</p><ol><li>同步： 用于将从服务器的服务器状态更新至主服务器当前的数据库状态。</li><li>命令传播：用于将 主从同步过程中发生的主服务器的修改命令同步至从服务器，以防止主从数据库状态不一致的情况。</li></ol><p>slave of ip port<br>该命令的作用？</p><h3 id="复制过程"><a href="#复制过程" class="headerlink" title="复制过程"></a>复制过程</h3><h4 id="主从服务器建立链接"><a href="#主从服务器建立链接" class="headerlink" title="主从服务器建立链接"></a>主从服务器建立链接</h4><p>从服务器作为客户端向主服务器发送<code>slaveof  master_ip master_port</code></p><h4 id="旧版本复制功能的实现？"><a href="#旧版本复制功能的实现？" class="headerlink" title="旧版本复制功能的实现？"></a>旧版本复制功能的实现？</h4><p>旧版本主从复制包含<code>同步</code>和<code>命令传播</code>两个部分，如下是整体流程：<br><img src="/2023/08/07/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/master_slave_copy.png"></p><h4 id="旧版复制的缺陷？"><a href="#旧版复制的缺陷？" class="headerlink" title="旧版复制的缺陷？"></a>旧版复制的缺陷？</h4><p>主从复制过程有如下两个场景：</p><ol><li>初次复制： slave未同步过任何master，或者当前待复制的主服务器和上一次复制的主服务器不同</li><li>断线后复制：处于命令传播阶段主从服务器因为网络故障而中断，而后网络恢复后继续同步数据库状态。<br>在旧版复制功能中，主从服务器发生网络故障后，主从服务器之间数据库状态不一致，slave会向主服务器发送<code>sync</code>命令，主服务器再次生成包含当前数据库状态的<code>rdb</code>文件，而后发送给从服务器，从服务器载入<code>rbd</code>文件后继续执行主服务器发来的写命令。<br>上述过程的缺陷是，已经同步过的主从节点断联之后，再次连接时需要主服务器生成包含其当前数据库状态的<code>rdb</code>文件，更为关键的是，此网络故障期间，主节点可能只执行了少数写命令，而需要付出全量更新的开销。</li></ol><h4 id="sync命令的开销"><a href="#sync命令的开销" class="headerlink" title="sync命令的开销"></a>sync命令的开销</h4><p><code>sync</code>命令，主从服务器需要执行以下动作：</p><ol><li>主服务器需要执行<code>bgsave</code>命令生成<code>rdb</code>文件，此操作会耗费主服务器的大量cpu、内存和磁盘io资源。</li><li>主服务器将生成的<code>RDB</code>文件发送给从服务器，此操作耗费主从服务器的大量网络资源，并对主服务器的命令响应事件产生影响。</li><li>从服务器载入收到的<code>rdb</code>文件前，无法处理读请求。</li></ol><h4 id="全量复制过程？"><a href="#全量复制过程？" class="headerlink" title="全量复制过程？"></a>全量复制过程？</h4><p>redis 2.8之前?</p><p>sync</p><h4 id="旧版本复制的缺陷？"><a href="#旧版本复制的缺陷？" class="headerlink" title="旧版本复制的缺陷？"></a>旧版本复制的缺陷？</h4><p>为了解决旧版本复制功能在处理断线重复复制时的低效问题，<code>redis 2.8</code>之后使用<code>psync</code>命令代替<code>sync</code>来执行复制时的同步操作。<br><code>psync</code>命令提供两种模式：</p><ol><li>完整重同步： 主服务器创建并发送rdb文件，向从服务器发送保存在缓冲区中的写命令进行同步。</li><li>部分重同步：用于处理断线后的复制情况。断线重连后，如果情况允许，主服务器将主从断联期间执行的写命令发送给从服务器，从服务器接收并执行写命令，完成数据库状态同步。</li></ol><p>那么，<code>psync</code>的改进即是感知主从是断联场景，这是如何实现的呢？</p><h3 id="部分重同步的实现？"><a href="#部分重同步的实现？" class="headerlink" title="部分重同步的实现？"></a>部分重同步的实现？</h3><p>部分重同步功能的实现依赖三个结构：</p><ol><li>主从服务器的复制偏移量 和从服务器的 复制偏移量。</li><li>主服务器的复制积压缓冲区。</li><li>服务器的运行id。<br>相应的定义在<code>server.h</code>，注意到，在<code>server</code>中，与主从复制相关的结构定义包含两部分，分别是主服务器配置和从服务器配置。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Replication (master) */</span></span><br><span class="line">    <span class="type">char</span> replid[CONFIG_RUN_ID_SIZE+<span class="number">1</span>];  <span class="comment">/* My current replication ID. */</span></span><br><span class="line">    <span class="type">char</span> replid2[CONFIG_RUN_ID_SIZE+<span class="number">1</span>]; <span class="comment">/* replid inherited from master*/</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> master_repl_offset;   <span class="comment">/* My current replication offset */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> second_replid_offset; <span class="comment">/* Accept offsets up to this for replid2. */</span></span><br><span class="line">    redisAtomic <span class="type">long</span> <span class="type">long</span> fsynced_reploff_pending;<span class="comment">/* Largest replication offset to</span></span><br><span class="line"><span class="comment">                                     * potentially have been fsynced, applied to</span></span><br><span class="line"><span class="comment">                                       fsynced_reploff only when AOF state is AOF_ON</span></span><br><span class="line"><span class="comment">                                       (not during the initial rewrite) */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> fsynced_reploff;      <span class="comment">/* Largest replication offset that has been confirmed to be fsynced */</span></span><br><span class="line">    <span class="type">int</span> slaveseldb;                 <span class="comment">/* Last SELECTed DB in replication output */</span></span><br><span class="line">    <span class="type">int</span> repl_ping_slave_period;     <span class="comment">/* Master pings the slave every N seconds */</span></span><br><span class="line">    replBacklog *repl_backlog;      <span class="comment">/* Replication backlog for partial syncs */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_backlog_size;    <span class="comment">/* Backlog circular buffer size */</span></span><br><span class="line">    <span class="type">time_t</span> repl_backlog_time_limit; <span class="comment">/* Time without slaves after the backlog</span></span><br><span class="line"><span class="comment">                                       gets released. */</span></span><br><span class="line">    <span class="type">time_t</span> repl_no_slaves_since;    <span class="comment">/* We have no slaves since that time.</span></span><br><span class="line"><span class="comment">                                       Only valid if server.slaves len is 0. */</span></span><br><span class="line">    <span class="type">int</span> repl_min_slaves_to_write;   <span class="comment">/* Min number of slaves to write. */</span></span><br><span class="line">    <span class="type">int</span> repl_min_slaves_max_lag;    <span class="comment">/* Max lag of &lt;count&gt; slaves to write. */</span></span><br><span class="line">    <span class="type">int</span> repl_good_slaves_count;     <span class="comment">/* Number of slaves with lag &lt;= max_lag. */</span></span><br><span class="line">    <span class="type">int</span> repl_diskless_sync;         <span class="comment">/* Master send RDB to slaves sockets directly. */</span></span><br><span class="line">    <span class="type">int</span> repl_diskless_load;         <span class="comment">/* Slave parse RDB directly from the socket.</span></span><br><span class="line"><span class="comment">                                     * see REPL_DISKLESS_LOAD_* enum */</span></span><br><span class="line">    <span class="type">int</span> repl_diskless_sync_delay;   <span class="comment">/* Delay to start a diskless repl BGSAVE. */</span></span><br><span class="line">    <span class="type">int</span> repl_diskless_sync_max_replicas;<span class="comment">/* Max replicas for diskless repl BGSAVE</span></span><br><span class="line"><span class="comment">                                         * delay (start sooner if they all connect). */</span></span><br><span class="line">    <span class="type">size_t</span> repl_buffer_mem;         <span class="comment">/* The memory of replication buffer. */</span></span><br><span class="line">    <span class="built_in">list</span> *repl_buffer_blocks;       <span class="comment">/* Replication buffers blocks list</span></span><br><span class="line"><span class="comment">                                     * (serving replica clients and repl backlog) */</span></span><br></pre></td></tr></table></figure><p>从服务器配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Replication (slave) */</span></span><br><span class="line">    <span class="type">char</span> *masteruser;               <span class="comment">/* AUTH with this user and masterauth with master */</span></span><br><span class="line">    sds masterauth;                 <span class="comment">/* AUTH with this password with master */</span></span><br><span class="line">    <span class="type">char</span> *masterhost;               <span class="comment">/* Hostname of master */</span></span><br><span class="line">    <span class="type">int</span> masterport;                 <span class="comment">/* Port of master */</span></span><br><span class="line">    <span class="type">int</span> repl_timeout;               <span class="comment">/* Timeout after N seconds of master idle */</span></span><br><span class="line">    client *master;     <span class="comment">/* Client that is master for this slave */</span></span><br><span class="line">    client *cached_master; <span class="comment">/* Cached master to be reused for PSYNC. */</span></span><br><span class="line">    <span class="type">int</span> repl_syncio_timeout; <span class="comment">/* Timeout for synchronous I/O calls */</span></span><br><span class="line">    <span class="type">int</span> repl_state;          <span class="comment">/* Replication status if the instance is a slave */</span></span><br><span class="line">    <span class="type">off_t</span> repl_transfer_size; <span class="comment">/* Size of RDB to read from master during sync. */</span></span><br><span class="line">    <span class="type">off_t</span> repl_transfer_read; <span class="comment">/* Amount of RDB read from master during sync. */</span></span><br><span class="line">    <span class="type">off_t</span> repl_transfer_last_fsync_off; <span class="comment">/* Offset when we fsync-ed last time. */</span></span><br><span class="line">    connection *repl_transfer_s;     <span class="comment">/* Slave -&gt; Master SYNC connection */</span></span><br><span class="line">    <span class="type">int</span> repl_transfer_fd;    <span class="comment">/* Slave -&gt; Master SYNC temp file descriptor */</span></span><br><span class="line">    <span class="type">char</span> *repl_transfer_tmpfile; <span class="comment">/* Slave-&gt; master SYNC temp file name */</span></span><br><span class="line">    <span class="type">time_t</span> repl_transfer_lastio; <span class="comment">/* Unix time of the latest read, for timeout */</span></span><br><span class="line">    <span class="type">int</span> repl_serve_stale_data; <span class="comment">/* Serve stale data when link is down? */</span></span><br><span class="line">    <span class="type">int</span> repl_slave_ro;          <span class="comment">/* Slave is read only? */</span></span><br><span class="line">    <span class="type">int</span> repl_slave_ignore_maxmemory;    <span class="comment">/* If true slaves do not evict. */</span></span><br><span class="line">    <span class="type">time_t</span> repl_down_since; <span class="comment">/* Unix time at which link with master went down */</span></span><br><span class="line">    <span class="type">int</span> repl_disable_tcp_nodelay;   <span class="comment">/* Disable TCP_NODELAY after SYNC? */</span></span><br><span class="line">    <span class="type">int</span> slave_priority;             <span class="comment">/* Reported in INFO and used by Sentinel. */</span></span><br><span class="line">    <span class="type">int</span> replica_announced;          <span class="comment">/* If true, replica is announced by Sentinel */</span></span><br><span class="line">    <span class="type">int</span> slave_announce_port;        <span class="comment">/* Give the master this listening port. */</span></span><br><span class="line">    <span class="type">char</span> *slave_announce_ip;        <span class="comment">/* Give the master this ip address. */</span></span><br><span class="line">    <span class="type">int</span> propagation_error_behavior; <span class="comment">/* Configures the behavior of the replica</span></span><br><span class="line"><span class="comment">                                     * when it receives an error on the replication stream */</span></span><br><span class="line">    <span class="type">int</span> repl_ignore_disk_write_error;   <span class="comment">/* Configures whether replicas panic when unable to</span></span><br><span class="line"><span class="comment">                                         * persist writes to AOF. */</span></span><br><span class="line">    <span class="comment">/* The following two fields is where we store master PSYNC replid/offset</span></span><br><span class="line"><span class="comment">     * while the PSYNC is in progress. At the end we&#x27;ll copy the fields into</span></span><br><span class="line"><span class="comment">     * the server-&gt;master client structure. */</span></span><br><span class="line">    <span class="type">char</span> master_replid[CONFIG_RUN_ID_SIZE+<span class="number">1</span>];  <span class="comment">/* Master PSYNC runid. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> master_initial_offset;           <span class="comment">/* Master PSYNC offset. */</span></span><br><span class="line">    <span class="type">int</span> repl_slave_lazy_flush;          <span class="comment">/* Lazy FLUSHALL before loading DB? */</span></span><br><span class="line">    <span class="comment">/* Synchronous replication. */</span></span><br><span class="line">    <span class="built_in">list</span> *clients_waiting_acks;         <span class="comment">/* Clients waiting in WAIT or WAITAOF. */</span></span><br><span class="line">    <span class="type">int</span> get_ack_from_slaves;            <span class="comment">/* If true we send REPLCONF GETACK. */</span></span><br></pre></td></tr></table></figure><h4 id="复制偏移量"><a href="#复制偏移量" class="headerlink" title="复制偏移量"></a>复制偏移量</h4><p>执行复制的双方分别维护一个复制偏移量。[主服务器应当维护多个？]</p><ul><li>主服务器每次向从服务器传播N个字节的数据时，就将自己的复制偏移量+N </li><li>从服务器每次收到主服务器的N个字节的数据时，将自身的复制偏移量+N<br>通过对比主从服务器的复制偏移量，可以得出主从节点是否处于一致状态。<br>如果偏移量一致，则主从服务器处于抑制状态；否则处于非一致状态。<br>注意，主服务器配置中复制偏移量为<code>master_repl_offset</code>，而从服务器中，</li></ul><p>关于下笔时的问题，主服务器中是否应当维护多个复制偏移量，答案是否定的，在源码定义中未找到对应的定义。可以理解为，一主多从时，服务器会将当前数据库状态传递给多个从服务器，并同步复制偏移量。<br>而<code>redis 4.0</code>之后，所有的从服务器都会从主服务器接收完全相同的复制量，但是由每队主从之间的网络不一定相同，所以需要从服务器自身维护其当前的复制偏移量。那么问题来了，如何保障下一次同步呢？<br>这里从节点之间的不一致会影响集群同步状态，主节点向从节点发送主从差别状态时就会变得繁琐。</p><h4 id="复制积压缓冲区"><a href="#复制积压缓冲区" class="headerlink" title="复制积压缓冲区"></a>复制积压缓冲区</h4><p>复制积压缓冲区是由主服务器维护的一个<code>固定长度的FIFO</code>队列，默认大小为<code>1MB</code>。<br>当主服务器进行命令传播时，不仅仅会将写命令发送给从服务器，还会讲命令写入到复制积压缓冲区中。复制积压缓冲区会记录每个字节记记录相对应的复制偏移量。</p><p>如果主从断联一段时间后，从服务器重新连上主服务器，则从服务器会通过<code>PSYNC</code>命令将自己的复制偏移量发送给主服务器，主服务器根据从服务器的复制偏移量决定接下来该如何同步。</p><ol><li>如果offset偏移量之后的数据依然存在于复制积压缓冲区中，那么主服务器将对从服务器执行部分重同步操作，即主服务器向从节点发送断联期间执行的命令。 <code>CONTINUE</code></li><li>如果offset之后逇数据不存在复制积压缓冲区中，则主服务器对当前的从服务器执行完整的重同步操作。</li></ol><h5 id="复制积压缓冲区大小？"><a href="#复制积压缓冲区大小？" class="headerlink" title="复制积压缓冲区大小？"></a>复制积压缓冲区大小？</h5><p>默认为<code>1MB</code>，如果主服务器需要执行大量写命令或者主从断联时间较长，则可能需要考虑设置合理的复制积压缓冲区大小。<br>有这样的计算公式： <code>second * write_size_per_second</code><br>即对每秒写入数据量和主从断联恢复时长有一定的预估。<br>为了安全期间，还需要将复制积压缓冲区的大小进行<code>double</code>处理。</p><h5 id="复制积压缓冲区实现"><a href="#复制积压缓冲区实现" class="headerlink" title="复制积压缓冲区实现"></a>复制积压缓冲区实现</h5><p>复制积压缓冲区由一个环形队列实现。的相关定义包含两部分:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replBacklog *repl_backlog;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> repl_backlog_size;</span><br></pre></td></tr></table></figure><ol><li><code>repl_backlog_size</code>： 指定复制积压缓冲区的大小；</li><li><code>replBacklog *repl_backlog</code>: 所有从服务器共享的复制积压缓冲区。</li></ol><h4 id="服务器运行ID"><a href="#服务器运行ID" class="headerlink" title="服务器运行ID"></a>服务器运行ID</h4><p>实现部分重同步的过程需要用到服务器运行ID</p><ul><li>每个服务器(主从)都有自己的运行ID</li><li>运行ID在服务器启动时生成，由40位随机十六进制的字符串组成。</li></ul><p>主从服务器初次进行同步时，主服务器将自身的运行ID传递给从服务器，从服务器将其保存至<br><code>master_replid</code>中，同时保存初次同步的<code>offset</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主服务器配置</span><br><span class="line"><span class="type">char</span> replid[CONFIG_RUN_ID_SIZE+<span class="number">1</span>];  <span class="comment">/* My current replication ID. */</span></span><br><span class="line"><span class="type">char</span> replid2[CONFIG_RUN_ID_SIZE+<span class="number">1</span>]; <span class="comment">/* replid inherited from master*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从服务器配置</span><br><span class="line"><span class="type">char</span> master_replid[CONFIG_RUN_ID_SIZE+<span class="number">1</span>];  <span class="comment">/* Master PSYNC runid. */</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> master_initial_offset;           <span class="comment">/* Master PSYNC offset. */</span></span><br></pre></td></tr></table></figure><p>主从重连时，从服务器向当前连接的主服务器发送之前保存的运行ID，如果匹配且offset任保存在主服务器的复制积压缓冲区中，则执行部分重同步。若不再则执行完整重同步；否则执行完整重同步操作。</p><h3 id="PSYNC实现"><a href="#PSYNC实现" class="headerlink" title="PSYNC实现"></a>PSYNC实现</h3><h4 id="PSYNC的调用方式"><a href="#PSYNC的调用方式" class="headerlink" title="PSYNC的调用方式"></a>PSYNC的调用方式</h4><ol><li>从服务器未复制过任何主服务器，或者执行过<code>slave no one</code>，则从服务器再执行第一次复制时将向主服务器发送<code>PSYNC ? -1</code>，主动向主服务器请求完整重同步。</li><li>已复制过，则开始新的复制时向主服务器发送<code>PSYNC &lt;runid&gt; &lt;offset&gt;</code>， 主服务器判断进行何种操作。</li></ol><p>主服务器有三种响应：</p><ol><li>返回<code>+FULLSYNC &lt;runid&gt; &lt;offset&gt;</code> 回复，则表示主从服务器之间将进行完整重同步过程；</li><li>返回<code>+CONTINUE</code>，则主从服务器之间将执行部分重同步操作，从服务器将等待主服务器发送复制积压缓冲区中堆积的写命令，接收后执行即可。</li><li>返回<code>-ERR</code>，则表示主服务器版本低于<code>redis 2.8</code>无法识别<code>PSYNC</code>命令。从服务器将向主服务器发送<code>SYNC</code>命令，执行完整同步过程。</li></ol><h4 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h4><img src="/2023/08/07/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/master_slave_1_copy.webp"><img src="/2023/08/07/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/master-_slave_second_copy.webp"><h4 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h4><p>心跳检测是指，在命令传播阶段，从服务器会以默认每秒一次的频率向服务器发送命令：<br><code>replconf ack &lt;replication_offset&gt;</code>， <code>replication_offset</code>是从服务器当前的复制偏移量。<br>上述命令包含三个作用：</p><ol><li>检测主从服务器之间的网络连接状态。</li><li>辅助实现<code>min-slaves</code>选项。</li><li>检测命令丢失。</li></ol><h5 id="检测主从网络连接状态"><a href="#检测主从网络连接状态" class="headerlink" title="检测主从网络连接状态"></a>检测主从网络连接状态</h5><p>如果主服务器超过一秒钟未收到从服务器发来的<code>replconf ack</code>命令，那么服务器则知道两者的网络连接出问题了。<br>在主服务器上执行<code>info replication</code>命令，tag栏能反映出当前从服务器最后一次向主服务器发送<code>replconf ack</code>距此时过了多久：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">182.168.106.129:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:637b9e49e28c5c17d2a4d43abd7cea4434cc91ae</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p>注意上述返回中从节点数为0是因为本人所使用的redis的模式为集群模式。在后续内容中将补充redis的架构模式。</p><h5 id="辅助实现min-slaves选项"><a href="#辅助实现min-slaves选项" class="headerlink" title="辅助实现min-slaves选项"></a>辅助实现<code>min-slaves</code>选项</h5><p>redis中如下两个配置可以防止主服务器在不安全的情况下执行写命令。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-slaves-to-write <span class="number">3</span></span><br><span class="line">min-slaves-max-lag <span class="number">10</span></span><br></pre></td></tr></table></figure><p>分别对应<code>server</code>中的配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> repl_min_slaves_to_write;   <span class="comment">/* Min number of slaves to write. */</span></span><br><span class="line">   <span class="type">int</span> repl_min_slaves_max_lag;</span><br></pre></td></tr></table></figure><p>其含义为：在从服务器少于3个或者三个从服务器的延迟大于等于10秒时，主服务器将拒绝少执行命令。</p><h5 id="检测命令丢失"><a href="#检测命令丢失" class="headerlink" title="检测命令丢失"></a>检测命令丢失</h5><p>如果因为网络故障，主服务器传播给从服务器的写命令半路丢失，那么当从服务器向主服务器发送<code>replconf ack</code>时，主服务器将识别到主从之间的复制偏移量存在差异，而后主服务器就根据从服务器提交的偏移量，在复制积压缓冲区中找到从服务器缺少的数据，讲这些数据重新发给从服务器。</p><p>乍看起来，这个过程和部分重同步非常相似，但是两者还是有些差异：<br>补发缺失数据操作在主从服务器之间没有断线时执行；而部分重同步发生在断线重连之后。</p><p>注意到 <code>redis 2.8</code>之前没有<code>replconf ack</code>和 <code>复制积压缓冲区</code>，即使命令在传播过程中丢失，主从都不会意识到,主服务器也不会向从服务器补发丢失的数据。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="无盘复制是什么？"><a href="#无盘复制是什么？" class="headerlink" title="无盘复制是什么？"></a>无盘复制是什么？</h4><p><code>redis</code>默认是磁盘复制，但是如果使用低速磁盘，复制操作会给主服务器带来较大压力。所以<code>redis 2.8.18</code>后开始支持<code>无盘复制</code>。在这种模式下，子进程直接将<code>rdb</code>文件通过网络发送给从服务器，不适用磁盘作为中间存储。</p><h4 id="redis主从复制过程为什么选择rdb，而非aof"><a href="#redis主从复制过程为什么选择rdb，而非aof" class="headerlink" title="redis主从复制过程为什么选择rdb，而非aof"></a>redis主从复制过程为什么选择rdb，而非aof</h4><ul><li><code>rdb</code>文件内容是经过压缩的二进制数据，同时<code>redis</code>针对不同的数据类型做了针对性优化，文件较小。而<code>aof</code>文件记录的是每一次写操作的命令，写操作越多文件越大，而且包含对重复key的冗余操作。在主从全量同步时，传输<code>rdb</code>文件可以降低对主从服务器的网络带宽开销。从库在加载<code>RDB</code>文件时，文件小，读取快。同时从库按照rdb协议解析还原数据即可。而<code>aof</code>需要依次重放每个写命令，恢复速度比<code>rdb</code>慢很多。</li><li>假设使用<code>AOF</code>做全量复制，则服务器必须打开<code>aof</code>功能，必须选择文件刷盘的策略，选择不当会严重影响<code>redis</code>性能。而<code>RDB</code>只有在需要定时备份和主从全量复制时才会触发，生成快照。在很多丢失数据不敏感的业务场景，其实是不需要开启<code>AOF</code>的。</li></ul><h4 id="如何理解主-从-从模式"><a href="#如何理解主-从-从模式" class="headerlink" title="如何理解主-从-从模式"></a>如何理解主-从-从模式</h4><p>如果是主从模式，一主多从的情况下，如果多个从服务器向主服务器请求全量复制，在主库中需要完成多次<code>fork</code>子进程生成<code>RDB</code>文件，进行全量复制，fork操作会阻塞主线程处理正常请求。另外传输<code>RDB</code>文件也会占用主库网络带宽。<br>可以通过主-从-从模式建立多级主从模式，以缓解顶级主服务器的压力。<br><img src="/2023/08/07/redis%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/master_slave_slave.jpg">  </p><h4 id="如何理解redis的高可用"><a href="#如何理解redis的高可用" class="headerlink" title="如何理解redis的高可用"></a>如何理解redis的高可用</h4><ol><li>数据不能丢失或尽量减少丢失。</li><li>redis服务不中断。<br>相对应的，第一点由<code>持久化机制aof和rdb</code>保障；第二点则要求<code>redis</code>不能单点部署。</li></ol><h4 id="主从不一致的原因？"><a href="#主从不一致的原因？" class="headerlink" title="主从不一致的原因？"></a>主从不一致的原因？</h4><ol><li>主从网络时延大&#x2F;断联</li><li>从库收到主库发来的命令，但从库正在执行阻塞式命令，如<code>hgetall</code>。</li></ol><h3 id="redis-主从模式如何选主？"><a href="#redis-主从模式如何选主？" class="headerlink" title="redis 主从模式如何选主？"></a>redis 主从模式如何选主？</h3><p>在主从模式中，主节点故障后，需要人工干预将从节点设置为主节点，同时还需要通知应用方更新主节点地址。故而有了另一种架构模式：<code>哨兵模式</code></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-copy.html">1. redis复制</a><br><a href="https://www.cnblogs.com/better-farther-world2099/articles/16159844.html">2. 详解Redis 主从复制原理</a><br><a href="https://www.51cto.com/article/640170.html">3. </a><br><a href="https://blog.csdn.net/John_Like_Girl/article/details/107161725">4. Redis主从模式的优缺点</a><br><a href="https://www.ruanyifeng.com/blog/2018/07/cap.html">5. CAP 定理的含义</a><br><a href="https://time.geekbang.org/column/article/272852">6. 极客时间：主从库如何实现数据一致</a><br><a href="https://z.itpub.net/article/detail/61F53FE9A1487984804DB48AAB9EF262">7. redis主从</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主从模式&quot;&gt;&lt;a href=&quot;#主从模式&quot; class=&quot;headerlink&quot; title=&quot;主从模式&quot;&gt;&lt;/a&gt;主从模式&lt;/h2&gt;&lt;p&gt;主从结构是常用的计算机系统架构，通常被用于分布式系统中，其中一个节点&lt;code&gt;master&lt;/code&gt;拥有最新的数据，其</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis之客户端</title>
    <link href="https://mqrayblog.cn/2023/08/05/redis%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>https://mqrayblog.cn/2023/08/05/redis%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2023-08-05T10:13:32.000Z</published>
    <updated>2023-09-05T10:54:35.856Z</updated>
    
    <content type="html"><![CDATA[<p><code>redis</code>服务器是典型的一对多服务器程序，一个服务器可以和多个客户端建立网络请求，每个客户端可以向服务器发送命令请求，服务器接收并处理客户端发送的命令请求，并向客户端返回命令回复。<br>通过使用由<code>IO多路复用技术</code>实现的文件事件处理器，<code>redis</code>服务器使用单线程单进程的方式处理命令请求，并与多个客户端进行网络通信。6.0之后，IO多路复用处使用多线程实现。<br>与服务器建立连接的客户端将以链表的形式被保存在<code>redisServer</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="built_in">list</span> *clients;  <span class="comment">// 链表保存各客户端状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端属性"><a href="#客户端属性" class="headerlink" title="客户端属性"></a>客户端属性</h3><p>客户端状态包含的属性可以分为两类：</p><ol><li>比较通用的属性，无论客户端执行什么工作，都需要使用这些属性</li><li>和特定功能相关的属性，比如操作数据库时需要用到的<code>db</code>属性和<code>dictid</code>属性，执行时需要用到<code>mstate</code>属性等。</li></ol><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">     <span class="type">uint64_t</span> id; <span class="comment">// 自增客户端唯一id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">     <span class="type">uint64_t</span> flags; <span class="comment">// 客户端标志位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flags</code>占8个字节，该属性记录了客户端角色以及当前所处的状态，标志值比较多，详见：<a href="https://github.com/redis/redis/blob/1b6bdff48dcc333affab02b945821eb865529de2/src/server.h">server.h</a><br>主从服务器进行复制时，主服务器会成为从服务器的客户端；从服务器也会成为主服务器的客户端</p><ol><li>CLIENT_SLAVE (1&lt;&lt;0)  0000 0001，客户端代表的是一个从服务器。</li><li>CLIENT_MASTER (1&lt;&lt;1) 0000 0010, 客户端代表的是一个主服务器。</li><li>CLIENT_MONITOR (1&lt;&lt;2)  0000 0100，客户端正在执行<code>monitor</code>命令</li><li>CLIENT_MULTI (1&lt;&lt;3) 0000 1000， 客户端正在执行事务。</li><li>CLIENT_BLOCKED (1&lt;&lt;4) 0001 0000，客户端正在被<code>BRPOP/BLPOP</code>等命令阻塞。</li><li>CLIENT_SCRIPT (1&lt;&lt;8)，标识这个客户端是专门用于执行lua脚本的客户端，并没有真正的网络连接。</li><li>CLIENT_UNIX_SOCKET (1&lt;&lt;11) ，标识该客户端通过unix域套接字进行连接。</li><li>CLIENT_FORCE_AOF (1&lt;&lt;14)， 标识该客户端，正在执行<code>aof</code>操作。</li><li>CLIENT_READONLY (1&lt;&lt;17)， 标识客户端当前处于只读状态。</li><li>CLIENT_PUBSUB (1&lt;&lt;18)，标识客户端正处于发布订阅模式下。</li></ol><h4 id="连接信息"><a href="#连接信息" class="headerlink" title="连接信息"></a>连接信息</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    connection *conn; <span class="comment">// 保存此客户端的连接信息</span></span><br><span class="line">    user *user;       <span class="comment">// 与当前连接绑定的用户</span></span><br><span class="line">    <span class="type">int</span> authenticated; <span class="comment">// 默认用户是否需要身份认证</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>authenticated=0</code>表示无需认证，<code>authenticated=1</code>则需要认证。</p><h4 id="RESP-协议版本"><a href="#RESP-协议版本" class="headerlink" title="RESP 协议版本"></a>RESP 协议版本</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">     <span class="type">int</span> resp; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即RESP协议版本，基于TCP的应用层协议 RESP(REdis Serialization Protocol)。</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">     redisDb *db; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端当前指向的数据库指针。</p><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    robj *name; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此客户端的名称，默认为空。可以通过<code>client list</code>命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; client list</span><br><span class="line">id=764370 addr=182.168.106.129:34520 laddr=182.168.168.226:6379 fd=27 name= age=932860 idle=932860 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 argv-mem=0 obl=0 oll=0 omem=0 tot-mem=20504 events=r cmd=hgetall user=default redir=-1</span><br></pre></td></tr></table></figure><h4 id="输入缓冲区"><a href="#输入缓冲区" class="headerlink" title="输入缓冲区"></a>输入缓冲区</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    sds querybuf;  <span class="comment">// 输入缓冲区</span></span><br><span class="line">    <span class="type">size_t</span> qb_pos; <span class="comment">// 用以标识输入缓冲区中已读位置</span></span><br><span class="line">    <span class="type">size_t</span> querybuf_peak; <span class="comment">// 最近100ms+输入缓冲区的峰值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端输入缓冲区用于保存客户端发送的命令请求。输入缓冲区大小会根据输入内容动态的缩小或者扩大，但最多不能超过1G，否则服务器将关闭此客户端。</p><h4 id="输出缓冲区"><a href="#输出缓冲区" class="headerlink" title="输出缓冲区"></a>输出缓冲区</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    <span class="type">time_t</span> obuf_soft_limit_reached_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>缓冲区大小由一个链表和任意多个字符串对象组成，但是为了避免客户端回复过大，占用过多的服务器资源，服务器会检查客户端的输出缓冲区大小，并在缓冲区大小超限时，执行相应的操作。服务器使用两种模式来限制客户端输出缓冲区的大小：</p><ol><li>硬性限制: 如果输出缓冲区的大小超过了硬性限制所设置的大小，那么服务器立即关闭客户端；</li><li>软性限制: 如果输出缓冲区大小超过软性限制所设置的大小，但是没超过硬性限制，则服务器使用客户端结构体中<code>obuf_soft_limit_reached_time</code>属性记录客户端到达软性限制的起始时间，而后继续监视客户端，如果输出缓冲区大小一直超出软性限制，且持续时长超过服务器中设定的时长，则服务器关闭客户端。<br>使用<code>client-output-buffer-limit</code>可以为普通客户端、从服务器客户端、执行发布订阅功能的客户端分别设置不同的软性限制和硬性限制：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client-output-buffer-limit &lt;<span class="class"><span class="keyword">class</span>&gt;</span> &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span><br><span class="line">client-output-buffer-limit normal <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="comment">// 将普通客户端的软性限制和硬性限制都设置为0，即不限制客户端输出缓冲区大小</span></span><br><span class="line">client-output-buffer-limit replica <span class="number">256</span>mb <span class="number">64</span>mb <span class="number">60</span> <span class="comment">// 将从服务器客户端的硬性限制为256m，软性限制为64m，软性限制时长为60s</span></span><br><span class="line">client-output-buffer-limit pubsub <span class="number">32</span>mb <span class="number">8</span>mb <span class="number">60</span> <span class="comment">// 将执行发布订阅功能客户端的硬性限制为32m, 软性限制为8m，软性限制时长为60s</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="命令与命令参数"><a href="#命令与命令参数" class="headerlink" title="命令与命令参数"></a>命令与命令参数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> argc;               <span class="comment">// 当前命令的参数个数</span></span><br><span class="line">    robj **argv;            <span class="comment">// 当前命令 的参数</span></span><br><span class="line">    <span class="type">int</span> argv_len;           <span class="comment">// argv数组的长度，可能会大于argc</span></span><br><span class="line">    <span class="type">int</span> original_argc;      <span class="comment">// 在命令被重写时，记录命令原始参数个数</span></span><br><span class="line">    robj **original_argv;   <span class="comment">// 命令重写前，原始的参数</span></span><br><span class="line">    <span class="type">size_t</span> argv_len_sum;    <span class="comment">// 命令参数长度之和</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">cmd</span>, *<span class="title">lastcmd</span>;</span>  <span class="comment">// 上次执行的命令</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">realcmd</span>;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，<code>lastcmd</code>使用<code>redisCommand</code>记录了上次执行的命令，<code>redisCommand</code>的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> &#123;</span></span><br><span class="line">    <span class="comment">// 声明类数据</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *declared_name; <span class="comment">// 标识命令名，之所以定义为指针是为了兼容原生命令和sds命令</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *summary; <span class="comment">// 命令概要，可选</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *complexity; <span class="comment">// 复杂度描述， 可选</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *since; <span class="comment">// 命令的首次发布版本，可选</span></span><br><span class="line">    <span class="type">int</span> doc_flags; <span class="comment">/* Flags for documentation (see CMD_DOC_*). */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *replaced_by; <span class="comment">// 如果命令被废弃，则填写其继任者</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *deprecated_since; <span class="comment">// 命令何时被废弃</span></span><br><span class="line">    redisCommandGroup group; <span class="comment">// 命令组</span></span><br><span class="line">    commandHistory *history; <span class="comment">// 命令历史</span></span><br><span class="line">    <span class="type">int</span> num_history;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> **tips; <span class="comment">/* An array of strings that are meant to be tips for clients/proxies regarding this command */</span></span><br><span class="line">    <span class="type">int</span> num_tips;</span><br><span class="line">    redisCommandProc *proc; <span class="comment">// 命令实现</span></span><br><span class="line">    <span class="type">int</span> arity; <span class="comment">// 参数个数</span></span><br><span class="line">    <span class="type">uint64_t</span> flags; <span class="comment">/* Command flags, see CMD_*. */</span></span><br><span class="line">    <span class="type">uint64_t</span> acl_categories; <span class="comment">// ACL分类</span></span><br><span class="line">    keySpec *key_specs;</span><br><span class="line">    <span class="type">int</span> key_specs_num;</span><br><span class="line">    <span class="comment">/* Use a function to determine keys arguments in a command line.</span></span><br><span class="line"><span class="comment">     * Used for Redis Cluster redirect (may be NULL) */</span></span><br><span class="line">    redisGetKeysProc *getkeys_proc; <span class="comment">// 使用函数确定命令行中的键参数</span></span><br><span class="line">    <span class="type">int</span> num_args; <span class="comment">// 命令参数数组长度</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">subcommands</span>;</span> <span class="comment">// 子命令数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommandArg</span> *<span class="title">args</span>;</span> <span class="comment">// 命令参数数组</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOG_REQ_RES</span></span><br><span class="line">    <span class="comment">/* Reply schema */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">jsonObject</span> *<span class="title">reply_schema</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行时填充的数据</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> microseconds, calls, rejected_calls, failed_calls;</span><br><span class="line">    <span class="type">int</span> id;   <span class="comment">// 命令id，从0开始，在运行时分配，用于acl检查；如果当前连接的用户具有此命令位，则此连接能执行给定的命令。[位图]</span></span><br><span class="line">    sds fullname; <span class="comment">// sds描述的命令全名</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hdr_histogram</span>* <span class="title">latency_histogram</span>;</span> <span class="comment">/*points to the command latency command histogram (unit of time nanosecond) */</span></span><br><span class="line">    keySpec legacy_range_key_spec; <span class="comment">/* The legacy (first,last,step) key spec is</span></span><br><span class="line"><span class="comment">                                     * still maintained (if applicable) so that</span></span><br><span class="line"><span class="comment">                                     * we can still support the reply format of</span></span><br><span class="line"><span class="comment">                                     * COMMAND INFO and COMMAND GETKEYS */</span></span><br><span class="line">    dict *subcommands_dict; <span class="comment">// 保留子命令的字典，键是子命令的sds名称(非全名)，值为redisCommand的指针。</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">parent</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RedisModuleCommand</span> *<span class="title">module_cmd</span>;</span> <span class="comment">/* A pointer to the module command data (NULL if native command) */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中<code>redisCommandTable</code>的实现使用python实现的，详见<a href="https://github.com/redis/redis/blob/1b6bdff48dcc333affab02b945821eb865529de2/utils/generate-command-code.py#L613">redisCommand初始化</a><br>另外这个链接可以方便查看<code>redis</code>提供的命令的复杂度: <a href="https://github.com/redis/redis/tree/1b6bdff48dcc333affab02b945821eb865529de2/src/commands">commands</a></p><h4 id="时间参数"><a href="#时间参数" class="headerlink" title="时间参数"></a>时间参数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    <span class="type">time_t</span> ctime;           <span class="comment">// 客户端创建时间</span></span><br><span class="line">    <span class="type">long</span> duration;          <span class="comment">// 当前命令的执行时间</span></span><br><span class="line">    <span class="type">time_t</span> lastinteraction; <span class="comment">// 上次交互时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="client结构体详情"><a href="#client结构体详情" class="headerlink" title="client结构体详情"></a>client结构体详情</h4><p>redis客户端的结构体定义在<code>redis.h/client</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> id;            <span class="comment">/* Client incremental unique ID. */</span></span><br><span class="line">    <span class="type">uint64_t</span> flags;         <span class="comment">/* Client flags: CLIENT_* macros. */</span></span><br><span class="line">    connection *conn;</span><br><span class="line">    <span class="type">int</span> resp;               <span class="comment">/* RESP protocol version. Can be 2 or 3. */</span></span><br><span class="line">    redisDb *db;            <span class="comment">/* Pointer to currently SELECTed DB. */</span></span><br><span class="line">    robj *name;             <span class="comment">/* As set by CLIENT SETNAME. */</span></span><br><span class="line">    robj *lib_name;         <span class="comment">/* The client library name as set by CLIENT SETINFO. */</span></span><br><span class="line">    robj *lib_ver;          <span class="comment">/* The client library version as set by CLIENT SETINFO. */</span></span><br><span class="line">    sds querybuf;           <span class="comment">/* Buffer we use to accumulate client queries. */</span></span><br><span class="line">    <span class="type">size_t</span> qb_pos;          <span class="comment">/* The position we have read in querybuf. */</span></span><br><span class="line">    <span class="type">size_t</span> querybuf_peak;   <span class="comment">/* Recent (100ms or more) peak of querybuf size. */</span></span><br><span class="line">    <span class="type">int</span> argc;               <span class="comment">/* Num of arguments of current command. */</span></span><br><span class="line">    robj **argv;            <span class="comment">/* Arguments of current command. */</span></span><br><span class="line">    <span class="type">int</span> argv_len;           <span class="comment">/* Size of argv array (may be more than argc) */</span></span><br><span class="line">    <span class="type">int</span> original_argc;      <span class="comment">/* Num of arguments of original command if arguments were rewritten. */</span></span><br><span class="line">    robj **original_argv;   <span class="comment">/* Arguments of original command if arguments were rewritten. */</span></span><br><span class="line">    <span class="type">size_t</span> argv_len_sum;    <span class="comment">/* Sum of lengths of objects in argv list. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">cmd</span>, *<span class="title">lastcmd</span>;</span>  <span class="comment">/* Last command executed. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">realcmd</span>;</span> <span class="comment">/* The original command that was executed by the client,</span></span><br><span class="line"><span class="comment">                                     Used to update error stats in case the c-&gt;cmd was modified</span></span><br><span class="line"><span class="comment">                                     during the command invocation (like on GEOADD for example). */</span></span><br><span class="line">    user *user;             <span class="comment">/* User associated with this connection. If the</span></span><br><span class="line"><span class="comment">                               user is set to NULL the connection can do</span></span><br><span class="line"><span class="comment">                               anything (admin). */</span></span><br><span class="line">    <span class="type">int</span> reqtype;            <span class="comment">/* Request protocol type: PROTO_REQ_* */</span></span><br><span class="line">    <span class="type">int</span> multibulklen;       <span class="comment">/* Number of multi bulk arguments left to read. */</span></span><br><span class="line">    <span class="type">long</span> bulklen;           <span class="comment">/* Length of bulk argument in multi bulk request. */</span></span><br><span class="line">    <span class="built_in">list</span> *reply;            <span class="comment">/* List of reply objects to send to the client. */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> reply_bytes; <span class="comment">/* Tot bytes of objects in reply list. */</span></span><br><span class="line">    <span class="built_in">list</span> *deferred_reply_errors;    <span class="comment">/* Used for module thread safe contexts. */</span></span><br><span class="line">    <span class="type">size_t</span> sentlen;         <span class="comment">/* Amount of bytes already sent in the current</span></span><br><span class="line"><span class="comment">                               buffer or object being sent. */</span></span><br><span class="line">    <span class="type">time_t</span> ctime;           <span class="comment">/* Client creation time. */</span></span><br><span class="line">    <span class="type">long</span> duration;          <span class="comment">/* Current command duration. Used for measuring latency of blocking/non-blocking cmds */</span></span><br><span class="line">    <span class="type">int</span> slot;               <span class="comment">/* The slot the client is executing against. Set to -1 if no slot is being used */</span></span><br><span class="line">    dictEntry *cur_script;  <span class="comment">/* Cached pointer to the dictEntry of the script being executed. */</span></span><br><span class="line">    <span class="type">time_t</span> lastinteraction; <span class="comment">/* Time of the last interaction, used for timeout */</span></span><br><span class="line">    <span class="type">time_t</span> obuf_soft_limit_reached_time;</span><br><span class="line">    <span class="type">int</span> authenticated;      <span class="comment">/* Needed when the default user requires auth. */</span></span><br><span class="line">    <span class="type">int</span> replstate;          <span class="comment">/* Replication state if this is a slave. */</span></span><br><span class="line">    <span class="type">int</span> repl_start_cmd_stream_on_ack; <span class="comment">/* Install slave write handler on first ACK. */</span></span><br><span class="line">    <span class="type">int</span> repldbfd;           <span class="comment">/* Replication DB file descriptor. */</span></span><br><span class="line">    <span class="type">off_t</span> repldboff;        <span class="comment">/* Replication DB file offset. */</span></span><br><span class="line">    <span class="type">off_t</span> repldbsize;       <span class="comment">/* Replication DB file size. */</span></span><br><span class="line">    sds replpreamble;       <span class="comment">/* Replication DB preamble. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> read_reploff; <span class="comment">/* Read replication offset if this is a master. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> reploff;      <span class="comment">/* Applied replication offset if this is a master. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_applied; <span class="comment">/* Applied replication data count in querybuf, if this is a replica. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_ack_off; <span class="comment">/* Replication ack offset, if this is a slave. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_aof_off; <span class="comment">/* Replication AOF fsync ack offset, if this is a slave. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_ack_time;<span class="comment">/* Replication ack time, if this is a slave. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_last_partial_write; <span class="comment">/* The last time the server did a partial write from the RDB child pipe to this replica  */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> psync_initial_offset; <span class="comment">/* FULLRESYNC reply offset other slaves</span></span><br><span class="line"><span class="comment">                                       copying this slave output buffer</span></span><br><span class="line"><span class="comment">                                       should use. */</span></span><br><span class="line">    <span class="type">char</span> replid[CONFIG_RUN_ID_SIZE+<span class="number">1</span>]; <span class="comment">/* Master replication ID (if master). */</span></span><br><span class="line">    <span class="type">int</span> slave_listening_port; <span class="comment">/* As configured with: REPLCONF listening-port */</span></span><br><span class="line">    <span class="type">char</span> *slave_addr;       <span class="comment">/* Optionally given by REPLCONF ip-address */</span></span><br><span class="line">    <span class="type">int</span> slave_capa;         <span class="comment">/* Slave capabilities: SLAVE_CAPA_* bitwise OR. */</span></span><br><span class="line">    <span class="type">int</span> slave_req;          <span class="comment">/* Slave requirements: SLAVE_REQ_* */</span></span><br><span class="line">    multiState mstate;      <span class="comment">/* MULTI/EXEC state */</span></span><br><span class="line">    blockingState bstate;     <span class="comment">/* blocking state */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> woff;         <span class="comment">/* Last write global replication offset. */</span></span><br><span class="line">    <span class="built_in">list</span> *watched_keys;     <span class="comment">/* Keys WATCHED for MULTI/EXEC CAS */</span></span><br><span class="line">    dict *pubsub_channels;  <span class="comment">/* channels a client is interested in (SUBSCRIBE) */</span></span><br><span class="line">    dict *pubsub_patterns;  <span class="comment">/* patterns a client is interested in (PSUBSCRIBE) */</span></span><br><span class="line">    dict *pubsubshard_channels;  <span class="comment">/* shard level channels a client is interested in (SSUBSCRIBE) */</span></span><br><span class="line">    sds peerid;             <span class="comment">/* Cached peer ID. */</span></span><br><span class="line">    sds sockname;           <span class="comment">/* Cached connection target address. */</span></span><br><span class="line">    listNode *client_list_node; <span class="comment">/* list node in client list */</span></span><br><span class="line">    listNode *postponed_list_node; <span class="comment">/* list node within the postponed list */</span></span><br><span class="line">    listNode *pending_read_list_node; <span class="comment">/* list node in clients pending read list */</span></span><br><span class="line">    <span class="type">void</span> *module_blocked_client; <span class="comment">/* Pointer to the RedisModuleBlockedClient associated with this</span></span><br><span class="line"><span class="comment">                                  * client. This is set in case of module authentication before the</span></span><br><span class="line"><span class="comment">                                  * unblocked client is reprocessed to handle reply callbacks. */</span></span><br><span class="line">    <span class="type">void</span> *module_auth_ctx; <span class="comment">/* Ongoing / attempted module based auth callback&#x27;s ctx.</span></span><br><span class="line"><span class="comment">                            * This is only tracked within the context of the command attempting</span></span><br><span class="line"><span class="comment">                            * authentication. If not NULL, it means module auth is in progress. */</span></span><br><span class="line">    RedisModuleUserChangedFunc auth_callback; <span class="comment">/* Module callback to execute</span></span><br><span class="line"><span class="comment">                                               * when the authenticated user</span></span><br><span class="line"><span class="comment">                                               * changes. */</span></span><br><span class="line">    <span class="type">void</span> *auth_callback_privdata; <span class="comment">/* Private data that is passed when the auth</span></span><br><span class="line"><span class="comment">                                   * changed callback is executed. Opaque for</span></span><br><span class="line"><span class="comment">                                   * Redis Core. */</span></span><br><span class="line">    <span class="type">void</span> *auth_module;      <span class="comment">/* The module that owns the callback, which is used</span></span><br><span class="line"><span class="comment">                             * to disconnect the client if the module is</span></span><br><span class="line"><span class="comment">                             * unloaded for cleanup. Opaque for Redis Core.*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If this client is in tracking mode and this field is non zero,</span></span><br><span class="line"><span class="comment">     * invalidation messages for keys fetched by this client will be sent to</span></span><br><span class="line"><span class="comment">     * the specified client ID. */</span></span><br><span class="line">    <span class="type">uint64_t</span> client_tracking_redirection;</span><br><span class="line">    rax *client_tracking_prefixes; <span class="comment">/* A dictionary of prefixes we are already</span></span><br><span class="line"><span class="comment">                                      subscribed to in BCAST mode, in the</span></span><br><span class="line"><span class="comment">                                      context of client side caching. */</span></span><br><span class="line">    <span class="comment">/* In updateClientMemoryUsage() we track the memory usage of</span></span><br><span class="line"><span class="comment">     * each client and add it to the sum of all the clients of a given type,</span></span><br><span class="line"><span class="comment">     * however we need to remember what was the old contribution of each</span></span><br><span class="line"><span class="comment">     * client, and in which category the client was, in order to remove it</span></span><br><span class="line"><span class="comment">     * before adding it the new value. */</span></span><br><span class="line">    <span class="type">size_t</span> last_memory_usage;</span><br><span class="line">    <span class="type">int</span> last_memory_type;</span><br><span class="line"></span><br><span class="line">    listNode *mem_usage_bucket_node;</span><br><span class="line">    clientMemUsageBucket *mem_usage_bucket;</span><br><span class="line"></span><br><span class="line">    listNode *ref_repl_buf_node; <span class="comment">/* Referenced node of replication buffer blocks,</span></span><br><span class="line"><span class="comment">                                  * see the definition of replBufBlock. */</span></span><br><span class="line">    <span class="type">size_t</span> ref_block_pos;        <span class="comment">/* Access position of referenced buffer block,</span></span><br><span class="line"><span class="comment">                                  * i.e. the next offset to send. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* list node in clients_pending_write list */</span></span><br><span class="line">    listNode clients_pending_write_node;</span><br><span class="line">    <span class="comment">/* Response buffer */</span></span><br><span class="line">    <span class="type">size_t</span> buf_peak; <span class="comment">/* Peak used size of buffer in last 5 sec interval. */</span></span><br><span class="line">    <span class="type">mstime_t</span> buf_peak_last_reset_time; <span class="comment">/* keeps the last time the buffer peak value was reset */</span></span><br><span class="line">    <span class="type">int</span> bufpos;</span><br><span class="line">    <span class="type">size_t</span> buf_usable_size; <span class="comment">/* Usable size of buffer. */</span></span><br><span class="line">    <span class="type">char</span> *buf;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOG_REQ_RES</span></span><br><span class="line">    clientReqResInfo reqres;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125; client;</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://github.com/redis/redis/blob/1b6bdff48dcc333affab02b945821eb865529de2/src/server.h">1. server.h</a><br><a href="https://zhuanlan.zhihu.com/p/607693207">2. Redis 源码剖析 3 – redisCommand</a><br><a href="https://github.com/redis/redis/blob/1b6bdff48dcc333affab02b945821eb865529de2/utils/generate-command-code.py#L613">3. redisCommand初始化</a><br><a href="https://github.com/redis/redis/tree/1b6bdff48dcc333affab02b945821eb865529de2/src/commands">4. commands</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;服务器是典型的一对多服务器程序，一个服务器可以和多个客户端建立网络请求，每个客户端可以向服务器发送命令请求，服务器接收并处理客户端发送的命令请求，并向客户端返回命令回复。&lt;br&gt;通过使用由&lt;code&gt;IO多路复用技术&lt;/code&gt;实现的文</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis之事件驱动</title>
    <link href="https://mqrayblog.cn/2023/07/31/redis%E4%B9%8B%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/"/>
    <id>https://mqrayblog.cn/2023/07/31/redis%E4%B9%8B%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/</id>
    <published>2023-07-31T04:54:32.000Z</published>
    <updated>2023-09-05T10:55:39.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p><code>redis</code>服务器是一个事件驱动程序，服务器需要处理两类事件：</p><ol><li>文件事件处理器：redis基于<code>reactor</code>模式开发的网络事件处理器。</li><li>事件事件处理器： 比如<code>serverCron</code>函数，需要在给定的时间点执行。</li></ol><p>文件事件处理器使用<code>io多路复用</code>来同时监听多个套接字，并根据套接字目前执行的任务为套接字关联不同的事件处理器。<br>当被监听的套接字准备好执行连接应答、读取、写入、关闭等操作时，与之操作相对应的文件事件就会产生，这些文件事件就会调用套接字关联的事件处理器处理这些事件。</p><h3 id="事件处理流程"><a href="#事件处理流程" class="headerlink" title="事件处理流程"></a>事件处理流程</h3><img src="/2023/07/31/redis%E4%B9%8B%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/事件处理流程.jpg"><h4 id="server-c-main"><a href="#server-c-main" class="headerlink" title="server.c main"></a>server.c main</h4><p>redis服务端主线程中定义有如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    initServer(); <span class="comment">// 创建、初始化服务端数据结构，</span></span><br><span class="line">    ...</span><br><span class="line">    initListeners(); <span class="comment">// 初始化服务器后，初始化监听器</span></span><br><span class="line">    ...</span><br><span class="line">    aeMain(server.el); <span class="comment">// 启动 事件循环</span></span><br><span class="line">    aeDeleteEventLoop(server.el); <span class="comment">// 服务器关闭时，停止事件循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化事件处理器"><a href="#初始化事件处理器" class="headerlink" title="初始化事件处理器"></a>初始化事件处理器</h4><p>如上，<code>redis</code>服务器主线程启动时，会调用<code>initServer</code>，该函数调用<code>aeCreateEventLoop</code>初始化事件处理器。在创建时需要指定<code>setsize</code>，表示<code>eventLoop</code>可以监听的网络事件fd的个数，如果当前监听的fd的个数超过了<code>setsize</code>,<code>eventLoop</code>将不能继续注册。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">initServer</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    server.el = aeCreateEventLoop(server.maxclients+CONFIG_FDSET_INCR);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (aeCreateTimeEvent(server.el, <span class="number">1</span>, serverCron, <span class="literal">NULL</span>, <span class="literal">NULL</span>) == AE_ERR) &#123;</span><br><span class="line">        serverPanic(<span class="string">&quot;Can&#x27;t create event loop timers.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (aeCreateFileEvent(server.el, server.module_pipe[<span class="number">0</span>], AE_READABLE,</span><br><span class="line">        modulePipeReadable,<span class="literal">NULL</span>) == AE_ERR) &#123;</span><br><span class="line">            serverPanic(</span><br><span class="line">                <span class="string">&quot;Error registering the readable event for the module pipe.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    aeSetBeforeSleepProc(server.el,beforeSleep);</span><br><span class="line">    aeSetAfterSleepProc(server.el,afterSleep);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="初始化事件循环"><a href="#初始化事件循环" class="headerlink" title="初始化事件循环"></a>初始化事件循环</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">aeEventLoop *<span class="title function_">aeCreateEventLoop</span><span class="params">(<span class="type">int</span> setsize)</span> &#123;</span><br><span class="line">    aeEventLoop *eventLoop;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    monotonicInit();    <span class="comment">/* just in case the calling app didn&#x27;t initialize */</span></span><br><span class="line">    <span class="comment">// 创建事件循环数据结构</span></span><br><span class="line">    <span class="keyword">if</span> ((eventLoop = zmalloc(<span class="keyword">sizeof</span>(*eventLoop))) == <span class="literal">NULL</span>) <span class="keyword">goto</span> err;</span><br><span class="line">    <span class="comment">// 初始化 事件循环中的注册事件和已触发事件</span></span><br><span class="line">    eventLoop-&gt;events = zmalloc(<span class="keyword">sizeof</span>(aeFileEvent)*setsize);</span><br><span class="line">    eventLoop-&gt;fired = zmalloc(<span class="keyword">sizeof</span>(aeFiredEvent)*setsize);</span><br><span class="line">    <span class="keyword">if</span> (eventLoop-&gt;events == <span class="literal">NULL</span> || eventLoop-&gt;fired == <span class="literal">NULL</span>) <span class="keyword">goto</span> err;</span><br><span class="line">    <span class="comment">// 设置数组大小</span></span><br><span class="line">    eventLoop-&gt;setsize = setsize;</span><br><span class="line">    <span class="comment">// 初始化时间事件结构</span></span><br><span class="line">    eventLoop-&gt;timeEventHead = <span class="literal">NULL</span>;</span><br><span class="line">    eventLoop-&gt;timeEventNextId = <span class="number">0</span>;</span><br><span class="line">    eventLoop-&gt;stop = <span class="number">0</span>;</span><br><span class="line">    eventLoop-&gt;maxfd = <span class="number">-1</span>;</span><br><span class="line">    eventLoop-&gt;beforesleep = <span class="literal">NULL</span>;</span><br><span class="line">    eventLoop-&gt;aftersleep = <span class="literal">NULL</span>;</span><br><span class="line">    eventLoop-&gt;flags = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 创建 io多路复用实例，赋值给apidata字段</span></span><br><span class="line">    <span class="keyword">if</span> (aeApiCreate(eventLoop) == <span class="number">-1</span>) <span class="keyword">goto</span> err;</span><br><span class="line">    <span class="comment">// 初始化监听事件</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; setsize; i++)</span><br><span class="line">        eventLoop-&gt;events[i].mask = AE_NONE;</span><br><span class="line">    <span class="keyword">return</span> eventLoop;</span><br><span class="line"></span><br><span class="line">err:</span><br><span class="line">    <span class="keyword">if</span> (eventLoop) &#123;</span><br><span class="line">        zfree(eventLoop-&gt;events);</span><br><span class="line">        zfree(eventLoop-&gt;fired);</span><br><span class="line">        zfree(eventLoop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建时间事件"><a href="#创建时间事件" class="headerlink" title="创建时间事件"></a>创建时间事件</h5><p><code>initServer</code>中调用<code>aeCreateTimeEvent</code>创建时间事件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">aeCreateTimeEvent</span><span class="params">(aeEventLoop *eventLoop, <span class="type">long</span> <span class="type">long</span> milliseconds,</span></span><br><span class="line"><span class="params">        aeTimeProc *proc, <span class="type">void</span> *clientData,</span></span><br><span class="line"><span class="params">        aeEventFinalizerProc *finalizerProc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 更新 时间计数器</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> id = eventLoop-&gt;timeEventNextId++;</span><br><span class="line">    aeTimeEvent *te;</span><br><span class="line">    <span class="comment">// 创建时间事件结构</span></span><br><span class="line">    te = zmalloc(<span class="keyword">sizeof</span>(*te));</span><br><span class="line">    <span class="keyword">if</span> (te == <span class="literal">NULL</span>) <span class="keyword">return</span> AE_ERR;</span><br><span class="line">    <span class="comment">// 设置id</span></span><br><span class="line">    te-&gt;id = id;</span><br><span class="line">    <span class="comment">// 设定处理事件的时间</span></span><br><span class="line">    te-&gt;when = getMonotonicUs() + milliseconds * <span class="number">1000</span>;</span><br><span class="line">    te-&gt;timeProc = proc;</span><br><span class="line">    te-&gt;finalizerProc = finalizerProc;</span><br><span class="line">    te-&gt;clientData = clientData;</span><br><span class="line">    te-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    te-&gt;next = eventLoop-&gt;timeEventHead;</span><br><span class="line">    te-&gt;refcount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (te-&gt;next)</span><br><span class="line">        te-&gt;next-&gt;prev = te;</span><br><span class="line">    eventLoop-&gt;timeEventHead = te;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注册文件IO事件"><a href="#注册文件IO事件" class="headerlink" title="注册文件IO事件"></a>注册文件IO事件</h5><p><code>initServer</code>中调用<code>aeCreateFileEvent</code>创建文件IO事件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">aeCreateFileEvent</span><span class="params">(aeEventLoop *eventLoop, <span class="type">int</span> fd, <span class="type">int</span> mask,</span></span><br><span class="line"><span class="params">        aeFileProc *proc, <span class="type">void</span> *clientData)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= eventLoop-&gt;setsize) &#123;</span><br><span class="line">        errno = ERANGE;</span><br><span class="line">        <span class="keyword">return</span> AE_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取出事件循环中的文件描述符对应的文件事件</span></span><br><span class="line">    aeFileEvent *fe = &amp;eventLoop-&gt;events[fd];</span><br><span class="line">    <span class="comment">// 监听该 文件描述符指定的 事件</span></span><br><span class="line">    <span class="keyword">if</span> (aeApiAddEvent(eventLoop, fd, mask) == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> AE_ERR;</span><br><span class="line">    <span class="comment">// 设置 文件事件类型，以及事件的处理器</span></span><br><span class="line">    fe-&gt;mask |= mask;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_READABLE) fe-&gt;rfileProc = proc;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_WRITABLE) fe-&gt;wfileProc = proc;</span><br><span class="line">    fe-&gt;clientData = clientData;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt; eventLoop-&gt;maxfd)</span><br><span class="line">        eventLoop-&gt;maxfd = fd;</span><br><span class="line">    <span class="keyword">return</span> AE_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h4><p>在<code>server.c main()</code>中初始化服务器之后，调用<code>initListeners()</code>初始化监听器。<br><code>redis</code>中为服务器提供了TCP&#x2F;TLS&#x2F;UNIX三种监听器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">initListeners</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/* Setup listeners from server config for TCP/TLS/Unix */</span></span><br><span class="line">    <span class="type">int</span> conn_index;</span><br><span class="line">    connListener *listener;</span><br><span class="line">    <span class="keyword">if</span> (server.port != <span class="number">0</span>) &#123;</span><br><span class="line">        conn_index = connectionIndexByType(CONN_TYPE_SOCKET);</span><br><span class="line">        <span class="keyword">if</span> (conn_index &lt; <span class="number">0</span>)</span><br><span class="line">            serverPanic(<span class="string">&quot;Failed finding connection listener of %s&quot;</span>, CONN_TYPE_SOCKET);</span><br><span class="line">        listener = &amp;server.listeners[conn_index];</span><br><span class="line">        listener-&gt;bindaddr = server.bindaddr;</span><br><span class="line">        listener-&gt;bindaddr_count = server.bindaddr_count;</span><br><span class="line">        listener-&gt;port = server.port;</span><br><span class="line">        listener-&gt;ct = connectionByType(CONN_TYPE_SOCKET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.tls_port || server.tls_replication || server.tls_cluster) &#123;</span><br><span class="line">        ConnectionType *ct_tls = connectionTypeTls();</span><br><span class="line">        <span class="keyword">if</span> (!ct_tls) &#123;</span><br><span class="line">            serverLog(LL_WARNING, <span class="string">&quot;Failed finding TLS support.&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connTypeConfigure(ct_tls, &amp;server.tls_ctx_config, <span class="number">1</span>) == C_ERR) &#123;</span><br><span class="line">            serverLog(LL_WARNING, <span class="string">&quot;Failed to configure TLS. Check logs for more info.&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.tls_port != <span class="number">0</span>) &#123;</span><br><span class="line">        conn_index = connectionIndexByType(CONN_TYPE_TLS);</span><br><span class="line">        <span class="keyword">if</span> (conn_index &lt; <span class="number">0</span>)</span><br><span class="line">            serverPanic(<span class="string">&quot;Failed finding connection listener of %s&quot;</span>, CONN_TYPE_TLS);</span><br><span class="line">        listener = &amp;server.listeners[conn_index];</span><br><span class="line">        listener-&gt;bindaddr = server.bindaddr;</span><br><span class="line">        listener-&gt;bindaddr_count = server.bindaddr_count;</span><br><span class="line">        listener-&gt;port = server.tls_port;</span><br><span class="line">        listener-&gt;ct = connectionByType(CONN_TYPE_TLS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (server.unixsocket != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        conn_index = connectionIndexByType(CONN_TYPE_UNIX);</span><br><span class="line">        <span class="keyword">if</span> (conn_index &lt; <span class="number">0</span>)</span><br><span class="line">            serverPanic(<span class="string">&quot;Failed finding connection listener of %s&quot;</span>, CONN_TYPE_UNIX);</span><br><span class="line">        listener = &amp;server.listeners[conn_index];</span><br><span class="line">        listener-&gt;bindaddr = &amp;server.unixsocket;</span><br><span class="line">        listener-&gt;bindaddr_count = <span class="number">1</span>;</span><br><span class="line">        listener-&gt;ct = connectionByType(CONN_TYPE_UNIX);</span><br><span class="line">        listener-&gt;priv = &amp;server.unixsocketperm; <span class="comment">/* Unix socket specified */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create all the configured listener, and add handler to start to accept */</span></span><br><span class="line">    <span class="type">int</span> listen_fds = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; CONN_TYPE_MAX; j++) &#123;</span><br><span class="line">        listener = &amp;server.listeners[j];</span><br><span class="line">        <span class="keyword">if</span> (listener-&gt;ct == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connListen(listener) == C_ERR) &#123;</span><br><span class="line">            serverLog(LL_WARNING, <span class="string">&quot;Failed listening on port %u (%s), aborting.&quot;</span>, listener-&gt;port, listener-&gt;ct-&gt;get_type(<span class="literal">NULL</span>));</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (createSocketAcceptHandler(listener, connAcceptHandler(listener-&gt;ct)) != C_OK)</span><br><span class="line">            serverPanic(<span class="string">&quot;Unrecoverable error creating %s listener accept handler.&quot;</span>, listener-&gt;ct-&gt;get_type(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">       listen_fds += listener-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listen_fds == <span class="number">0</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">&quot;Configured to not listen anywhere, exiting.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p><code>redis</code>主程序中，初始化事件循环、监听器后将调用<code>aeMain</code>进入事件循环中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">aeMain</span><span class="params">(aeEventLoop *eventLoop)</span> &#123;</span><br><span class="line">    eventLoop-&gt;stop = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!eventLoop-&gt;stop) &#123;</span><br><span class="line">        aeProcessEvents(eventLoop, AE_ALL_EVENTS|</span><br><span class="line">                                   AE_CALL_BEFORE_SLEEP|</span><br><span class="line">                                   AE_CALL_AFTER_SLEEP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>aeProcessEvents</code>先处理每个挂起的时间事件，再处理每个挂起的文件事件。<br>如果没有特殊标志，该函数将休眠，直到某个文件事件触发，或者下一次事件发生。</p><p><code>flag</code>的取值含义如下：<br>0： 什么也不做<br>AE_ALL_EVENTS：处理所有事件</p><p>先来看<code>eventLoop</code>的定义，位于<code>ae.h</code>文件中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* State of an event based program */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">aeEventLoop</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> maxfd;   <span class="comment">// 当前注册的事件中，最大的文件描述符</span></span><br><span class="line">    <span class="type">int</span> setsize; <span class="comment">// 追踪的文件描述符的最大值</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> timeEventNextId;</span><br><span class="line">    aeFileEvent *events; <span class="comment">// 已注册的文件事件</span></span><br><span class="line">    aeFiredEvent *fired; <span class="comment">// 已触发的事件</span></span><br><span class="line">    aeTimeEvent *timeEventHead; <span class="comment">// 时间事件的头指针</span></span><br><span class="line">    <span class="type">int</span> stop;</span><br><span class="line">    <span class="type">void</span> *apidata; <span class="comment">/* This is used for polling API specific data */</span></span><br><span class="line">    aeBeforeSleepProc *beforesleep;</span><br><span class="line">    aeBeforeSleepProc *aftersleep;</span><br><span class="line">    <span class="type">int</span> flags;</span><br><span class="line">&#125; aeEventLoop;</span><br></pre></td></tr></table></figure><p>文件事件的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">aeFileEvent</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> mask; <span class="comment">/* one of AE_(READABLE|WRITABLE|BARRIER) */</span></span><br><span class="line">    aeFileProc *rfileProc; <span class="comment">// 回调方法的指针，类似于接口</span></span><br><span class="line">    aeFileProc *wfileProc;</span><br><span class="line">    <span class="type">void</span> *clientData;</span><br><span class="line">&#125; aeFileEvent;</span><br></pre></td></tr></table></figure><p>其中，<code>mask</code>的取值如下，用以指定事件循环中注册的文件的触发方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AE_NONE 0      <span class="comment">// 没有事件注册</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AE_READABLE 1   <span class="comment">// 文件描述符为可读时，触发该事件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AE_WRITABLE 2   <span class="comment">// 文件描述符为可写时，触发触发此事件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AE_BARRIER 4   <span class="comment">// AE_BARRIER时，不会再可读事件后继续触发可写事件；此情形下，会导致读写顺序，使写先发生，再执行读</span></span></span><br></pre></td></tr></table></figure><p>触发的事件定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">aeFiredEvent</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> fd; <span class="comment">// 文件描述符</span></span><br><span class="line">    <span class="type">int</span> mask; <span class="comment">// 触发事件标志位</span></span><br><span class="line">&#125; aeFiredEvent;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 取值如下：</span></span><br><span class="line"><span class="comment">        AE_FILE_EVENTS： 0000 0001</span></span><br><span class="line"><span class="comment">        AE_TIME_EVENTS： 0000 0010</span></span><br><span class="line"><span class="comment">        AE_ALL_EVENTS：  0000 0011</span></span><br><span class="line"><span class="comment">        AE_DONT_WAIT：   0000 0100</span></span><br><span class="line"><span class="comment">AE_CALL_BEFORE_SLEEP：   0000 1000 </span></span><br><span class="line"><span class="comment">AE_CALL_AFTER_SLEEP：    0001 0000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aeProcessEvents</span><span class="params">(aeEventLoop *eventLoop, <span class="type">int</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> processed = <span class="number">0</span>, numevents;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(flags &amp; AE_TIME_EVENTS) &amp;&amp; !(flags &amp; AE_FILE_EVENTS)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Note that we want to call aeApiPoll() even if there are no</span></span><br><span class="line"><span class="comment">     * file events to process as long as we want to process time</span></span><br><span class="line"><span class="comment">     * events, in order to sleep until the next time event is ready</span></span><br><span class="line"><span class="comment">     * to fire. */</span></span><br><span class="line">    <span class="keyword">if</span> (eventLoop-&gt;maxfd != <span class="number">-1</span> ||</span><br><span class="line">        ((flags &amp; AE_TIME_EVENTS) &amp;&amp; !(flags &amp; AE_DONT_WAIT))) &#123;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>, *<span class="title">tvp</span> =</span> <span class="literal">NULL</span>; <span class="comment">/* NULL means infinite wait. */</span></span><br><span class="line">        <span class="type">int64_t</span> usUntilTimer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (eventLoop-&gt;beforesleep != <span class="literal">NULL</span> &amp;&amp; (flags &amp; AE_CALL_BEFORE_SLEEP))</span><br><span class="line">            eventLoop-&gt;beforesleep(eventLoop);</span><br><span class="line">         <span class="comment">// 在 beforesleep 中，eventLoop-&gt;flags可能会变化，两者存在时，flags的优先级更高</span></span><br><span class="line">         <span class="comment">// 如果 flags = AE_DONT_WAIT，无需处理 eventLoop-&gt;flags </span></span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; AE_DONT_WAIT) || (eventLoop-&gt;flags &amp; AE_DONT_WAIT)) &#123;</span><br><span class="line">            tv.tv_sec = tv.tv_usec = <span class="number">0</span>;</span><br><span class="line">            tvp = &amp;tv;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; AE_TIME_EVENTS) &#123;</span><br><span class="line">            usUntilTimer = usUntilEarliestTimer(eventLoop);</span><br><span class="line">            <span class="keyword">if</span> (usUntilTimer &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                tv.tv_sec = usUntilTimer / <span class="number">1000000</span>;</span><br><span class="line">                tv.tv_usec = usUntilTimer % <span class="number">1000000</span>;</span><br><span class="line">                tvp = &amp;tv;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用多路复用的api，仅在超时或者某些事件触发时返回</span></span><br><span class="line">        numevents = aeApiPoll(eventLoop, tvp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果flag不包含AE_FILE_EVENTS，则 待处理事件数为0[包含情况仅为file_event和 all_event]</span></span><br><span class="line">        <span class="keyword">if</span> (!(flags &amp; AE_FILE_EVENTS)) &#123;</span><br><span class="line">            numevents = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果不为 after_sleep 不为空， 且flags为after_sleep时，设置后置处理</span></span><br><span class="line">        <span class="keyword">if</span> (eventLoop-&gt;aftersleep != <span class="literal">NULL</span> &amp;&amp; flags &amp; AE_CALL_AFTER_SLEEP)</span><br><span class="line">            eventLoop-&gt;aftersleep(eventLoop);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历事件</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; numevents; j++) &#123;</span><br><span class="line">            <span class="comment">// 获取当前事件的文件描述符</span></span><br><span class="line">            <span class="type">int</span> fd = eventLoop-&gt;fired[j].fd;</span><br><span class="line">            <span class="comment">// 根据文件描述符，定位到注册的文件事件</span></span><br><span class="line">            aeFileEvent *fe = &amp;eventLoop-&gt;events[fd];</span><br><span class="line">            <span class="comment">// 获取该文件事件的标志位</span></span><br><span class="line">            <span class="type">int</span> mask = eventLoop-&gt;fired[j].mask;</span><br><span class="line">            <span class="comment">// 计量 当前文件描述符 调用的事件数量</span></span><br><span class="line">            <span class="type">int</span> fired = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 是否需要倒置 写读 事件</span></span><br><span class="line">            <span class="type">int</span> invert = fe-&gt;mask &amp; AE_BARRIER;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 防止该文件事件已经被触发且已经从fireevents中移除</span></span><br><span class="line">            <span class="keyword">if</span> (!invert &amp;&amp; fe-&gt;mask &amp; mask &amp; AE_READABLE) &#123;</span><br><span class="line">                <span class="comment">// 调用该文件事件的 读操作 , 触发事件++</span></span><br><span class="line">                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                fired++;</span><br><span class="line">                fe = &amp;eventLoop-&gt;events[fd]; <span class="comment">/* Refresh in case of resize. */</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 触发 写操作</span></span><br><span class="line">            <span class="keyword">if</span> (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fired || fe-&gt;wfileProc != fe-&gt;rfileProc) &#123;</span><br><span class="line">                    <span class="comment">// 调用该文件事件的 写方法， 触发事件++</span></span><br><span class="line">                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                    fired++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 如果需要 倒置写读 操作，则在上述 写操作完毕后，再判断是否需要执行 读操作</span></span><br><span class="line">            <span class="keyword">if</span> (invert) &#123;</span><br><span class="line">                fe = &amp;eventLoop-&gt;events[fd]; <span class="comment">/* Refresh in case of resize. */</span></span><br><span class="line">                <span class="keyword">if</span> ((fe-&gt;mask &amp; mask &amp; AE_READABLE) &amp;&amp;</span><br><span class="line">                    (!fired || fe-&gt;wfileProc != fe-&gt;rfileProc))</span><br><span class="line">                &#123;</span><br><span class="line">                    fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                    fired++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 已处理事件 ++ </span></span><br><span class="line">            processed++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查是否需要处理时间事件</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; AE_TIME_EVENTS)</span><br><span class="line">        processed += processTimeEvents(eventLoop);</span><br><span class="line">    <span class="comment">// 返回处理过的时间/文件事件</span></span><br><span class="line">    <span class="keyword">return</span> processed; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上<code>aeProcessEvents</code>的代码中，调用了如下两个方法：</p><ol><li><code>aeApiPoll</code>: 调用 多路复用 api，监控多个文件描述符的可读可写状态。</li><li><code>processTimeEvents</code>： 处理时间事件</li></ol><h5 id="监听文件描述符"><a href="#监听文件描述符" class="headerlink" title="监听文件描述符"></a>监听文件描述符</h5><p><code>aeApiPoll</code>实际上是 IO多路复用接口，<code>redis</code>中提供了四种实现方式:<br><code>evport、epoll、kqueue、select</code>。</p><p>因为 Redis 需要在多个平台上运行，同时为了最大化执行的效率与性能，所以会根据编译平台的不同选择不同的 I&#x2F;O 多路复用函数作为子模块，提供给上层统一的接口；在 Redis 中，通过宏定义的使用，合理的选择不同的子模块:<br><img src="/2023/07/31/redis%E4%B9%8B%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/aeApiPoll.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> HAVE_EVPORT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ae_evport.c&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> HAVE_EPOLL</span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ae_epoll.c&quot;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">ifdef</span> HAVE_KQUEUE</span></span><br><span class="line">        <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ae_kqueue.c&quot;</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ae_select.c&quot;</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h5 id="处理文件读"><a href="#处理文件读" class="headerlink" title="处理文件读"></a>处理文件读</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!invert &amp;&amp; fe-&gt;mask &amp; mask &amp; AE_READABLE) &#123;</span><br><span class="line">                <span class="comment">// 调用该文件事件的 读操作 , 触发事件++</span></span><br><span class="line">                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                fired++;</span><br><span class="line">                fe = &amp;eventLoop-&gt;events[fd]; <span class="comment">/* Refresh in case of resize. */</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h5 id="处理文件写"><a href="#处理文件写" class="headerlink" title="处理文件写"></a>处理文件写</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fired || fe-&gt;wfileProc != fe-&gt;rfileProc) &#123;</span><br><span class="line">                    <span class="comment">// 调用该文件事件的 写方法， 触发事件++</span></span><br><span class="line">                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                    fired++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h5 id="处理时间事件"><a href="#处理时间事件" class="headerlink" title="处理时间事件"></a>处理时间事件</h5><p><code>processTimeEvents</code>方法用以处理时间事件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">processTimeEvents</span><span class="params">(aeEventLoop *eventLoop)</span> &#123;</span><br><span class="line">    <span class="type">int</span> processed = <span class="number">0</span>;</span><br><span class="line">    aeTimeEvent *te;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> maxId;</span><br><span class="line"></span><br><span class="line">    te = eventLoop-&gt;timeEventHead;</span><br><span class="line">    maxId = eventLoop-&gt;timeEventNextId<span class="number">-1</span>;</span><br><span class="line">    monotime now = getMonotonicUs();</span><br><span class="line">    <span class="keyword">while</span>(te) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除计划删除的事件，  AE_DELETED_EVENT_ID = -1 </span></span><br><span class="line">        <span class="keyword">if</span> (te-&gt;id == AE_DELETED_EVENT_ID) &#123;</span><br><span class="line">            aeTimeEvent *next = te-&gt;next;</span><br><span class="line">            <span class="comment">/* If a reference exists for this timer event,</span></span><br><span class="line"><span class="comment">             * don&#x27;t free it. This is currently incremented</span></span><br><span class="line"><span class="comment">             * for recursive timerProc calls */</span></span><br><span class="line">            <span class="keyword">if</span> (te-&gt;refcount) &#123;</span><br><span class="line">                te = next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (te-&gt;prev)</span><br><span class="line">                te-&gt;prev-&gt;next = te-&gt;next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                eventLoop-&gt;timeEventHead = te-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (te-&gt;next)</span><br><span class="line">                te-&gt;next-&gt;prev = te-&gt;prev;</span><br><span class="line">            <span class="keyword">if</span> (te-&gt;finalizerProc) &#123;</span><br><span class="line">                te-&gt;finalizerProc(eventLoop, te-&gt;clientData);</span><br><span class="line">                now = getMonotonicUs();</span><br><span class="line">            &#125;</span><br><span class="line">            zfree(te);</span><br><span class="line">            te = next;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在这次的事件循环中，不处理由被时间事件创建的时间事件。目前已无用</span></span><br><span class="line">        <span class="keyword">if</span> (te-&gt;id &gt; maxId) &#123;</span><br><span class="line">            te = te-&gt;next;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (te-&gt;when &lt;= now) &#123;</span><br><span class="line">            <span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">            id = te-&gt;id;</span><br><span class="line">            te-&gt;refcount++;</span><br><span class="line">            retval = te-&gt;timeProc(eventLoop, id, te-&gt;clientData);</span><br><span class="line">            te-&gt;refcount--;</span><br><span class="line">            processed++;</span><br><span class="line">            now = getMonotonicUs();</span><br><span class="line">            <span class="keyword">if</span> (retval != AE_NOMORE) &#123;</span><br><span class="line">                te-&gt;when = now + retval * <span class="number">1000</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                te-&gt;id = AE_DELETED_EVENT_ID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        te = te-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h3><p>在<code>IO多路复用模型</code>中，最重要的就是<code>select</code>函数，用以监听多个文件描述符的可读可写状态，当某些文件描述符可读或者可写时，该方法就会返回可读或可写的文件描述符个数。</p><p>缘起：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">startSaving</span><span class="params">(<span class="type">int</span> rdbflags)</span> &#123;</span><br><span class="line">    <span class="comment">/* Fire the persistence modules start event. */</span></span><br><span class="line">    <span class="type">int</span> subevent;</span><br><span class="line">    <span class="keyword">if</span> (rdbflags &amp; RDBFLAGS_AOF_PREAMBLE &amp;&amp; getpid() != server.pid)</span><br><span class="line">        subevent = REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rdbflags &amp; RDBFLAGS_AOF_PREAMBLE)</span><br><span class="line">        subevent = REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_AOF_START;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (getpid()!=server.pid)</span><br><span class="line">        subevent = REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        subevent = REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START;</span><br><span class="line">    moduleFireServerEvent(REDISMODULE_EVENT_PERSISTENCE,subevent,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">stopSaving</span><span class="params">(<span class="type">int</span> success)</span> &#123;</span><br><span class="line">    <span class="comment">/* Fire the persistence modules end event. */</span></span><br><span class="line">    moduleFireServerEvent(REDISMODULE_EVENT_PERSISTENCE,</span><br><span class="line">                          success?</span><br><span class="line">                            REDISMODULE_SUBEVENT_PERSISTENCE_ENDED:</span><br><span class="line">                            REDISMODULE_SUBEVENT_PERSISTENCE_FAILED,</span><br><span class="line">                          <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://doc.yonyoucloud.com/doc/wiki/project/redis/event-driven.html">1. 事件驱动</a><br><a href="http://gosaturn.github.io/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/2015/11/23/redis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0_%E4%BA%8B%E4%BB%B6/">2. redis源码学习_事件</a><br><a href="https://www.cnblogs.com/Courage129/p/14338139.html">3. 浅析Redis与IO多路复用器原理</a><br><a href="https://doc.yonyoucloud.com/doc/wiki/project/redis/event-driven.html">4. Redis 事件驱动详解</a><br><a href="https://github.com/redis/redis/blob/6abb3c40384bd507fe410680e0e0fefc4141f8a3/src/server.c">5. server.c</a><br><a href="https://github.com/redis/redis/blob/6abb3c40384bd507fe410680e0e0fefc4141f8a3/src/ae.c">6. ae.c</a><br><a href="https://www.cyhone.com/articles/analysis-of-redis-ae/">7. Redis 事件循环器 (AE) 实现剖析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;服务器是一个事件驱动程序，服务器需要处理两类事件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文件事件处理器：redis</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis之io</title>
    <link href="https://mqrayblog.cn/2023/07/27/redis%E4%B9%8Bio/"/>
    <id>https://mqrayblog.cn/2023/07/27/redis%E4%B9%8Bio/</id>
    <published>2023-07-27T07:05:26.000Z</published>
    <updated>2023-07-27T07:05:26.851Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>c语言基础函数整理</title>
    <link href="https://mqrayblog.cn/2023/07/27/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/"/>
    <id>https://mqrayblog.cn/2023/07/27/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/</id>
    <published>2023-07-27T04:37:53.000Z</published>
    <updated>2023-08-20T06:19:18.294Z</updated>
    
    <content type="html"><![CDATA[<p>阅读redis源码过程中有比较多的C语言函数调用，起一个文档记录。</p><h4 id="fflush"><a href="#fflush" class="headerlink" title="fflush"></a>fflush</h4><p>刷新流stream的输出缓冲区，成功返回0，否则返回<code>eof</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fflush</span><span class="params">(FILE *stream)</span></span><br></pre></td></tr></table></figure><h4 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">char</span> *filename, <span class="type">char</span> *mode)</span>;</span><br></pre></td></tr></table></figure><h4 id="fclose"><a href="#fclose" class="headerlink" title="fclose"></a>fclose</h4><p>用于关闭一个已经打开的文件。关闭文件后，该文件的指针将不再指向该文件，文件的缓冲区中的数据将被写入到磁盘中，文件的描述符将被释放，以便其他程序可以使用该文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><h4 id="fileno"><a href="#fileno" class="headerlink" title="fileno"></a>fileno</h4><p>获取标准IO流的文件描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fileno</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><h4 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h4><p>删除文件。<br>PS: 执行unlink()函数并不一定会真正的删除文件，它先会检查文件系统中此文件的连接数是否为<br>1，如果不是1说明此文件还有其他链接对象，因此只对此文件的连接数进行减1操作。若连接数为1，并且在此时没有任何进程打开该文件，此内容才会真正地被删除掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">unlink</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname)</span>;</span><br></pre></td></tr></table></figure><h4 id="snprintf"><a href="#snprintf" class="headerlink" title="snprintf"></a>snprintf</h4><p>用于格式化输出字符串，并将结果写入到指定的缓冲区，与 sprintf() 不同的是，snprintf() 会限制输出的字符数，避免缓冲区溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">snprintf</span> <span class="params">( <span class="type">char</span> * str, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> * format, ... )</span>;</span><br></pre></td></tr></table></figure><p><code>str</code>: 目标字符串，用于存储格式化后的字符串的字符数组的指针。<br><code>size</code>： 字符数组的大小。<br><code>format</code>: 格式化字符串。</p><h4 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h4><p>该函数用以再<code>haystack</code>中查找<code>needle</code>出现的位置，未找到则返回null</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">strstr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *haystack, <span class="type">const</span> <span class="type">char</span> *needle)</span></span><br></pre></td></tr></table></figure><h4 id="strcasecmp"><a href="#strcasecmp" class="headerlink" title="strcasecmp"></a>strcasecmp</h4><p>判断字符串是否相等(忽略大小写)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">strcasecmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *string1, <span class="type">const</span> <span class="type">char</span> *string2)</span>;</span><br></pre></td></tr></table></figure><h4 id="zmalloc"><a href="#zmalloc" class="headerlink" title="zmalloc"></a>zmalloc</h4><h4 id="zfree"><a href="#zfree" class="headerlink" title="zfree"></a>zfree</h4><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://www.runoob.com/cprogramming/c-function-fflush.html">1. 菜鸟教程-c库</a><br><a href="https://pubs.opengroup.org/onlinepubs/7908799/xsh/unlink.html">2. include&lt;unistd.h&gt;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;阅读redis源码过程中有比较多的C语言函数调用，起一个文档记录。&lt;/p&gt;
&lt;h4 id=&quot;fflush&quot;&gt;&lt;a href=&quot;#fflush&quot; class=&quot;headerlink&quot; title=&quot;fflush&quot;&gt;&lt;/a&gt;fflush&lt;/h4&gt;&lt;p&gt;刷新流stream的输出缓</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis之持久化</title>
    <link href="https://mqrayblog.cn/2023/07/24/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>https://mqrayblog.cn/2023/07/24/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2023-07-24T14:45:02.000Z</published>
    <updated>2023-09-05T10:54:37.991Z</updated>
    
    <content type="html"><![CDATA[<p>由于redis是内存数据库，其数据库状态保存在内存中。redis中提供了持久化功能，用以将redis内存中的数据库状态保存在磁盘中，避免意外的数据丢失。</p><p>Redis中提供了两种持久化方式，分别是<code>RDB</code>和<code>AOF</code>。</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p><code>RDB</code>持久化功能可以将某个时间点上的数据库状态保存到一个<code>RDB</code>文件中，所生成的<code>RDB</code>文件是一个经过压缩的二进制文件，通过该文件可以还原生成<code>RDB</code>文件时的数据库状态。</p><h3 id="RDB文件载入"><a href="#RDB文件载入" class="headerlink" title="RDB文件载入"></a>RDB文件载入</h3><p><code>rdb</code>文件的载入工作是在服务器启动时自动执行的。<br>因为<code>aof</code>文件的更新频率通常比<code>rdb</code>文件的更新频率高，所以如果服务器开启了<code>AOF</code>持久化功能，服务器将优先使用<code>AOF</code>文件来还原数据库状态。<br>只有在<code>AOF</code>持久化功能处于关闭时，服务器才会使用<code>rdb</code>文件来还原数据库状态。</p><p>另外，在服务器载入<code>rdb</code>文件期间，会一直处于阻塞状态，直到载入完毕。</p><h3 id="RDB文件创建"><a href="#RDB文件创建" class="headerlink" title="RDB文件创建"></a>RDB文件创建</h3><p><code>redis</code>中可以使用<code>SAVE</code>和<code>BGSAVE</code>两个命令生成<code>RDB</code>文件。<br>其中，<code>save</code>命令会阻塞服务器进程，直到<code>RDB</code>文件创建完毕位置，在此期间，服务器不能处理任何命令请求。而<code>BGSAVE</code>命令则会派生出一个子进程，由子进程负责创建<code>RDB</code>文件，服务器主进程可以继续处理命令请求。<br>由于<code>BGSAVE</code>可以在不阻塞服务器的情况下执行，因此<code>redis</code>提供了相应配置，条件触发<code>BGSAVE</code>命令。<br>在<code>redis.conf</code>中有如下配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]</span><br><span class="line">save <span class="number">3600</span> <span class="number">1</span> <span class="number">300</span> <span class="number">100</span> <span class="number">60</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>上述命令等价于如下三行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save <span class="number">3600</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">100</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ol><li>服务器在3600s内，对数据库至少修改了1次；</li><li>服务器在300s内，对数据库至少修改了100次；</li><li>服务器在60s内，对数据库至少修改了10000次；<br>上述任意条件满足时，服务器就会执行<code>BGSAVE</code>命令。</li></ol><p><code>RDB</code>持久化相关的配置体现在<code>redisServer</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">saveparam</span> *<span class="title">saveparams</span>;</span>   <span class="comment">// 触发rdb自动保存的配置数组</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> dirty;                <span class="comment">// 上一次save执行后，数据库表更次数</span></span><br><span class="line">    <span class="type">time_t</span> lastsave;                <span class="comment">// 上次成功执行 save的 unix时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">saveparam</span> &#123;</span></span><br><span class="line">    <span class="type">time_t</span> seconds; <span class="comment">// 秒数</span></span><br><span class="line">    <span class="type">int</span> changes; <span class="comment">// 修改次数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="RDB文件结构"><a href="#RDB文件结构" class="headerlink" title="RDB文件结构"></a>RDB文件结构</h3><p>下图描述了一个<code>RDB</code>文件结构：<br><img src="/2023/07/24/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/rdb-file.png"></p><ol><li>文件开头保存的是二进制的<code>redis</code>，占三个字节；</li><li><code>db_version</code>: 占四个字节，是字符串表示的整数，用以记录rdb文件的版本号；</li><li><code>databases</code>:用以保存任意多个非空数据库状态；</li><li><code>EOF</code>: 占一个字节，用以标识rdb文件中数据库状态记录的结束；</li><li><code>check_sum</code>: 为8字节长度的无符号整数，保存对数据库状态的校验和；<br>其中，<code>databases</code>中每个非空数据库在<code>rdb</code>文件中都可以保存为<code>SELECTDB|db_number|key_value_pair</code>三部分。</li></ol><img src="/2023/07/24/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/rdb-file-dbs.png"><p>而每一个<code>key_value_pair</code>都保存了一个或多个键值对，如果键值对带有过期时间，则键值对中的过期时间也会被保存。<br>键值对的保存参见： <a href="http://redisbook.com/preview/rdb/rdb_struct.html">redis设计与实现</a></p><h3 id="RDB-源码实现"><a href="#RDB-源码实现" class="headerlink" title="RDB 源码实现"></a>RDB 源码实现</h3><h4 id="save-命令的实现"><a href="#save-命令的实现" class="headerlink" title="save 命令的实现"></a>save 命令的实现</h4><p>在<code>redis</code>客户端中，键入<code>save</code>即可以触发<code>rdb</code>文件的生成，如果后台没有子进程在生成<code>rdb </code>就会调用<code>rdbSave</code>生成文件，并保存在磁盘中。</p><h5 id="saveCommand"><a href="#saveCommand" class="headerlink" title="saveCommand"></a>saveCommand</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">saveCommand</span><span class="params">(client *c)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查是否有进程在执行save，如有，则停止</span></span><br><span class="line">    <span class="keyword">if</span> (server.child_type == CHILD_TYPE_RDB) &#123;</span><br><span class="line">        addReplyError(c,<span class="string">&quot;Background save already in progress&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server.stat_rdb_saves++;</span><br><span class="line"></span><br><span class="line">    rdbSaveInfo rsi, *rsiptr;</span><br><span class="line">    rsiptr = rdbPopulateSaveInfo(&amp;rsi);</span><br><span class="line">    <span class="keyword">if</span> (rdbSave(SLAVE_REQ_NONE,server.rdb_filename,rsiptr,RDBFLAGS_NONE) == C_OK) &#123;</span><br><span class="line">        addReply(c,shared.ok);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        addReplyErrorObject(c,shared.err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rdbPopulateSaveInfo"><a href="#rdbPopulateSaveInfo" class="headerlink" title="rdbPopulateSaveInfo"></a>rdbPopulateSaveInfo</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">rdbSaveInfo *<span class="title function_">rdbPopulateSaveInfo</span><span class="params">(rdbSaveInfo *rsi)</span> &#123;</span><br><span class="line">    rdbSaveInfo rsi_init = RDB_SAVE_INFO_INIT;</span><br><span class="line">    *rsi = rsi_init;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前节点是主节点，且当 repl_backlog 不为null时，可以复制副本信息；</span></span><br><span class="line">    <span class="comment">// 如果 repl_backlog 为空，则代表当前实例不再副本链中。在这种场景下，副本无用。</span></span><br><span class="line">    <span class="comment">// 当从节点连接时，repl_backlog=null将触发完全同步，榆次同事将会创造新的副本。</span></span><br><span class="line">    <span class="keyword">if</span> (!server.masterhost &amp;&amp; server.repl_backlog) &#123;</span><br><span class="line">         <span class="comment">// 如果 server.slaveseldb=-1，则代表主节点在完全同步之后尚未接收任何请求；</span></span><br><span class="line">         <span class="comment">// 因此可以将 repl_stream_db=0，以允许从节点重新加载副本偏移量；</span></span><br><span class="line">         <span class="comment">// 此过程是安全的，因为下一次写入前将生成 select语句</span></span><br><span class="line">        rsi-&gt;repl_stream_db = server.slaveseldb == <span class="number">-1</span> ? <span class="number">0</span> : server.slaveseldb;</span><br><span class="line">        <span class="keyword">return</span> rsi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 如果当前是从节点，则需要连接到主节点，以获取当前选中的DB</span></span><br><span class="line">    <span class="keyword">if</span> (server.master) &#123;</span><br><span class="line">        rsi-&gt;repl_stream_db = server.master-&gt;db-&gt;id;</span><br><span class="line">        <span class="keyword">return</span> rsi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有一个缓存的master，可以使用它来填充选中的DB信息；从节点能根据来自master的数据增加 master_repl_offset，因此即使断开连接，master上的偏移量仍是有效的。</span></span><br><span class="line">    <span class="keyword">if</span> (server.cached_master) &#123;</span><br><span class="line">        rsi-&gt;repl_stream_db = server.cached_master-&gt;db-&gt;id;</span><br><span class="line">        <span class="keyword">return</span> rsi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rdbSave"><a href="#rdbSave" class="headerlink" title="rdbSave"></a>rdbSave</h5><p><code>rdbSave</code>命令：将当前redis的数据库状态保存在磁盘中，返回ok即成功，否则返回C_ERR。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rdbSave</span><span class="params">(<span class="type">int</span> req, <span class="type">char</span> *filename, rdbSaveInfo *rsi, <span class="type">int</span> rdbflags)</span> &#123;</span><br><span class="line">    <span class="type">char</span> tmpfile[<span class="number">256</span>];</span><br><span class="line">    <span class="type">char</span> cwd[MAXPATHLEN]; <span class="comment">/* Current working dir path for error messages. */</span></span><br><span class="line"></span><br><span class="line">    startSaving(RDBFLAGS_NONE);</span><br><span class="line">    <span class="comment">// 创建临时文件</span></span><br><span class="line">    <span class="built_in">snprintf</span>(tmpfile,<span class="number">256</span>,<span class="string">&quot;temp-%d.rdb&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rdbSaveInternal(req,tmpfile,rsi,rdbflags) != C_OK) &#123;</span><br><span class="line">        stopSaving(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重命名文件</span></span><br><span class="line">    <span class="keyword">if</span> (rename(tmpfile,filename) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *str_err = strerror(errno);</span><br><span class="line">        <span class="type">char</span> *cwdp = getcwd(cwd,MAXPATHLEN);</span><br><span class="line">        serverLog(LL_WARNING,</span><br><span class="line">            <span class="string">&quot;Error moving temp DB file %s on the final &quot;</span></span><br><span class="line">            <span class="string">&quot;destination %s (in server root dir %s): %s&quot;</span>,</span><br><span class="line">            tmpfile,</span><br><span class="line">            filename,</span><br><span class="line">            cwdp ? cwdp : <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">            str_err);</span><br><span class="line">        unlink(tmpfile);</span><br><span class="line">        stopSaving(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fsyncFileDir(filename) != <span class="number">0</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING,</span><br><span class="line">            <span class="string">&quot;Failed to fsync directory while saving DB: %s&quot;</span>, strerror(errno));</span><br><span class="line">        stopSaving(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serverLog(LL_NOTICE,<span class="string">&quot;DB saved on disk&quot;</span>);</span><br><span class="line">    <span class="comment">// 将 server.dirty 清零，该参数用以记录在上次生成rdb文件之后有多少次数据变更</span></span><br><span class="line">    server.dirty = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 记录上一次执行save操作的时间</span></span><br><span class="line">    server.lastsave = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 更新save操作状态</span></span><br><span class="line">    server.lastbgsave_status = C_OK;</span><br><span class="line">    stopSaving(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rdbSaveInternal"><a href="#rdbSaveInternal" class="headerlink" title="rdbSaveInternal"></a>rdbSaveInternal</h5><p>上述过程调用了 <code>rdbSaveInternal</code> 方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">rdbSaveInternal</span><span class="params">(<span class="type">int</span> req, <span class="type">const</span> <span class="type">char</span> *filename, rdbSaveInfo *rsi, <span class="type">int</span> rdbflags)</span> &#123;</span><br><span class="line">    <span class="type">char</span> cwd[MAXPATHLEN]; <span class="comment">/* Current working dir path for error messages. */</span></span><br><span class="line">    rio rdb;</span><br><span class="line">    <span class="type">int</span> error = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> saved_errno;</span><br><span class="line">    <span class="type">char</span> *err_op;    <span class="comment">/* For a detailed log */</span></span><br><span class="line">    <span class="comment">// 以写权限打开文件</span></span><br><span class="line">    FILE *fp = fopen(filename,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp) &#123;</span><br><span class="line">        saved_errno = errno;</span><br><span class="line">        <span class="type">char</span> *str_err = strerror(errno);</span><br><span class="line">        <span class="type">char</span> *cwdp = getcwd(cwd,MAXPATHLEN);</span><br><span class="line">        serverLog(LL_WARNING,</span><br><span class="line">            <span class="string">&quot;Failed opening the temp RDB file %s (in server root dir %s) &quot;</span></span><br><span class="line">            <span class="string">&quot;for saving: %s&quot;</span>,</span><br><span class="line">            filename,</span><br><span class="line">            cwdp ? cwdp : <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">            str_err);</span><br><span class="line">        errno = saved_errno;</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化 rio 对象 （文件对象io）</span></span><br><span class="line">    rioInitWithFile(&amp;rdb,fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.rdb_save_incremental_fsync) &#123;</span><br><span class="line">        rioSetAutoSync(&amp;rdb,REDIS_AUTOSYNC_BYTES);</span><br><span class="line">        <span class="keyword">if</span> (!(rdbflags &amp; RDBFLAGS_KEEP_CACHE)) rioSetReclaimCache(&amp;rdb,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据库状态写入到rio中</span></span><br><span class="line">    <span class="keyword">if</span> (rdbSaveRio(req,&amp;rdb,&amp;error,rdbflags,rsi) == C_ERR) &#123;</span><br><span class="line">        errno = error;</span><br><span class="line">        err_op = <span class="string">&quot;rdbSaveRio&quot;</span>;</span><br><span class="line">        <span class="keyword">goto</span> werr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清理缓冲区，以保证所有数据都被写入磁盘</span></span><br><span class="line">    <span class="keyword">if</span> (fflush(fp)) &#123; err_op = <span class="string">&quot;fflush&quot;</span>; <span class="keyword">goto</span> werr; &#125;</span><br><span class="line">    <span class="comment">// 将fp指向的文件同步到磁盘中</span></span><br><span class="line">    <span class="keyword">if</span> (fsync(fileno(fp))) &#123; err_op = <span class="string">&quot;fsync&quot;</span>; <span class="keyword">goto</span> werr; &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(rdbflags &amp; RDBFLAGS_KEEP_CACHE) &amp;&amp; reclaimFilePageCache(fileno(fp), <span class="number">0</span>, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        serverLog(LL_NOTICE,<span class="string">&quot;Unable to reclaim cache after saving RDB: %s&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    <span class="keyword">if</span> (fclose(fp)) &#123; fp = <span class="literal">NULL</span>; err_op = <span class="string">&quot;fclose&quot;</span>; <span class="keyword">goto</span> werr; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    saved_errno = errno;</span><br><span class="line">    serverLog(LL_WARNING,<span class="string">&quot;Write error while saving DB to the disk(%s): %s&quot;</span>, err_op, strerror(errno));</span><br><span class="line">    <span class="keyword">if</span> (fp) fclose(fp);</span><br><span class="line">    unlink(filename);</span><br><span class="line">    errno = saved_errno;</span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rdbSaveRio"><a href="#rdbSaveRio" class="headerlink" title="rdbSaveRio"></a>rdbSaveRio</h5><p>写入文件的主要逻辑由<code>rdbSaveRio</code>完成：[rio是redis抽象的io层，面向缓冲区、文件IO和socket IO]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rdbSaveRio</span><span class="params">(<span class="type">int</span> req, rio *rdb, <span class="type">int</span> *error, <span class="type">int</span> rdbflags, rdbSaveInfo *rsi)</span> &#123;</span><br><span class="line">    <span class="type">char</span> magic[<span class="number">10</span>];</span><br><span class="line">    <span class="type">uint64_t</span> cksum;</span><br><span class="line">    <span class="type">long</span> key_counter = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.rdb_checksum)</span><br><span class="line">        rdb-&gt;update_cksum = rioGenericUpdateChecksum;</span><br><span class="line">    <span class="built_in">snprintf</span>(magic,<span class="keyword">sizeof</span>(magic),<span class="string">&quot;REDIS%04d&quot;</span>,RDB_VERSION);</span><br><span class="line">    <span class="keyword">if</span> (rdbWriteRaw(rdb,magic,<span class="number">9</span>) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">if</span> (rdbSaveInfoAuxFields(rdb,rdbflags,rsi) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">if</span> (!(req &amp; SLAVE_REQ_RDB_EXCLUDE_DATA) &amp;&amp; rdbSaveModulesAux(rdb, REDISMODULE_AUX_BEFORE_RDB) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* save functions */</span></span><br><span class="line">    <span class="keyword">if</span> (!(req &amp; SLAVE_REQ_RDB_EXCLUDE_FUNCTIONS) &amp;&amp; rdbSaveFunctions(rdb) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历服务器上的所有数据库</span></span><br><span class="line">    <span class="comment">/* save all databases, skip this if we&#x27;re in functions-only mode */</span></span><br><span class="line">    <span class="keyword">if</span> (!(req &amp; SLAVE_REQ_RDB_EXCLUDE_DATA)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rdbSaveDb(rdb, j, rdbflags, &amp;key_counter) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(req &amp; SLAVE_REQ_RDB_EXCLUDE_DATA) &amp;&amp; rdbSaveModulesAux(rdb, REDISMODULE_AUX_AFTER_RDB) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向 rdb文件对象中写入 EOF</span></span><br><span class="line">    <span class="keyword">if</span> (rdbSaveType(rdb,RDB_OPCODE_EOF) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* CRC64 checksum. It will be zero if checksum computation is disabled, the</span></span><br><span class="line"><span class="comment">     * loading code skips the check in this case. */</span></span><br><span class="line">    cksum = rdb-&gt;cksum;</span><br><span class="line">    memrev64ifbe(&amp;cksum);</span><br><span class="line">    <span class="keyword">if</span> (rioWrite(rdb,&amp;cksum,<span class="number">8</span>) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    <span class="keyword">if</span> (error) *error = errno;</span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rdbSaveDb"><a href="#rdbSaveDb" class="headerlink" title="rdbSaveDb"></a>rdbSaveDb</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储每个数据库中的数据库状态</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">rdbSaveDb</span><span class="params">(rio *rdb, <span class="type">int</span> dbid, <span class="type">int</span> rdbflags, <span class="type">long</span> *key_counter)</span> &#123;</span><br><span class="line">    dictIterator *di;</span><br><span class="line">    dictEntry *de;</span><br><span class="line">    <span class="type">ssize_t</span> written = <span class="number">0</span>;</span><br><span class="line">    <span class="type">ssize_t</span> res;</span><br><span class="line">    <span class="type">static</span> <span class="type">long</span> <span class="type">long</span> info_updated_time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *pname = (rdbflags &amp; RDBFLAGS_AOF_PREAMBLE) ? <span class="string">&quot;AOF rewrite&quot;</span> :  <span class="string">&quot;RDB&quot;</span>;</span><br><span class="line"></span><br><span class="line">    redisDb *db = server.db + dbid;</span><br><span class="line">    dict *d = db-&gt;dict;</span><br><span class="line">    <span class="keyword">if</span> (dictSize(d) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 如果此数据库中未保存数据，则跳过此数据库。</span></span><br><span class="line">    di = dictGetSafeIterator(d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向rdb文件中写入SELECTDB，以标识接下来将要读到数据库编号</span></span><br><span class="line">    <span class="keyword">if</span> ((res = rdbSaveType(rdb,RDB_OPCODE_SELECTDB)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    written += res;</span><br><span class="line">    <span class="comment">// 向rdb文件中写入此数据库键值对占用的的长度</span></span><br><span class="line">    <span class="keyword">if</span> ((res = rdbSaveLen(rdb, dbid)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    written += res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Write the RESIZE DB opcode. */</span></span><br><span class="line">    <span class="type">uint64_t</span> db_size, expires_size;</span><br><span class="line">    db_size = dictSize(db-&gt;dict);</span><br><span class="line">    expires_size = dictSize(db-&gt;expires);</span><br><span class="line">    <span class="keyword">if</span> ((res = rdbSaveType(rdb,RDB_OPCODE_RESIZEDB)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    written += res;</span><br><span class="line">    <span class="keyword">if</span> ((res = rdbSaveLen(rdb,db_size)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    written += res;</span><br><span class="line">    <span class="keyword">if</span> ((res = rdbSaveLen(rdb,expires_size)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    written += res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历当前db的每一个entry</span></span><br><span class="line">    <span class="keyword">while</span>((de = dictNext(di)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        sds keystr = dictGetKey(de);</span><br><span class="line">        robj key, *o = dictGetVal(de);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> expire;</span><br><span class="line">        <span class="type">size_t</span> rdb_bytes_before_key = rdb-&gt;processed_bytes;</span><br><span class="line"></span><br><span class="line">        initStaticStringObject(key,keystr);</span><br><span class="line">        expire = getExpire(db,&amp;key);</span><br><span class="line">        <span class="keyword">if</span> ((res = rdbSaveKeyValuePair(rdb, &amp;key, o, expire, dbid)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">        written += res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在fork出来的子进程中，可以尝试将内存释放回操作系统，同时尽可能减少COW</span></span><br><span class="line">        <span class="type">size_t</span> dump_size = rdb-&gt;processed_bytes - rdb_bytes_before_key;</span><br><span class="line">        <span class="keyword">if</span> (server.in_fork_child) dismissObject(o, dump_size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每秒更新一次 child 状态信息，以避免在每次迭代中调用调用mstime()</span></span><br><span class="line">        <span class="keyword">if</span> (((*key_counter)++ &amp; <span class="number">1023</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> now = mstime();</span><br><span class="line">            <span class="keyword">if</span> (now - info_updated_time &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                sendChildInfo(CHILD_INFO_TYPE_CURRENT_INFO, *key_counter, pname);</span><br><span class="line">                info_updated_time = now;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dictReleaseIterator(di);</span><br><span class="line">    <span class="keyword">return</span> written;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    dictReleaseIterator(di);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>redis</code>是单线程模型，执行<code>save</code>会阻塞服务器主进程执行其他请求吗，故而提供了另外一种实现<code>bgsave</code>，通过fork子进程的方式，使用子进程创建<code>rdb</code>文件，文件的保存过程中不影响服务器的正常读写。</p><h4 id="bgsave-命令的实现"><a href="#bgsave-命令的实现" class="headerlink" title="bgsave 命令的实现"></a>bgsave 命令的实现</h4><h5 id="bgsaveCommand"><a href="#bgsaveCommand" class="headerlink" title="bgsaveCommand"></a>bgsaveCommand</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bgsaveCommand</span><span class="params">(client *c)</span> &#123;</span><br><span class="line">    <span class="type">int</span> schedule = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The SCHEDULE option changes the behavior of BGSAVE when an AOF rewrite</span></span><br><span class="line"><span class="comment">     * is in progress. Instead of returning an error a BGSAVE gets scheduled. */</span></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;argc == <span class="number">2</span> &amp;&amp; !strcasecmp(c-&gt;argv[<span class="number">1</span>]-&gt;ptr,<span class="string">&quot;schedule&quot;</span>)) &#123;</span><br><span class="line">            schedule = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            addReplyErrorObject(c,shared.syntaxerr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rdbSaveInfo rsi, *rsiptr;</span><br><span class="line">    rsiptr = rdbPopulateSaveInfo(&amp;rsi);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.child_type == CHILD_TYPE_RDB) &#123;</span><br><span class="line">        addReplyError(c,<span class="string">&quot;Background save already in progress&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasActiveChildProcess() || server.in_exec) &#123;</span><br><span class="line">        <span class="keyword">if</span> (schedule || server.in_exec) &#123;</span><br><span class="line">            server.rdb_bgsave_scheduled = <span class="number">1</span>;</span><br><span class="line">            addReplyStatus(c,<span class="string">&quot;Background saving scheduled&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            addReplyError(c,</span><br><span class="line">            <span class="string">&quot;Another child process is active (AOF?): can&#x27;t BGSAVE right now. &quot;</span></span><br><span class="line">            <span class="string">&quot;Use BGSAVE SCHEDULE in order to schedule a BGSAVE whenever &quot;</span></span><br><span class="line">            <span class="string">&quot;possible.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rdbSaveBackground(SLAVE_REQ_NONE,server.rdb_filename,rsiptr,RDBFLAGS_NONE) == C_OK) &#123;</span><br><span class="line">        addReplyStatus(c,<span class="string">&quot;Background saving started&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        addReplyErrorObject(c,shared.err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rdbPopulateSaveInfo-1"><a href="#rdbPopulateSaveInfo-1" class="headerlink" title="rdbPopulateSaveInfo"></a>rdbPopulateSaveInfo</h4><p>前文已有描述，不再复述。</p><h4 id="rdbSaveBackground"><a href="#rdbSaveBackground" class="headerlink" title="rdbSaveBackground"></a>rdbSaveBackground</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rdbSaveBackground</span><span class="params">(<span class="type">int</span> req, <span class="type">char</span> *filename, rdbSaveInfo *rsi, <span class="type">int</span> rdbflags)</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有正在执行 save、bgsave、aof-rewriting、被加载模块派生的某个副进程时，返回 C_ERR</span></span><br><span class="line">    <span class="keyword">if</span> (hasActiveChildProcess()) <span class="keyword">return</span> C_ERR;</span><br><span class="line">    <span class="comment">// 记录服务器上rdb save的执行次数</span></span><br><span class="line">    server.stat_rdb_saves++;</span><br><span class="line"></span><br><span class="line">    server.dirty_before_bgsave = server.dirty;</span><br><span class="line">    <span class="comment">// 记录上一次执行 bgsave 的unix时间</span></span><br><span class="line">    server.lastbgsave_try = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((childpid = redisFork(CHILD_TYPE_RDB)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// child子进程，修改进程标题</span></span><br><span class="line">        redisSetProcTitle(<span class="string">&quot;redis-rdb-bgsave&quot;</span>);</span><br><span class="line">        redisSetCpuAffinity(server.bgsave_cpulist);</span><br><span class="line">        <span class="comment">// 进行rdb持久化，之后与save执行过程无异</span></span><br><span class="line">        retval = rdbSave(req, filename,rsi,rdbflags);</span><br><span class="line">        <span class="keyword">if</span> (retval == C_OK) &#123;</span><br><span class="line">            sendChildCowInfo(CHILD_INFO_TYPE_RDB_COW_SIZE, <span class="string">&quot;RDB&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        exitFromChild((retval == C_OK) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 父进程中，记录子进程的fork时间等信息</span></span><br><span class="line">        <span class="keyword">if</span> (childpid == <span class="number">-1</span>) &#123;</span><br><span class="line">            server.lastbgsave_status = C_ERR;</span><br><span class="line">            serverLog(LL_WARNING,<span class="string">&quot;Can&#x27;t save in background: fork: %s&quot;</span>,</span><br><span class="line">                strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> C_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        serverLog(LL_NOTICE,<span class="string">&quot;Background saving started by pid %ld&quot;</span>,(<span class="type">long</span>) childpid);</span><br><span class="line">        <span class="comment">// 记录子进程中执行rdbsave的时间</span></span><br><span class="line">        server.rdb_save_time_start = time(<span class="literal">NULL</span>);</span><br><span class="line">        server.rdb_child_type = RDB_CHILD_TYPE_DISK;</span><br><span class="line">        <span class="keyword">return</span> C_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C_OK; <span class="comment">/* unreached */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="redisFork"><a href="#redisFork" class="headerlink" title="redisFork"></a>redisFork</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* purpose is one of CHILD_TYPE_ types */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">redisFork</span><span class="params">(<span class="type">int</span> purpose)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isMutuallyExclusiveChildType(purpose)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasActiveChildProcess()) &#123;</span><br><span class="line">            errno = EEXIST;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        openChildInfoPipe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> childpid;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> start = ustime();</span><br><span class="line">    <span class="keyword">if</span> ((childpid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置遵循如下原因</span></span><br><span class="line">        <span class="comment">// 1. 由于信号随时可能触发，所以需要先设置信号处理程序</span></span><br><span class="line">        <span class="comment">// 2. 随后调整OOM得分然后再做其他事情，以此帮助OOM killer在资源不足时进行回收</span></span><br><span class="line">        server.in_fork_child = purpose;</span><br><span class="line">        setupChildSignalHandlers();</span><br><span class="line">        setOOMScoreAdj(CONFIG_OOM_BGCHILD);</span><br><span class="line">        updateDictResizePolicy();</span><br><span class="line">        dismissMemoryInChild();</span><br><span class="line">        <span class="comment">// fork结束后关闭子进程中未用到的资源</span></span><br><span class="line">        closeChildUnusedResourceAfterFork();</span><br><span class="line">        <span class="comment">/* Close the reading part, so that if the parent crashes, the child will</span></span><br><span class="line"><span class="comment">         * get a write error and exit. */</span></span><br><span class="line">        <span class="keyword">if</span> (server.child_info_pipe[<span class="number">0</span>] != <span class="number">-1</span>)</span><br><span class="line">            close(server.child_info_pipe[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Parent */</span></span><br><span class="line">        <span class="keyword">if</span> (childpid == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> fork_errno = errno;</span><br><span class="line">            <span class="keyword">if</span> (isMutuallyExclusiveChildType(purpose)) closeChildInfoPipe();</span><br><span class="line">            errno = fork_errno;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        server.stat_total_forks++;</span><br><span class="line">        server.stat_fork_time = ustime()-start;</span><br><span class="line">        server.stat_fork_rate = (<span class="type">double</span>) zmalloc_used_memory() * <span class="number">1000000</span> / server.stat_fork_time / (<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>); <span class="comment">/* GB per second. */</span></span><br><span class="line">        latencyAddSampleIfNeeded(<span class="string">&quot;fork&quot;</span>,server.stat_fork_time/<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* The child_pid and child_type are only for mutually exclusive children.</span></span><br><span class="line"><span class="comment">         * other child types should handle and store their pid&#x27;s in dedicated variables.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Today, we allows CHILD_TYPE_LDB to run in parallel with the other fork types:</span></span><br><span class="line"><span class="comment">         * - it isn&#x27;t used for production, so it will not make the server be less efficient</span></span><br><span class="line"><span class="comment">         * - used for debugging, and we don&#x27;t want to block it from running while other</span></span><br><span class="line"><span class="comment">         *   forks are running (like RDB and AOF) */</span></span><br><span class="line">        <span class="keyword">if</span> (isMutuallyExclusiveChildType(purpose)) &#123;</span><br><span class="line">            server.child_pid = childpid;</span><br><span class="line">            server.child_type = purpose;</span><br><span class="line">            server.stat_current_cow_peak = <span class="number">0</span>;</span><br><span class="line">            server.stat_current_cow_bytes = <span class="number">0</span>;</span><br><span class="line">            server.stat_current_cow_updated = <span class="number">0</span>;</span><br><span class="line">            server.stat_current_save_keys_processed = <span class="number">0</span>;</span><br><span class="line">            server.stat_module_progress = <span class="number">0</span>;</span><br><span class="line">            server.stat_current_save_keys_total = dbTotalServerKeyCount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        updateDictResizePolicy();</span><br><span class="line">        moduleFireServerEvent(REDISMODULE_EVENT_FORK_CHILD,</span><br><span class="line">                              REDISMODULE_SUBEVENT_FORK_CHILD_BORN,</span><br><span class="line">                              <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> childpid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，<code>redis</code>中定义了五种子进程类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_TYPE_NONE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_TYPE_RDB 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_TYPE_AOF 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_TYPE_LDB 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_TYPE_MODULE 4</span></span><br></pre></td></tr></table></figure><h4 id="rdbsave-命令总结"><a href="#rdbsave-命令总结" class="headerlink" title="rdbsave 命令总结"></a>rdbsave 命令总结</h4><img src="/2023/07/24/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/rdb-save.png"><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>除了<code>rdb</code>持久化外，<code>redis</code>还提供了<code>aof， append only file</code>持久化功能，将服务器执行的命令以<code>redis的命令请求协议格式</code>记录到<code>aof</code>文件中。<br>redis中默认不开启<code>aof</code>持久化功能，可通过修改如下配置实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly no ==&gt; appendonly yes</span><br></pre></td></tr></table></figure><p>在<code>redis.conf</code>中定义了<code>aof</code>持久化功能</p><h3 id="AOF-命令追加"><a href="#AOF-命令追加" class="headerlink" title="AOF 命令追加"></a>AOF 命令追加</h3><p><code>redisServer</code>中<code>aof</code>相关参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> stat_aof_rewrites;    <span class="comment">/* number of aof file rewrites performed */</span></span><br><span class="line">    <span class="comment">/* AOF persistence */</span></span><br><span class="line">    <span class="type">int</span> aof_enabled;                <span class="comment">/* AOF configuration */</span></span><br><span class="line">    <span class="type">int</span> aof_state;                  <span class="comment">/* AOF_(ON|OFF|WAIT_REWRITE) */</span></span><br><span class="line">    <span class="type">int</span> aof_fsync;                  <span class="comment">// aof 文件同步模式</span></span><br><span class="line">    <span class="type">int</span> aof_no_fsync_on_rewrite;    <span class="comment">// aof 重写标志位， 如果已经在重写，则无需同步</span></span><br><span class="line">    <span class="type">int</span> aof_rewrite_perc;           <span class="comment">// aof重写间隔</span></span><br><span class="line">    <span class="type">off_t</span> aof_rewrite_min_size;     <span class="comment">// aof文件的最小bytes</span></span><br><span class="line">    <span class="type">off_t</span> aof_rewrite_base_size;    <span class="comment">// 最近执行aof重写时 aof文件的大小</span></span><br><span class="line">    <span class="type">off_t</span> aof_current_size;         <span class="comment">// 当前aof文件大小</span></span><br><span class="line">    <span class="type">off_t</span> aof_last_incr_size;       <span class="comment">// 上一次aof重写后，文件增加的字节数</span></span><br><span class="line">    <span class="type">int</span> aof_rewrite_scheduled;      <span class="comment">// 一旦 bgsave终止，执行aof重写</span></span><br><span class="line">    sds aof_buf;      <span class="comment">// aof 缓冲区</span></span><br><span class="line">    <span class="type">int</span> aof_fd;       <span class="comment">// 当前aof的文件描述符</span></span><br><span class="line">    <span class="type">int</span> aof_selected_db; <span class="comment">/* Currently selected DB in AOF */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端执行命令时，服务器在执行命令时，会将该值用协议进行封装，而后追加到<code>aof_buf</code>缓冲区中。</p><h3 id="AOF文件写入与同步"><a href="#AOF文件写入与同步" class="headerlink" title="AOF文件写入与同步"></a>AOF文件写入与同步</h3><p><code>redis</code>服务器进程实际上是一个事件循环<code>eventLoop</code>，循环中包含两个事件：<code>文件事件</code>和<code>时间事件</code>，其中，文件时间负责接收客户端的请求、向客户端发送回复命令等；时间事件则执行像<code>severCron</code>之类需要定时运行的函数。</p><p>服务器处理文件事件时，可能会执行写命令，这些内容将被加入到redisServer.aof_buf中。所以在结束一个事件循环后，都会调用<code>flushAppendOnlyFile</code>函数，考虑是否将<code>aof_buf</code>缓冲区中的内容写入和保存到<code>AOF</code>文件中。<br>系统提供了<code>fsync</code>和<code>fdatasync</code>两个同步函数，可以强制让操作系统立即将缓冲区中的数据写入到磁盘中，从而确保写入数据的安全性。</p><h4 id="AOF持久化模式"><a href="#AOF持久化模式" class="headerlink" title="AOF持久化模式"></a>AOF持久化模式</h4><p><code>redisServer</code>中 <code>aof_fsync</code>定义了服务器的持久化行为，其取值如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AOF_FSYNC_NO 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AOF_FSYNC_ALWAYS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AOF_FSYNC_EVERYSEC 2</span></span><br></pre></td></tr></table></figure><ol><li><code>AOF_FSYNC_NO</code>: 将<code>aof_buf</code>缓冲区中的所有内容写入到<code>AOF</code>文件中，但不对AOF文件进行同步，何时同步由操作系统决定。[aof不是在磁盘上么？为什么会有同步的差异]</li><li><code>AOF_FSYNC_ALWAYS</code>: 将<code>aof_buf</code>缓冲区中的所有内容写入并同步到<code>AOF</code>文件中。</li><li><code>AOF_FSYNC_EVERYSEC</code>: 将<code>aof_buf</code>缓冲区中的所有内容写入到<code>AOF</code>文件中，如果距上次同步AOF文件的时间超过一秒钟，则再次对<code>AOF</code>文件进行同步，此同步过程有一个子线程处理。<br>默认为 <code>AOF_FSYNC_EVERYSEC</code>。<blockquote><p>这里之所以有写入和同步的差异，是因为在操作系统中，用户调用write函数将数据写入到文件时，并不是立即将该数据落盘，而是先将数据保存在一个内存缓冲区中，待缓冲区中的文件被填满，或者超出指定时限后，才真正将缓冲区中的数据写入到磁盘中。</p></blockquote></li></ol><h4 id="AOF持久化模式的对比"><a href="#AOF持久化模式的对比" class="headerlink" title="AOF持久化模式的对比"></a>AOF持久化模式的对比</h4><ol><li>安全性角度：<code>always</code>&gt; <code>every_sec</code>&gt;<code>no</code>，即使出现停机故障，<code>aof</code>持久化也只会丢失一个事件循环中所产生的命令数据。而<code>every_sec</code>也只会丢失一秒钟的命令数据。</li><li>效率：<code>always</code>&lt; <code>every_sec</code> &lt; <code>no</code>，因为 服务器在每个事件循环中，既需要将<code>aof_buf</code>缓冲区中的所有内容写入到<code>AOF</code>文件中，也需要将页缓存中的数据同步到<code>AOF</code>文件中。而<code>no</code>模式下，无需执行同步操作，故而该模式下<code>AOF</code>文件的写入速度最快，但是同步时间反而是最长的。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 force=1，则无论是否有后台调用fsync，文件都将被写入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">flushAppendOnlyFile</span><span class="params">(<span class="type">int</span> force)</span> &#123;</span><br><span class="line">    <span class="type">ssize_t</span> nwritten;</span><br><span class="line">    <span class="type">int</span> sync_in_progress = <span class="number">0</span>;</span><br><span class="line">    <span class="type">mstime_t</span> latency;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sdslen(server.aof_buf) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_EVERYSEC &amp;&amp;</span><br><span class="line">            server.aof_last_incr_fsync_offset != server.aof_last_incr_size &amp;&amp;</span><br><span class="line">            server.unixtime &gt; server.aof_last_fsync &amp;&amp;</span><br><span class="line">            !(sync_in_progress = aofFsyncInProgress())) &#123;</span><br><span class="line">            <span class="keyword">goto</span> try_fsync;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Check if we need to do fsync even the aof buffer is empty,</span></span><br><span class="line"><span class="comment">         * the reason is described in the previous AOF_FSYNC_EVERYSEC block,</span></span><br><span class="line"><span class="comment">         * and AOF_FSYNC_ALWAYS is also checked here to handle a case where</span></span><br><span class="line"><span class="comment">         * aof_fsync is changed from everysec to always. */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_ALWAYS &amp;&amp;</span><br><span class="line">                   server.aof_last_incr_fsync_offset != server.aof_last_incr_size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">goto</span> try_fsync;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_EVERYSEC)</span><br><span class="line">        sync_in_progress = aofFsyncInProgress();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_EVERYSEC &amp;&amp; !force) &#123;</span><br><span class="line">        <span class="comment">// EVERYSEC 模式下， 将在后台执行fsync</span></span><br><span class="line">        <span class="comment">// 如果fsync正在进行中，则在2秒后尝试进行 fsync</span></span><br><span class="line">        <span class="keyword">if</span> (sync_in_progress) &#123;</span><br><span class="line">            <span class="keyword">if</span> (server.aof_flush_postponed_start == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/* No previous write postponing, remember that we are</span></span><br><span class="line"><span class="comment">                 * postponing the flush and return. */</span></span><br><span class="line">                server.aof_flush_postponed_start = server.unixtime;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (server.unixtime - server.aof_flush_postponed_start &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">/* We were already waiting for fsync to finish, but for less</span></span><br><span class="line"><span class="comment">                 * than two seconds this is still ok. Postpone again. */</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则失败</span></span><br><span class="line">            <span class="comment">/* Otherwise fall through, and go write since we can&#x27;t wait</span></span><br><span class="line"><span class="comment">             * over two seconds. */</span></span><br><span class="line">            server.aof_delayed_fsync++;</span><br><span class="line">            serverLog(LL_NOTICE,<span class="string">&quot;Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* We want to perform a single write. This should be guaranteed atomic</span></span><br><span class="line"><span class="comment">     * at least if the filesystem we are writing is a real physical one.</span></span><br><span class="line"><span class="comment">     * While this will save us against the server being killed I don&#x27;t think</span></span><br><span class="line"><span class="comment">     * there is much to do about the whole server stopping for power problems</span></span><br><span class="line"><span class="comment">     * or alike */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.aof_flush_sleep &amp;&amp; sdslen(server.aof_buf)) &#123;</span><br><span class="line">        usleep(server.aof_flush_sleep);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    latencyStartMonitor(latency);</span><br><span class="line">    nwritten = aofWrite(server.aof_fd,server.aof_buf,sdslen(server.aof_buf));</span><br><span class="line">    latencyEndMonitor(latency);</span><br><span class="line">    <span class="comment">/* We want to capture different events for delayed writes:</span></span><br><span class="line"><span class="comment">     * when the delay happens with a pending fsync, or with a saving child</span></span><br><span class="line"><span class="comment">     * active, and when the above two conditions are missing.</span></span><br><span class="line"><span class="comment">     * We also use an additional event name to save all samples which is</span></span><br><span class="line"><span class="comment">     * useful for graphing / monitoring purposes. */</span></span><br><span class="line">    <span class="keyword">if</span> (sync_in_progress) &#123;</span><br><span class="line">        latencyAddSampleIfNeeded(<span class="string">&quot;aof-write-pending-fsync&quot;</span>,latency);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasActiveChildProcess()) &#123;</span><br><span class="line">        latencyAddSampleIfNeeded(<span class="string">&quot;aof-write-active-child&quot;</span>,latency);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        latencyAddSampleIfNeeded(<span class="string">&quot;aof-write-alone&quot;</span>,latency);</span><br><span class="line">    &#125;</span><br><span class="line">    latencyAddSampleIfNeeded(<span class="string">&quot;aof-write&quot;</span>,latency);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We performed the write so reset the postponed flush sentinel to zero. */</span></span><br><span class="line">    server.aof_flush_postponed_start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nwritten != (<span class="type">ssize_t</span>)sdslen(server.aof_buf)) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">time_t</span> last_write_error_log = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> can_log = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Limit logging rate to 1 line per AOF_WRITE_LOG_ERROR_RATE seconds. */</span></span><br><span class="line">        <span class="keyword">if</span> ((server.unixtime - last_write_error_log) &gt; AOF_WRITE_LOG_ERROR_RATE) &#123;</span><br><span class="line">            can_log = <span class="number">1</span>;</span><br><span class="line">            last_write_error_log = server.unixtime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Log the AOF write error and record the error code. */</span></span><br><span class="line">        <span class="keyword">if</span> (nwritten == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (can_log) &#123;</span><br><span class="line">                serverLog(LL_WARNING,<span class="string">&quot;Error writing to the AOF file: %s&quot;</span>,</span><br><span class="line">                    strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">            server.aof_last_write_errno = errno;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (can_log) &#123;</span><br><span class="line">                serverLog(LL_WARNING,<span class="string">&quot;Short write while writing to &quot;</span></span><br><span class="line">                                       <span class="string">&quot;the AOF file: (nwritten=%lld, &quot;</span></span><br><span class="line">                                       <span class="string">&quot;expected=%lld)&quot;</span>,</span><br><span class="line">                                       (<span class="type">long</span> <span class="type">long</span>)nwritten,</span><br><span class="line">                                       (<span class="type">long</span> <span class="type">long</span>)sdslen(server.aof_buf));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ftruncate(server.aof_fd, server.aof_last_incr_size) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (can_log) &#123;</span><br><span class="line">                    serverLog(LL_WARNING, <span class="string">&quot;Could not remove short write &quot;</span></span><br><span class="line">                             <span class="string">&quot;from the append-only file.  Redis may refuse &quot;</span></span><br><span class="line">                             <span class="string">&quot;to load the AOF the next time it starts.  &quot;</span></span><br><span class="line">                             <span class="string">&quot;ftruncate: %s&quot;</span>, strerror(errno));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* If the ftruncate() succeeded we can set nwritten to</span></span><br><span class="line"><span class="comment">                 * -1 since there is no longer partial data into the AOF. */</span></span><br><span class="line">                nwritten = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            server.aof_last_write_errno = ENOSPC;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Handle the AOF write error. */</span></span><br><span class="line">        <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_ALWAYS) &#123;</span><br><span class="line">            <span class="comment">/* We can&#x27;t recover when the fsync policy is ALWAYS since the reply</span></span><br><span class="line"><span class="comment">             * for the client is already in the output buffers (both writes and</span></span><br><span class="line"><span class="comment">             * reads), and the changes to the db can&#x27;t be rolled back. Since we</span></span><br><span class="line"><span class="comment">             * have a contract with the user that on acknowledged or observed</span></span><br><span class="line"><span class="comment">             * writes are is synced on disk, we must exit. */</span></span><br><span class="line">            serverLog(LL_WARNING,<span class="string">&quot;Can&#x27;t recover from AOF write error when the AOF fsync policy is &#x27;always&#x27;. Exiting...&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* Recover from failed write leaving data into the buffer. However</span></span><br><span class="line"><span class="comment">             * set an error to stop accepting writes as long as the error</span></span><br><span class="line"><span class="comment">             * condition is not cleared. */</span></span><br><span class="line">            server.aof_last_write_status = C_ERR;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Trim the sds buffer if there was a partial write, and there</span></span><br><span class="line"><span class="comment">             * was no way to undo it with ftruncate(2). */</span></span><br><span class="line">            <span class="keyword">if</span> (nwritten &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                server.aof_current_size += nwritten;</span><br><span class="line">                server.aof_last_incr_size += nwritten;</span><br><span class="line">                sdsrange(server.aof_buf,nwritten,<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">/* We&#x27;ll try again on the next call... */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Successful write(2). If AOF was in error state, restore the</span></span><br><span class="line"><span class="comment">         * OK state and log the event. */</span></span><br><span class="line">        <span class="keyword">if</span> (server.aof_last_write_status == C_ERR) &#123;</span><br><span class="line">            serverLog(LL_NOTICE,</span><br><span class="line">                <span class="string">&quot;AOF write error looks solved, Redis can write again.&quot;</span>);</span><br><span class="line">            server.aof_last_write_status = C_OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server.aof_current_size += nwritten;</span><br><span class="line">    server.aof_last_incr_size += nwritten;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Re-use AOF buffer when it is small enough. The maximum comes from the</span></span><br><span class="line"><span class="comment">     * arena size of 4k minus some overhead (but is otherwise arbitrary). */</span></span><br><span class="line">    <span class="keyword">if</span> ((sdslen(server.aof_buf)+sdsavail(server.aof_buf)) &lt; <span class="number">4000</span>) &#123;</span><br><span class="line">        sdsclear(server.aof_buf);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sdsfree(server.aof_buf);</span><br><span class="line">        server.aof_buf = sdsempty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">try_fsync:</span><br><span class="line">    <span class="comment">/* Don&#x27;t fsync if no-appendfsync-on-rewrite is set to yes and there are</span></span><br><span class="line"><span class="comment">     * children doing I/O in the background. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_no_fsync_on_rewrite &amp;&amp; hasActiveChildProcess())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Perform the fsync if needed. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_ALWAYS) &#123;</span><br><span class="line">        <span class="comment">/* redis_fsync is defined as fdatasync() for Linux in order to avoid</span></span><br><span class="line"><span class="comment">         * flushing metadata. */</span></span><br><span class="line">        latencyStartMonitor(latency);</span><br><span class="line">        <span class="comment">/* Let&#x27;s try to get this data on the disk. To guarantee data safe when</span></span><br><span class="line"><span class="comment">         * the AOF fsync policy is &#x27;always&#x27;, we should exit if failed to fsync</span></span><br><span class="line"><span class="comment">         * AOF (see comment next to the exit(1) after write error above). */</span></span><br><span class="line">        <span class="keyword">if</span> (redis_fsync(server.aof_fd) == <span class="number">-1</span>) &#123;</span><br><span class="line">            serverLog(LL_WARNING,<span class="string">&quot;Can&#x27;t persist AOF for fsync error when the &quot;</span></span><br><span class="line">              <span class="string">&quot;AOF fsync policy is &#x27;always&#x27;: %s. Exiting...&quot;</span>, strerror(errno));</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        latencyEndMonitor(latency);</span><br><span class="line">        latencyAddSampleIfNeeded(<span class="string">&quot;aof-fsync-always&quot;</span>,latency);</span><br><span class="line">        server.aof_last_incr_fsync_offset = server.aof_last_incr_size;</span><br><span class="line">        server.aof_last_fsync = server.unixtime;</span><br><span class="line">        atomicSet(server.fsynced_reploff_pending, server.master_repl_offset);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_EVERYSEC &amp;&amp;</span><br><span class="line">               server.unixtime &gt; server.aof_last_fsync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!sync_in_progress) &#123;</span><br><span class="line">            aof_background_fsync(server.aof_fd);</span><br><span class="line">            server.aof_last_incr_fsync_offset = server.aof_last_incr_size;</span><br><span class="line">        &#125;</span><br><span class="line">        server.aof_last_fsync = server.unixtime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>判断<code>aof_buf==0</code>，检查我们是否需要做fsync，即使aof缓冲区是空的，因为以前在<code>EVERYSEC</code>模式下，fsync只有在aof缓冲区不是空的时候才会被调用，所以如果用户在fsync调用前一秒停止写命令，那么页面缓存中的数据就不能及时刷新。这里就能解释写入和同步的差异： 同步是指，将用户输入的内容从页缓存中同步到<code>aof</code>文件中。而写入则是指将<code>aof_buf</code>中的数据写入到<code>aof</code>文件中</li><li>在<code>AOF_FSYNC_ALWAYS </code>模式下也需要检查，以防止持久化模式是从<code>EVERYSEC</code>被修改为<code>AOF_FSYNC_ALWAYS</code>。</li><li></li></ol><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>由于<code>AOF</code>持久化是通过保存服务器执行的命令来记录数据库状态的，故而<code>AOF</code>文件中的内容会越来越多，文件也会越来越大，体积过大时，可能会对<code>redis</code>服务器造成影响，还原数据库状态所耗费的时间也越多。<br>为了解决<code>AOF</code>文件膨胀的问题，<code>redis</code>提供了<code>AOF rewrite</code>功能，使用该功能时，redis服务器将创建一个新的<code>AOF</code>文件来代替现有文件。</p><h4 id="AOF文件重写的实现"><a href="#AOF文件重写的实现" class="headerlink" title="AOF文件重写的实现"></a>AOF文件重写的实现</h4><p>实际上<code>AOF rewrite</code>并不需要对现有的<code>AOF</code>文件做读取、分析、写入操作，而是通过读取服务器当前的数据库状态实现的，其完整流程如下：</p><ol><li>创建新的AOF文件</li><li>遍历所有数据库[忽略空数据库]</li><li>遍历数据库中的所有键[忽略已过期的键]</li><li>根据键的类型进行重写</li><li>写入完毕，关闭文件</li></ol><p>为了避免在执行命令时，造成客户端输入缓冲区移除，重写时会先检查键所包含的元素数量，如果元素数量超过了<code>AOF_REWRITE_ITEMS_PER_CMD</code>，则将分作多个命令写入。默认值为 64。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AOF_REWRITE_ITEMS_PER_CMD 64</span></span><br></pre></td></tr></table></figure><h4 id="AOF后台重写"><a href="#AOF后台重写" class="headerlink" title="AOF后台重写"></a>AOF后台重写</h4><p>上述的<code>AOF rewrite</code>过程包含大量的写入操作，调用时将长时间阻塞服务器主线程，故而在redis中通常将<code>aof rewrite</code>操作放到子进程中执行。这样做有两个好处：</p><ol><li>子进程在<code>aof rewrite</code>期间，服务器主进程可以继续处理命令请求。</li><li>子进程带有服务器进程的数据副本，可以在避免使用锁的情况下，保证数据的安全性。</li></ol><p>使用子进程执行<code>AOF rewrite</code>有一个问题，即主进程中仍能处理命令请求，会对现有数据库状态进行修改，故而导致服务器当前状态和子进程重写<code>AOF</code>文件所保存的数据库状态不一致的情况。<br>为此，redis设置了一个<code>AOF 重写缓冲区</code>，，该缓存在fork出子进程后开始使用，主进程执行完写命令后，会同时将这个写命令写入到<code>aof_buf</code>和<code>AOF 重写缓冲区</code>。<br>当子进程完成重写之后，向父进程发送信号，执行如下任务：</p><ol><li>将<code>AOF 重写缓冲区</code>中的所有内容写入到新的<code>AOF</code>文件中，以此保证新的<code>aof</code>文件保存的服务器状态和当前服务器的状态一致。</li><li>对新的<code>AOF</code>文件进行改名，原子的覆盖现有<code>AOF</code>文件。<br>整个过程中，服务器只有处理 信号处理函数时会被阻塞。<br>以上即是<code>BGREWRITEAOF</code>命令的实现原理。</li></ol><h4 id="AOF后台重写的触发条件"><a href="#AOF后台重写的触发条件" class="headerlink" title="AOF后台重写的触发条件"></a>AOF后台重写的触发条件</h4><p><code>redisServer</code>中有如下三个和<code>AOF rewrite</code>相关的变量，用以控制<code>aof 后台重写</code>的执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="type">off_t</span> aof_current_size;         <span class="comment">// aof文件当前的大小</span></span><br><span class="line">    <span class="type">off_t</span> aof_rewrite_base_size;    <span class="comment">// 最近一次aof重写后 aof文件的大小</span></span><br><span class="line">    <span class="type">int</span> aof_rewrite_perc;           <span class="comment">// 增长百分比变量</span></span><br><span class="line">    <span class="type">off_t</span> aof_rewrite_min_size;     <span class="comment">// 执行aof重写时，aof文件的最小值</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>每当<code>serverCron</code>函数执行时，如果满足如下条件时，则会自动触发<code>aof rewrite</code>：</p><ol><li>没有<code>bgsave</code>命令在执行。</li><li>没有<code>bgrewriteaof</code>命令在执行。</li><li>当前AOF文件的大小大于<code>redisServer.aof_rewrite_min_size</code>。</li><li><code>(aof_current_size - aof_base_size) / aof_base_size &gt; auto-aof-rewrite-percentage</code><br>上述默认参数值为：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span>-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line"><span class="keyword">auto</span>-aof-rewrite-min-size <span class="number">64</span>mb</span><br></pre></td></tr></table></figure></li></ol><h4 id="AOF后台重写-源码"><a href="#AOF后台重写-源码" class="headerlink" title="AOF后台重写 源码"></a>AOF后台重写 源码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bgrewriteaofCommand</span><span class="params">(client *c)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果当前服务器正在执行 aof重写</span></span><br><span class="line">    <span class="keyword">if</span> (server.child_type == CHILD_TYPE_AOF) &#123;</span><br><span class="line">        addReplyError(c,<span class="string">&quot;Background append only file rewriting already in progress&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasActiveChildProcess() || server.in_exec) &#123;</span><br><span class="line">        server.aof_rewrite_scheduled = <span class="number">1</span>; <span class="comment">// 标记bgsave结束后执行aof重写</span></span><br><span class="line">        server.stat_aofrw_consecutive_failures = <span class="number">0</span>; <span class="comment">// aofrw 连续失败的次数</span></span><br><span class="line">        addReplyStatus(c,<span class="string">&quot;Background append only file rewriting scheduled&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rewriteAppendOnlyFileBackground() == C_OK) &#123;</span><br><span class="line">        addReplyStatus(c,<span class="string">&quot;Background append only file rewriting started&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        addReplyError(c,<span class="string">&quot;Can&#x27;t execute an AOF background rewriting. &quot;</span></span><br><span class="line">                        <span class="string">&quot;Please check the server logs for more information.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * AOF background rewrite</span></span><br><span class="line"><span class="comment"> * ------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is how rewriting of the append only file in background works:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1) The user calls BGREWRITEAOF</span></span><br><span class="line"><span class="comment"> * 2) Redis calls this function, that forks():</span></span><br><span class="line"><span class="comment"> *    2a) the child rewrite the append only file in a temp file.</span></span><br><span class="line"><span class="comment"> *    2b) the parent open a new INCR AOF file to continue writing.</span></span><br><span class="line"><span class="comment"> * 3) When the child finished &#x27;2a&#x27; exists.</span></span><br><span class="line"><span class="comment"> * 4) The parent will trap the exit code, if it&#x27;s OK, it will:</span></span><br><span class="line"><span class="comment"> *    4a) get a new BASE file name and mark the previous (if we have) as the HISTORY type</span></span><br><span class="line"><span class="comment"> *    4b) rename(2) the temp file in new BASE file name</span></span><br><span class="line"><span class="comment"> *    4c) mark the rewritten INCR AOFs as history type</span></span><br><span class="line"><span class="comment"> *    4d) persist AOF manifest file</span></span><br><span class="line"><span class="comment"> *    4e) Delete the history files use bio</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rewriteAppendOnlyFileBackground</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasActiveChildProcess()) <span class="keyword">return</span> C_ERR;</span><br><span class="line">    <span class="comment">// appenddirname 默认值为&quot;appendonlydir&quot;，如果不存在或者创建失败</span></span><br><span class="line">    <span class="keyword">if</span> (dirCreateIfMissing(server.aof_dirname) == <span class="number">-1</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">&quot;Can&#x27;t open or create append-only dir %s: %s&quot;</span>,</span><br><span class="line">            server.aof_dirname, strerror(errno));</span><br><span class="line">        server.aof_lastbgrewrite_status = C_ERR;</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We set aof_selected_db to -1 in order to force the next call to the</span></span><br><span class="line"><span class="comment">     * feedAppendOnlyFile() to issue a SELECT command. */</span></span><br><span class="line">    server.aof_selected_db = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 无论后台是否有调用fsync，都执行落盘动作</span></span><br><span class="line">    flushAppendOnlyFile(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (openNewIncrAofForAppend() != C_OK) &#123;</span><br><span class="line">        server.aof_lastbgrewrite_status = C_ERR;</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    server.stat_aof_rewrites++;</span><br><span class="line">    <span class="keyword">if</span> ((childpid = redisFork(CHILD_TYPE_AOF)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> tmpfile[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Child */</span></span><br><span class="line">        redisSetProcTitle(<span class="string">&quot;redis-aof-rewrite&quot;</span>);</span><br><span class="line">        redisSetCpuAffinity(server.aof_rewrite_cpulist);</span><br><span class="line">        <span class="built_in">snprintf</span>(tmpfile,<span class="number">256</span>,<span class="string">&quot;temp-rewriteaof-bg-%d.aof&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">        <span class="keyword">if</span> (rewriteAppendOnlyFile(tmpfile) == C_OK) &#123;</span><br><span class="line">            serverLog(LL_NOTICE,</span><br><span class="line">                <span class="string">&quot;Successfully created the temporary AOF base file %s&quot;</span>, tmpfile);</span><br><span class="line">            sendChildCowInfo(CHILD_INFO_TYPE_AOF_COW_SIZE, <span class="string">&quot;AOF rewrite&quot;</span>);</span><br><span class="line">            exitFromChild(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            exitFromChild(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Parent */</span></span><br><span class="line">        <span class="keyword">if</span> (childpid == <span class="number">-1</span>) &#123;</span><br><span class="line">            server.aof_lastbgrewrite_status = C_ERR;</span><br><span class="line">            serverLog(LL_WARNING,</span><br><span class="line">                <span class="string">&quot;Can&#x27;t rewrite append only file in background: fork: %s&quot;</span>,</span><br><span class="line">                strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> C_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        serverLog(LL_NOTICE,</span><br><span class="line">            <span class="string">&quot;Background append only file rewriting started by pid %ld&quot;</span>,(<span class="type">long</span>) childpid);</span><br><span class="line">        server.aof_rewrite_scheduled = <span class="number">0</span>;</span><br><span class="line">        server.aof_rewrite_time_start = time(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> C_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C_OK; <span class="comment">/* unreached */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Called in `rewriteAppendOnlyFileBackground`. If `server.aof_state`</span></span><br><span class="line"><span class="comment"> * is &#x27;AOF_ON&#x27;, It will do two things:</span></span><br><span class="line"><span class="comment"> * 1. Open a new INCR type AOF for writing</span></span><br><span class="line"><span class="comment"> * 2. Synchronously update the manifest file to the disk</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The above two steps of modification are atomic, that is, if</span></span><br><span class="line"><span class="comment"> * any step fails, the entire operation will rollback and returns</span></span><br><span class="line"><span class="comment"> * C_ERR, and if all succeeds, it returns C_OK.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * If `server.aof_state` is &#x27;AOF_WAIT_REWRITE&#x27;, It will open a temporary INCR AOF </span></span><br><span class="line"><span class="comment"> * file to accumulate data during AOF_WAIT_REWRITE, and it will eventually be </span></span><br><span class="line"><span class="comment"> * renamed in the `backgroundRewriteDoneHandler` and written to the manifest file.</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">openNewIncrAofForAppend</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    serverAssert(server.aof_manifest != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">int</span> newfd = <span class="number">-1</span>;</span><br><span class="line">    aofManifest *temp_am = <span class="literal">NULL</span>;</span><br><span class="line">    sds new_aof_name = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Only open new INCR AOF when AOF enabled. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_state == AOF_OFF) <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Open new AOF. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_state == AOF_WAIT_REWRITE) &#123;</span><br><span class="line">        <span class="comment">/* Use a temporary INCR AOF file to accumulate data during AOF_WAIT_REWRITE. */</span></span><br><span class="line">        new_aof_name = getTempIncrAofName();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Dup a temp aof_manifest to modify. */</span></span><br><span class="line">        temp_am = aofManifestDup(server.aof_manifest);</span><br><span class="line">        new_aof_name = sdsdup(getNewIncrAofName(temp_am));</span><br><span class="line">    &#125;</span><br><span class="line">    sds new_aof_filepath = makePath(server.aof_dirname, new_aof_name);</span><br><span class="line">    newfd = open(new_aof_filepath, O_WRONLY|O_TRUNC|O_CREAT, <span class="number">0644</span>);</span><br><span class="line">    sdsfree(new_aof_filepath);</span><br><span class="line">    <span class="keyword">if</span> (newfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">&quot;Can&#x27;t open the append-only file %s: %s&quot;</span>,</span><br><span class="line">            new_aof_name, strerror(errno));</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (temp_am) &#123;</span><br><span class="line">        <span class="comment">/* Persist AOF Manifest. */</span></span><br><span class="line">        <span class="keyword">if</span> (persistAofManifest(temp_am) == C_ERR) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serverLog(LL_NOTICE, <span class="string">&quot;Creating AOF incr file %s on background rewrite&quot;</span>,</span><br><span class="line">            new_aof_name);</span><br><span class="line">    sdsfree(new_aof_name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If reaches here, we can safely modify the `server.aof_manifest`</span></span><br><span class="line"><span class="comment">     * and `server.aof_fd`. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fsync and close old aof_fd if needed. In fsync everysec it&#x27;s ok to delay</span></span><br><span class="line"><span class="comment">     * the fsync as long as we grantee it happens, and in fsync always the file</span></span><br><span class="line"><span class="comment">     * is already synced at this point so fsync doesn&#x27;t matter. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fd != <span class="number">-1</span>) &#123;</span><br><span class="line">        aof_background_fsync_and_close(server.aof_fd);</span><br><span class="line">        server.aof_last_fsync = server.unixtime;</span><br><span class="line">    &#125;</span><br><span class="line">    server.aof_fd = newfd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Reset the aof_last_incr_size. */</span></span><br><span class="line">    server.aof_last_incr_size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* Reset the aof_last_incr_fsync_offset. */</span></span><br><span class="line">    server.aof_last_incr_fsync_offset = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* Update `server.aof_manifest`. */</span></span><br><span class="line">    <span class="keyword">if</span> (temp_am) aofManifestFreeAndUpdate(temp_am);</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">cleanup:</span><br><span class="line">    <span class="keyword">if</span> (new_aof_name) sdsfree(new_aof_name);</span><br><span class="line">    <span class="keyword">if</span> (newfd != <span class="number">-1</span>) close(newfd);</span><br><span class="line">    <span class="keyword">if</span> (temp_am) aofManifestFree(temp_am);</span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AOF重写的主逻辑</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Write a sequence of commands able to fully rebuild the dataset into</span></span><br><span class="line"><span class="comment"> * &quot;filename&quot;. Used both by REWRITEAOF and BGREWRITEAOF.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * In order to minimize the number of commands needed in the rewritten</span></span><br><span class="line"><span class="comment"> * log Redis uses variadic commands when possible, such as RPUSH, SADD</span></span><br><span class="line"><span class="comment"> * and ZADD. However at max AOF_REWRITE_ITEMS_PER_CMD items per time</span></span><br><span class="line"><span class="comment"> * are inserted using a single command. */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rewriteAppendOnlyFile</span><span class="params">(<span class="type">char</span> *filename)</span> &#123;</span><br><span class="line">    rio aof;</span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> tmpfile[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Note that we have to use a different temp name here compared to the</span></span><br><span class="line"><span class="comment">     * one used by rewriteAppendOnlyFileBackground() function. */</span></span><br><span class="line">    <span class="built_in">snprintf</span>(tmpfile,<span class="number">256</span>,<span class="string">&quot;temp-rewriteaof-%d.aof&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">    fp = fopen(tmpfile,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">&quot;Opening the temp file for AOF rewrite in rewriteAppendOnlyFile(): %s&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化aof为 文件io对象</span></span><br><span class="line">    rioInitWithFile(&amp;aof,fp);</span><br><span class="line">    <span class="comment">// 如果开启aof增量同步功能  防止在缓存中堆积太多命令，造成写入时的IO阻塞时长过长</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_rewrite_incremental_fsync) &#123;</span><br><span class="line">        <span class="comment">// 将自动同步的字节数限制为 REDIS_AUTOSYNC_BYTES， 默认4MB</span></span><br><span class="line">        rioSetAutoSync(&amp;aof,REDIS_AUTOSYNC_BYTES);</span><br><span class="line">        rioSetReclaimCache(&amp;aof,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 触发持久性模块启动事件</span></span><br><span class="line">    startSaving(RDBFLAGS_AOF_PREAMBLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在aof重写时，基础的aof重写使用rdb编码</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_use_rdb_preamble) &#123;</span><br><span class="line">        <span class="type">int</span> error;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rdbSaveRio(SLAVE_REQ_NONE,&amp;aof,&amp;error,RDBFLAGS_AOF_PREAMBLE,<span class="literal">NULL</span>) == C_ERR) &#123;</span><br><span class="line">            errno = error;</span><br><span class="line">            <span class="keyword">goto</span> werr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rewriteAppendOnlyFileRio(&amp;aof) == C_ERR) <span class="keyword">goto</span> werr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make sure data will not remain on the OS&#x27;s output buffers */</span></span><br><span class="line">    <span class="keyword">if</span> (fflush(fp)) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">if</span> (fsync(fileno(fp))) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">if</span> (reclaimFilePageCache(fileno(fp), <span class="number">0</span>, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">/* A minor error. Just log to know what happens */</span></span><br><span class="line">        serverLog(LL_NOTICE,<span class="string">&quot;Unable to reclaim page cache: %s&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fclose(fp)) &#123; fp = <span class="literal">NULL</span>; <span class="keyword">goto</span> werr; &#125;</span><br><span class="line">    fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use RENAME to make sure the DB file is changed atomically only</span></span><br><span class="line"><span class="comment">     * if the generate DB file is ok. */</span></span><br><span class="line">    <span class="keyword">if</span> (rename(tmpfile,filename) == <span class="number">-1</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING,<span class="string">&quot;Error moving temp append only file on the final destination: %s&quot;</span>, strerror(errno));</span><br><span class="line">        unlink(tmpfile);</span><br><span class="line">        <span class="comment">// REDISMODULE_SUBEVENT_PERSISTENCE_FAILED 失败</span></span><br><span class="line">        stopSaving(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// REDISMODULE_SUBEVENT_PERSISTENCE_ENDED 成功</span></span><br><span class="line">    stopSaving(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    serverLog(LL_WARNING,<span class="string">&quot;Write error writing append only file on disk: %s&quot;</span>, strerror(errno));</span><br><span class="line">    <span class="keyword">if</span> (fp) fclose(fp);</span><br><span class="line">    unlink(tmpfile);</span><br><span class="line">    stopSaving(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到，<code>redis5.0</code>之后，<code>aof_use_rdb_preamble = yes</code>服务器配置中配置了<code>aof_use_rdb_preamble</code>，指定在<code>aof</code>重写时基础aof写入时使用<code>rdb</code>编码；否则调用<code>rewriteAppendOnlyFileRio</code>完成文件写入。</p><p>对比一下差异：<a href="https://blog.csdn.net/Aquester/article/details/88550655">https://blog.csdn.net/Aquester/article/details/88550655</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rewriteAppendOnlyFileRio</span><span class="params">(rio *aof)</span> &#123;</span><br><span class="line">    dictIterator *di = <span class="literal">NULL</span>;</span><br><span class="line">    dictEntry *de;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="type">long</span> key_count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> updated_time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Record timestamp at the beginning of rewriting AOF. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_timestamp_enabled) &#123;</span><br><span class="line">        sds ts = genAofTimestampAnnotationIfNeeded(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (rioWrite(aof,ts,sdslen(ts)) == <span class="number">0</span>) &#123; sdsfree(ts); <span class="keyword">goto</span> werr; &#125;</span><br><span class="line">        sdsfree(ts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rewriteFunctions(aof) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class="line">        <span class="type">char</span> selectcmd[] = <span class="string">&quot;*2\r\n$6\r\nSELECT\r\n&quot;</span>;</span><br><span class="line">        redisDb *db = server.db+j;</span><br><span class="line">        dict *d = db-&gt;dict;</span><br><span class="line">        <span class="keyword">if</span> (dictSize(d) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        di = dictGetSafeIterator(d);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* SELECT the new DB */</span></span><br><span class="line">        <span class="keyword">if</span> (rioWrite(aof,selectcmd,<span class="keyword">sizeof</span>(selectcmd)<span class="number">-1</span>) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">        <span class="keyword">if</span> (rioWriteBulkLongLong(aof,j) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Iterate this DB writing every entry */</span></span><br><span class="line">        <span class="keyword">while</span>((de = dictNext(di)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            sds keystr;</span><br><span class="line">            robj key, *o;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> expiretime;</span><br><span class="line">            <span class="type">size_t</span> aof_bytes_before_key = aof-&gt;processed_bytes;</span><br><span class="line"></span><br><span class="line">            keystr = dictGetKey(de);</span><br><span class="line">            o = dictGetVal(de);</span><br><span class="line">            initStaticStringObject(key,keystr);</span><br><span class="line"></span><br><span class="line">            expiretime = getExpire(db,&amp;key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Save the key and associated value */</span></span><br><span class="line">            <span class="keyword">if</span> (o-&gt;type == OBJ_STRING) &#123;</span><br><span class="line">                <span class="comment">/* Emit a SET command */</span></span><br><span class="line">                <span class="type">char</span> cmd[]=<span class="string">&quot;*3\r\n$3\r\nSET\r\n&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (rioWrite(aof,cmd,<span class="keyword">sizeof</span>(cmd)<span class="number">-1</span>) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">                <span class="comment">/* Key and value */</span></span><br><span class="line">                <span class="keyword">if</span> (rioWriteBulkObject(aof,&amp;key) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">                <span class="keyword">if</span> (rioWriteBulkObject(aof,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_LIST) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteListObject(aof,&amp;key,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_SET) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteSetObject(aof,&amp;key,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_ZSET) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteSortedSetObject(aof,&amp;key,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_HASH) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteHashObject(aof,&amp;key,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_STREAM) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteStreamObject(aof,&amp;key,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_MODULE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteModuleObject(aof,&amp;key,o,j) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                serverPanic(<span class="string">&quot;Unknown object type&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* In fork child process, we can try to release memory back to the</span></span><br><span class="line"><span class="comment">             * OS and possibly avoid or decrease COW. We give the dismiss</span></span><br><span class="line"><span class="comment">             * mechanism a hint about an estimated size of the object we stored. */</span></span><br><span class="line">            <span class="type">size_t</span> dump_size = aof-&gt;processed_bytes - aof_bytes_before_key;</span><br><span class="line">            <span class="keyword">if</span> (server.in_fork_child) dismissObject(o, dump_size);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Save the expire time */</span></span><br><span class="line">            <span class="keyword">if</span> (expiretime != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="type">char</span> cmd[]=<span class="string">&quot;*3\r\n$9\r\nPEXPIREAT\r\n&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (rioWrite(aof,cmd,<span class="keyword">sizeof</span>(cmd)<span class="number">-1</span>) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">                <span class="keyword">if</span> (rioWriteBulkObject(aof,&amp;key) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">                <span class="keyword">if</span> (rioWriteBulkLongLong(aof,expiretime) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Update info every 1 second (approximately).</span></span><br><span class="line"><span class="comment">             * in order to avoid calling mstime() on each iteration, we will</span></span><br><span class="line"><span class="comment">             * check the diff every 1024 keys */</span></span><br><span class="line">            <span class="keyword">if</span> ((key_count++ &amp; <span class="number">1023</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> now = mstime();</span><br><span class="line">                <span class="keyword">if</span> (now - updated_time &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                    sendChildInfo(CHILD_INFO_TYPE_CURRENT_INFO, key_count, <span class="string">&quot;AOF rewrite&quot;</span>);</span><br><span class="line">                    updated_time = now;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Delay before next key if required (for testing) */</span></span><br><span class="line">            <span class="keyword">if</span> (server.rdb_key_save_delay)</span><br><span class="line">                debugDelay(server.rdb_key_save_delay);</span><br><span class="line">        &#125;</span><br><span class="line">        dictReleaseIterator(di);</span><br><span class="line">        di = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    <span class="keyword">if</span> (di) dictReleaseIterator(di);</span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述有几个点需要注意：</p><ol><li><code>sendChildInfo</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rioInitWithFile</span><span class="params">(rio *r, FILE *fp)</span> &#123;</span><br><span class="line">    *r = rioFileIO;</span><br><span class="line">    r-&gt;io.file.fp = fp;</span><br><span class="line">    r-&gt;io.file.buffered = <span class="number">0</span>;</span><br><span class="line">    r-&gt;io.file.autosync = <span class="number">0</span>;</span><br><span class="line">    r-&gt;io.file.reclaim_cache = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/redis/redis/blob/2495b90a647f9f9987202efd29647f81f217b8ad/src/rdb.c">1. rdb.c</a><br><a href="https://blog.csdn.net/men_wen/article/details/71248449">2. redis rdb源码阅读</a><br><a href="https://redisbook.readthedocs.io/en/latest/internal/aof.html">3. redis aof实现</a><br><a href="https://www.5ycode.com/article/1192.html">4. aof源码</a><br><a href="https://www.modb.pro/db/221416">5. aof流程</a><br><a href="https://www.modb.pro/db/610186">6. aof源码分析</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于redis是内存数据库，其数据库状态保存在内存中。redis中提供了持久化功能，用以将redis内存中的数据库状态保存在磁盘中，避免意外的数据丢失。&lt;/p&gt;
&lt;p&gt;Redis中提供了两种持久化方式，分别是&lt;code&gt;RDB&lt;/code&gt;和&lt;code&gt;AOF&lt;/code&gt;</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis之服务器</title>
    <link href="https://mqrayblog.cn/2023/07/23/redis%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://mqrayblog.cn/2023/07/23/redis%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2023-07-23T14:44:39.000Z</published>
    <updated>2023-09-05T10:54:39.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis服务器"><a href="#redis服务器" class="headerlink" title="redis服务器"></a>redis服务器</h2><p>redis服务器负责与多个客户端建立网络连接，处理客户端请求，在数据库中保存客户端执行命令所产生的数据，并通过资源管理来维持服务器的自身运转。<br>本文将应用侧和源码侧两个角度进行描述。</p><ol><li>服务器的功能：redis客户端发送命令后，服务器如何处理；</li><li>服务器源码结构中相关重要参数。</li></ol><h3 id="redis架构详解"><a href="#redis架构详解" class="headerlink" title="redis架构详解"></a>redis架构详解</h3><h4 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h4><h4 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h4><h4 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h4><h4 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h4><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>redis的慢查询日志功能用于记录执行时间超过设定时长的命令请求，用户可以通过这个功能那个产生的日志来监控和优化查询。<br>服务器配置中包含如下两个和慢查询有关的参数：</p><ol><li><code>slowlog-log-slower-than</code>： 执行时长超过多少微秒时，将命令记录到慢查询日志中；如果&#x3D;0，则表示将存储所有执行的日志。</li><li><code>slowlog-max-length</code>： 指定服务器能保存多少条慢查询日志。</li></ol><p>redisServer属性众多，现在来看下和慢查询相关的属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="built_in">list</span> *slowlog;                  <span class="comment">/* SLOWLOG list of commands */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> slowlog_entry_id;     <span class="comment">/* SLOWLOG current entry ID */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> slowlog_log_slower_than; <span class="comment">/* SLOWLOG time limit (to get logged) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> slowlog_max_len;     <span class="comment">/* SLOWLOG max number of items logged */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<br><code>slowlog_entry_id</code>表示当前慢查询的日志id。其初始值为0，当创建一条新的慢查询日志时，这个属性就会用作新日志的id，而后自增+1用作下一条日志的id。<br><code>slowlog</code>则保存了所有慢查询日志的链表，每次新增一个慢查询日志时，都会将新的放在链表头部，并且移除最早加入慢查询日志的entry。<br><code>slowlog_log_slower_than</code>即上述命令执行的标定时间，<br><code>slowlog-max-len</code>用以限制慢查询日志链表长度。</p><p>链表中的节点为<code>slowlogEntry</code>，其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slowlogEntry</span> &#123;</span></span><br><span class="line">    robj **argv; <span class="comment">// 节点命令的详细内容</span></span><br><span class="line">    <span class="type">int</span> argc; <span class="comment">// 参数个数</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> id;      <span class="comment">// 链表节点的唯一标识符</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> duration; <span class="comment">// 节点命令的执行时长，单位微秒</span></span><br><span class="line">    <span class="type">time_t</span> time;        <span class="comment">// 节点命令执行的unix时间</span></span><br><span class="line">    sds cname;          <span class="comment">// 节点命令的发起客户端</span></span><br><span class="line">    sds peerid;         <span class="comment">// 命令发起的客户端的网络地址</span></span><br><span class="line">&#125; slowlogEntry;</span><br></pre></td></tr></table></figure><p>如下是慢查询日志链表节点的示意图：<br><img src="/2023/07/23/redis%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/slowlog-entry.png"></p><p>在客户端可以使用<code>slowlog get</code>命令查看服务器保存的慢查询日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">123.122.228.34:6379&gt; slowlog get </span><br><span class="line"> 1) 1) (integer) 10</span><br><span class="line">    2) (integer) 1690086551</span><br><span class="line">    3) (integer) 66497</span><br><span class="line">    4) 1) &quot;geodist&quot;</span><br><span class="line">       2) &quot;citys&quot;</span><br><span class="line">       3) &quot;beijing&quot;</span><br><span class="line">       4) &quot;shanghai&quot;</span><br><span class="line">       5) &quot;km&quot;</span><br><span class="line">    5) &quot;123.122.42.170:44244&quot;</span><br><span class="line">    6) &quot;&quot;</span><br><span class="line"> 2) 1) (integer) 9</span><br><span class="line">    2) (integer) 1690049869</span><br><span class="line">    3) (integer) 10520</span><br><span class="line">    4) 1) &quot;INFO&quot;</span><br><span class="line">    5) &quot;123.122.42.134:54780&quot;</span><br><span class="line">    6) &quot;lettuce#ClusterTopologyRefresh&quot;</span><br><span class="line"> 3) 1) (integer) 8</span><br><span class="line">    2) (integer) 1690012734</span><br><span class="line">    3) (integer) 10706</span><br><span class="line">    4) 1) &quot;PING&quot;</span><br><span class="line">    5) &quot;123.122.228.37:43154&quot;</span><br><span class="line">    6) &quot;&quot;</span><br><span class="line"> 4) 1) (integer) 7</span><br><span class="line">    2) (integer) 1689999931</span><br><span class="line">    3) (integer) 11551</span><br><span class="line">    4) 1) &quot;PING&quot;</span><br><span class="line">    5) &quot;123.122.228.37:42252&quot;</span><br><span class="line">    6) &quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="初始化慢查询日志"><a href="#初始化慢查询日志" class="headerlink" title="初始化慢查询日志"></a>初始化慢查询日志</h4><p>服务器启动时，将会执行慢查询的初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">slowlogInit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    server.slowlog = listCreate();</span><br><span class="line">    server.slowlog_entry_id = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 释放慢查询列表中的元素，及相关内存空间</span></span><br><span class="line">    listSetFreeMethod(server.slowlog,slowlogFreeEntry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">slowlogFreeEntry</span><span class="params">(<span class="type">void</span> *septr)</span> &#123;</span><br><span class="line">    slowlogEntry *se = septr;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; se-&gt;argc; j++)</span><br><span class="line">        <span class="comment">// 将slowentry中保存的所有查询参数的引用计数值-1</span></span><br><span class="line">        decrRefCount(se-&gt;argv[j]);</span><br><span class="line">    <span class="comment">// 释放查询参数的指针数组空间</span></span><br><span class="line">    zfree(se-&gt;argv);</span><br><span class="line">    sdsfree(se-&gt;peerid);</span><br><span class="line">    sdsfree(se-&gt;cname);</span><br><span class="line">    <span class="comment">// 释放slowentry自身的空间</span></span><br><span class="line">    zfree(se);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加慢查询日志"><a href="#添加慢查询日志" class="headerlink" title="添加慢查询日志"></a>添加慢查询日志</h4><p>前面讲述过慢查询日志产生的条件，下面来看一下其源码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">slowlogPushEntryIfNeeded</span><span class="params">(client *c, robj **argv, <span class="type">int</span> argc, <span class="type">long</span> <span class="type">long</span> duration)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是否开启了慢查询日志</span></span><br><span class="line">    <span class="keyword">if</span> (server.slowlog_log_slower_than &lt; <span class="number">0</span>) <span class="keyword">return</span>; </span><br><span class="line">    <span class="comment">// 如果 该命令耗时大于设定值，则創建一个slowlogentry，并将其加入慢查询日志链表头部</span></span><br><span class="line">    <span class="keyword">if</span> (duration &gt;= server.slowlog_log_slower_than)</span><br><span class="line">        listAddNodeHead(server.slowlog,</span><br><span class="line">                        slowlogCreateEntry(c,argv,argc,duration));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断加入后的链表长度，如果超出链表长度的最大值，则删除最新入链的元素</span></span><br><span class="line">    <span class="keyword">while</span> (listLength(server.slowlog) &gt; server.slowlog_max_len)</span><br><span class="line">        listDelNode(server.slowlog,listLast(server.slowlog));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">slowlogEntry *<span class="title function_">slowlogCreateEntry</span><span class="params">(client *c, robj **argv, <span class="type">int</span> argc, <span class="type">long</span> <span class="type">long</span> duration)</span> &#123;</span><br><span class="line">    slowlogEntry *se = zmalloc(<span class="keyword">sizeof</span>(*se));</span><br><span class="line">    <span class="type">int</span> j, slargc = argc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (slargc &gt; SLOWLOG_ENTRY_MAX_ARGC) slargc = SLOWLOG_ENTRY_MAX_ARGC;</span><br><span class="line">    se-&gt;argc = slargc;</span><br><span class="line">    se-&gt;argv = zmalloc(<span class="keyword">sizeof</span>(robj*)*slargc);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; slargc; j++) &#123;</span><br><span class="line">        <span class="comment">// 判断命令参数是否超出额定值，因为命令参数过多对于服务器而言是无效的内存开销</span></span><br><span class="line">        <span class="keyword">if</span> (slargc != argc &amp;&amp; j == slargc<span class="number">-1</span>) &#123;</span><br><span class="line">            se-&gt;argv[j] = createObject(OBJ_STRING,</span><br><span class="line">                sdscatprintf(sdsempty(),<span class="string">&quot;... (%d more arguments)&quot;</span>,</span><br><span class="line">                argc-slargc+<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 命令参数中 字符串参数过长，则new一个额定长度的字符串</span></span><br><span class="line">            <span class="keyword">if</span> (argv[j]-&gt;type == OBJ_STRING &amp;&amp;</span><br><span class="line">                sdsEncodedObject(argv[j]) &amp;&amp;</span><br><span class="line">                sdslen(argv[j]-&gt;ptr) &gt; SLOWLOG_ENTRY_MAX_STRING)</span><br><span class="line">            &#123;</span><br><span class="line">                sds s = sdsnewlen(argv[j]-&gt;ptr, SLOWLOG_ENTRY_MAX_STRING);</span><br><span class="line"></span><br><span class="line">                s = sdscatprintf(s,<span class="string">&quot;... (%lu more bytes)&quot;</span>,</span><br><span class="line">                    (<span class="type">unsigned</span> <span class="type">long</span>)</span><br><span class="line">                    sdslen(argv[j]-&gt;ptr) - SLOWLOG_ENTRY_MAX_STRING);</span><br><span class="line">                se-&gt;argv[j] = createObject(OBJ_STRING,s);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[j]-&gt;refcount == OBJ_SHARED_REFCOUNT) &#123;</span><br><span class="line">                se-&gt;argv[j] = argv[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* Here we need to duplicate the string objects composing the</span></span><br><span class="line"><span class="comment">                 * argument vector of the command, because those may otherwise</span></span><br><span class="line"><span class="comment">                 * end shared with string objects stored into keys. Having</span></span><br><span class="line"><span class="comment">                 * shared objects between any part of Redis, and the data</span></span><br><span class="line"><span class="comment">                 * structure holding the data, is a problem: FLUSHALL ASYNC</span></span><br><span class="line"><span class="comment">                 * may release the shared string object and create a race. */</span></span><br><span class="line">                se-&gt;argv[j] = dupStringObject(argv[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置命令的执行时间</span></span><br><span class="line">    se-&gt;time = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 设置发生时间</span></span><br><span class="line">    se-&gt;duration = duration;</span><br><span class="line">    se-&gt;id = server.slowlog_entry_id++;</span><br><span class="line">    se-&gt;peerid = sdsnew(getClientPeerId(c));</span><br><span class="line">    se-&gt;cname = c-&gt;name ? sdsnew(c-&gt;name-&gt;ptr) : sdsempty();</span><br><span class="line">    <span class="keyword">return</span> se;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除慢查询日志"><a href="#删除慢查询日志" class="headerlink" title="删除慢查询日志"></a>删除慢查询日志</h4><p>遍历服务器的慢查询日志，如果存在，则逐条删除。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">slowlogReset</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (listLength(server.slowlog) &gt; <span class="number">0</span>)</span><br><span class="line">        listDelNode(server.slowlog,listLast(server.slowlog));</span><br></pre></td></tr></table></figure><p><code>listDelNode</code>方法定义在<code>src/adlist.c</code>中。</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>redis提供了两种持久化方式，对应的服务器配置如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/redis/redis/blob/unstable/src/slowlog.c#L137">1. redis slowlog.c</a><br><a href="https://www.cnblogs.com/mrhelloworld/p/redis-architecture.html">2. redis架构</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redis服务器&quot;&gt;&lt;a href=&quot;#redis服务器&quot; class=&quot;headerlink&quot; title=&quot;redis服务器&quot;&gt;&lt;/a&gt;redis服务器&lt;/h2&gt;&lt;p&gt;redis服务器负责与多个客户端建立网络连接，处理客户端请求，在数据库中保存客户端执行命令所</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis之特殊数据类型</title>
    <link href="https://mqrayblog.cn/2023/07/21/redis%E4%B9%8B%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://mqrayblog.cn/2023/07/21/redis%E4%B9%8B%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-07-20T17:26:45.000Z</published>
    <updated>2023-09-05T10:54:41.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h3><p><code>bitmap</code>即位图，是一种基于位运算的数据结构，用连续的二进制位描述某些业务，例如用户的签到状态等。<code>redis</code>中的string是二进制安全的，故而使用string来描述这个位图。<br>相比其他数据结构，位图所占用的存储空间非常小，在上述的业务场景，使用位图更加高效。<br><img src="/2023/07/21/redis%E4%B9%8B%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/bit-map.png"></p><p>Redis提供了<code>SETBIT</code>、<code>GETBIT</code> 、<code>BITCOUNT</code> 、<code>BITOP</code>四个命令，用于处理二进制数组</p><h4 id="SETBIT"><a href="#SETBIT" class="headerlink" title="SETBIT"></a>SETBIT</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETBIT key offset value </span><br></pre></td></tr></table></figure><p><code>SETBIT</code>用于将二进制数组在偏移量位置处的二进制值设置为value，当<code>key</code>不存在时，会自动生成一个新的字符串值。字符串会扩展以确保可以在offset位置上设置value值，当字符串扩展时，空白位置以0填充 offset&gt;&#x3D;0， 小于512M<br>注意对于较大的<code>OFFSET</code>值，命令执行过程中的内存分配可能阻塞redis服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; setbit bitmap 10086 1</span><br><span class="line">(integer) 0</span><br><span class="line">123.122.10.231:6379&gt; getbit bitmap 10086</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h5 id="setbit的执行过程"><a href="#setbit的执行过程" class="headerlink" title="setbit的执行过程"></a>setbit的执行过程</h5><ol><li>计算保存offset偏移量指定的二进制位至少需要多少个字节：<br> <code>len=[offset/8] + 1</code> 向下取整。</li><li>检查这个位图对应的<code>redisObject.ptr</code>指向的<code>sdshar</code>的len字段<br>是否小于步骤1中计算的len值，如果小于，则将sds的长度扩展为len字节，并将所有扩展空间的二进制位设置为0。</li><li>计算offset偏移量指定的二进制位保存在哪一个字节：<br><code>byte=offset/8</code>。</li><li>计算offset偏移量指定的二进制位在byte个字节中的第几个二进制位：<br><code>bit=offser%8 + 1</code>。</li><li>根据计算得出的byte和bit定位到二进制数组中offset的位置，将旧值存储在oldvalue中，并将其值修改为value指定的值。</li><li>最后，向客户端返回oldvalue的值。</li></ol><p>上述计算过程均可以在常数时间内完成，故而其时间复杂度为<code>O(1)</code></p><h4 id="GETBIT"><a href="#GETBIT" class="headerlink" title="GETBIT"></a>GETBIT</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GETBIT key offset </span><br></pre></td></tr></table></figure><p>获取二进制数组key指定偏移量offset处的值。当offset比字符串值的长度大或者key不存在时，返回0。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; getbit bitmap 10086</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h5 id="getbit的执行过程"><a href="#getbit的执行过程" class="headerlink" title="getbit的执行过程"></a>getbit的执行过程</h5><p>和<code>setbit</code>类似，核心就是计算<code>byte</code>和<code>bit</code>。命令执行过程如下：</p><ol><li>计算byte</li><li>计算bit</li><li>根据byte 和 bit定位到二进制数组中偏移量位置，读取该位置上的值</li></ol><p>上述过程的时间复杂度也为<code>O(1)</code></p><h4 id="BITCOUNT"><a href="#BITCOUNT" class="headerlink" title="BITCOUNT"></a>BITCOUNT</h4><p>此命令经常被用于统计用户上线次数等业务：<a href="http://redisdoc.com/bitmap/bitcount.html">模式：使用 bitmap 实现用户上线次数统计</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITCOUNT key [start] [end]</span><br></pre></td></tr></table></figure><p>计算给定字符串key中，被设置为1的比特位数量；也可以只计算start到stop指定的字节范围的二进制数组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; getbit bitmap 10086</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; bitcount bitmap</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; setbit bitmap 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">123.122.10.231:6379&gt; setbit bitmap 2 1</span><br><span class="line">(integer) 0</span><br><span class="line">123.122.10.231:6379&gt; bitcount bitmap</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h5 id="bitcount实现原理"><a href="#bitcount实现原理" class="headerlink" title="bitcount实现原理"></a>bitcount实现原理</h5><p>在数学上，统计一个二进制数组中，非0二进制位的数量，被称作<code>计算汉明重量</code>，该算法通过一系列位移和位运算操作，可以在常数时间内计算多个字节的汉明重量，并且不需要使用任何额外的内存。<br>参见<code>variable-precision swar</code>算法<br>redis使用查表法+swar实现：<br>redis中采用的实现源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Count number of bits set in the binary array pointed by &#x27;s&#x27; and long</span></span><br><span class="line"><span class="comment"> * &#x27;count&#x27; bytes. The implementation of this function is required to</span></span><br><span class="line"><span class="comment"> * work with an input string length up to 512 MB or more (server.proto_max_bulk_len) */</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">redisPopcount</span><span class="params">(<span class="type">void</span> *s, <span class="type">long</span> count)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *p = s;</span><br><span class="line">    <span class="type">uint32_t</span> *p4;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> bitsinbyte[<span class="number">256</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Count initial bytes not aligned to 32 bit. */</span></span><br><span class="line">    <span class="keyword">while</span>((<span class="type">unsigned</span> <span class="type">long</span>)p &amp; <span class="number">3</span> &amp;&amp; count) &#123;</span><br><span class="line">        bits += bitsinbyte[*p++];</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Count bits 28 bytes at a time */</span></span><br><span class="line">    p4 = (<span class="type">uint32_t</span>*)p;</span><br><span class="line">    <span class="keyword">while</span>(count&gt;=<span class="number">28</span>) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> aux1, aux2, aux3, aux4, aux5, aux6, aux7;</span><br><span class="line"></span><br><span class="line">        aux1 = *p4++;</span><br><span class="line">        aux2 = *p4++;</span><br><span class="line">        aux3 = *p4++;</span><br><span class="line">        aux4 = *p4++;</span><br><span class="line">        aux5 = *p4++;</span><br><span class="line">        aux6 = *p4++;</span><br><span class="line">        aux7 = *p4++;</span><br><span class="line">        count -= <span class="number">28</span>;</span><br><span class="line"></span><br><span class="line">        aux1 = aux1 - ((aux1 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux1 = (aux1 &amp; <span class="number">0x33333333</span>) + ((aux1 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux2 = aux2 - ((aux2 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux2 = (aux2 &amp; <span class="number">0x33333333</span>) + ((aux2 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux3 = aux3 - ((aux3 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux3 = (aux3 &amp; <span class="number">0x33333333</span>) + ((aux3 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux4 = aux4 - ((aux4 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux4 = (aux4 &amp; <span class="number">0x33333333</span>) + ((aux4 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux5 = aux5 - ((aux5 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux5 = (aux5 &amp; <span class="number">0x33333333</span>) + ((aux5 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux6 = aux6 - ((aux6 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux6 = (aux6 &amp; <span class="number">0x33333333</span>) + ((aux6 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux7 = aux7 - ((aux7 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux7 = (aux7 &amp; <span class="number">0x33333333</span>) + ((aux7 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        bits += ((((aux1 + (aux1 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux2 + (aux2 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux3 + (aux3 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux4 + (aux4 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux5 + (aux5 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux6 + (aux6 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux7 + (aux7 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>))* <span class="number">0x01010101</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Count the remaining bytes. */</span></span><br><span class="line">    p = (<span class="type">unsigned</span> <span class="type">char</span>*)p4;</span><br><span class="line">    <span class="keyword">while</span>(count--) bits += bitsinbyte[*p++];</span><br><span class="line">    <span class="keyword">return</span> bits;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BITOP"><a href="#BITOP" class="headerlink" title="BITOP"></a>BITOP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITOP operation destkey key [key …]</span><br></pre></td></tr></table></figure><p>对一个或多个二进制数组key进行元操作，并将结果保存到二进制数组destkey中。其中<code>operation</code>可以是<code>and</code>、<code>or</code>、<code>not</code>、<code>xor</code>中的任意一种，对应与或非、异或操作。</p><h3 id="hyperloglog"><a href="#hyperloglog" class="headerlink" title="hyperloglog"></a>hyperloglog</h3><p><code>hyperloglog</code>并非<code>redis</code>特有，它是一种基于统计的算法，用以计算大数据场景下统计基数的算法：<br>目前用于基数统计的算法包括：</p><ol><li>linear counting(LC): 早期的基数估算算法，时间复杂度是O(N)。</li><li>LogLog counting(LLC): 相比LC更节省内存，空间复杂度为O(log(log(N)))。</li><li>hyperloglog counting(HLLC): 是基于LLC的优化，在相同的空间复杂度下，比LLC的误差要小。</li></ol><p>其优点在于，在输入的元素数量或者所占空间非常大时，计算基数的空间开销非常少。每个<code>hyperloglog</code>键只需要花费12KB的内存，就可以计算<code>2^64</code>个不同元素的基数。<br>另外，它只会根据输入元素计算基数，不会存储元素本身，所以不能返回各个元素。</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 将任意数量的元素添加到指定的hyperloglog中</span><br><span class="line">PFADD key element [element …]</span><br><span class="line"></span><br><span class="line">// 返回在给定键的hyperloglog的近似基数，key不存在则返回0</span><br><span class="line">PFCOUNT key [key …]</span><br><span class="line"></span><br><span class="line">// 将多个hyperloglog 合并为 一个</span><br><span class="line">PFMERGE destkey sourcekey [sourcekey …]</span><br></pre></td></tr></table></figure><p><code>PFADD</code>命令的返回取决于执行命令后，<code>hyperloglog</code>估计的基数发生变化时，则返回1，否则返回0。命令不会一次性分配12K内存。[具体的扩展原则见源码]</p><p>如果该key值不存在，则先创建，再执行此命令。<br><code>PFCOUNT</code>返回的基数并不是精确值，而是带有一个<code>0.81%</code>标准错误的近似值。<br><code>PFMERGE</code>，将多个<code>hyperloglog</code>合并为一个，合并后的<code>htperloglog</code>的基数接近于所有输入的<code>hyperloglog</code>可见集合的并集。<br><code>hyperloglog</code>的源码实现主要参考 <code>P. Flajolet, Éric Fusy, O. Gandouet, and F. Meunier. Hyperloglog: The analysis of a near-optimal cardinality estimation algorithm</code></p><p>实际操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; PFADD  database  &quot;Redis&quot;  &quot;MongoDB&quot;  &quot;MySQL&quot;</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [246] located at 123.122.42.170:6379</span></span><br><span class="line">(integer) 1</span><br><span class="line">123.122.42.170:6379&gt; PFADD  database  &quot;PostgreSQL&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.42.170:6379&gt; PFCOUNT  database</span><br><span class="line">(integer) 4</span><br><span class="line">123.122.42.170:6379&gt; PFADD  database  &quot;PostgreSQL&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">123.122.42.170:6379&gt; PFCOUNT  database</span><br><span class="line">(integer) 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">123.122.42.170:6379&gt;  PFADD  nosql  &quot;Redis&quot;  &quot;MongoDB&quot;  &quot;Memcached&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.42.170:6379&gt; PFADD  RDBMS  &quot;MySQL&quot; &quot;MSSQL&quot; &quot;PostgreSQL&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.42.170:6379&gt;  PFMERGE  databases  nosql  RDBMS</span><br><span class="line">OK</span><br><span class="line">123.122.42.170:6379&gt;  PFCOUNT  databases</span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li>由于不需要保存数据内容+计算基数特别快，所以非常适合计算日活、月活数据</li></ol><h3 id="geo"><a href="#geo" class="headerlink" title="geo"></a>geo</h3><p>redis 3.2版本开始提供了<code>geo(地理信息定位)</code>功能，支持存储地理位置信息。</p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 将给定的空间元素加到指定的键中 [longitude latitude member]， 这些元素会以有序集合的形式被存储在键中</span><br><span class="line">GEOADD key longitude latitude member [longitude latitude member …]</span><br><span class="line"></span><br><span class="line">// 从key中获取 给定位置元素的位置，返回经纬度</span><br><span class="line">GEOPOS key member [member …]</span><br><span class="line"></span><br><span class="line">// 返回两个给定位置之间的距离 </span><br><span class="line">GEODIST key member1 member2 [unit]</span><br><span class="line"></span><br><span class="line">//  以给定的经纬度为中心，返回键中与中心点距离不超过最大距离的所有元素位置</span><br><span class="line">GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [ASC|DESC] [COUNT count]</span><br><span class="line"></span><br><span class="line">// 和GEORADIUS类似，不过是以键中元素作为圆心返回与之距离不超过最大距离的所有元素位置</span><br><span class="line">GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [ASC|DESC] [COUNT count]</span><br><span class="line"></span><br><span class="line">// 返回某元素位置的 geohash表示</span><br><span class="line">GEOHASH key member [member …]</span><br></pre></td></tr></table></figure><p><code>GEOADD</code>命令以标准(x,y)的形式接收输入参数，经度在前，纬度在后。另外，它能够记录的坐标是有限的，非常接近两级的区域无法被索引，精确的坐标限制为:</p><ol><li>有效的经度介于 -180 度至 180 度之间。</li><li>有效的纬度介于 -85.05112878 度至 85.05112878 度之间。<br>超出上述范围则会返回错误。</li></ol><p><code>GEODIST</code>命令中默认的单位为m，可选参数有：</p><ol><li>m，即米。</li><li>km，即千米。</li><li>mi， 即英里。</li><li>ft，即英尺。</li></ol><p><code>geohash</code>: 对于精度维度而言，<code>geohash</code>会将其编码为N位的二进制数，实际上就是通过N次分区实现。<br>对于某一位置元素，分别对其经度和维度进行编码，得到的两个二进制数，偶数位放置经度值，奇数为放置维度，最后使用base32进行编码即得到最后的输出。<br>这里要注意的是，geohash算法使用的是<code>peano空间填充曲线</code>，这种曲线会产生突变，会导致编码虽然相似，但其距离可能相差很大的问题。在实际应用中，需要先筛选相似<code>geohash</code>编码相似的点，然后计算实际距离。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">123.122.228.34:6379&gt; zrange citys 0 -1 withscores </span><br><span class="line"> 1) &quot;zhuhai&quot;</span><br><span class="line"> 2) &quot;4046325959374599&quot;</span><br><span class="line"> 3) &quot;guangzhou&quot;</span><br><span class="line"> 4) &quot;4046533892156333&quot;</span><br><span class="line"> 5) &quot;shenzhen&quot;</span><br><span class="line"> 6) &quot;4046615882282816&quot;</span><br><span class="line"> 7) &quot;shanghai&quot;</span><br><span class="line"> 8) &quot;4066919243534770&quot;</span><br><span class="line"> 9) &quot;beijing&quot;</span><br><span class="line">10) &quot;4069885649163649&quot;</span><br></pre></td></tr></table></figure><p><code>geo</code>中使用某种编码将经纬度设置为 对应 memeber 的 score。<br>故而，<code>GEOADD citys 116.41667 39.91667 &quot;beijing&quot;</code>命令等价于：<br><code>ZADD citys 4069885649163649 beijing</code>。</p><p>实际操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; GEOADD citys 116.41667 39.91667 &quot;beijing&quot; 121.43333 34.50000 &quot;shanghai&quot; 113.23333 23.16667 &quot;guangzhou&quot; 114.06667 22.61667 &quot;shenzhen&quot;   113.51667 22.30000 &quot;zhuhai&quot;</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [9558] located at 123.122.228.34:6379</span></span><br><span class="line">(integer) 5</span><br><span class="line">123.122.228.34:6379&gt; geopos citys beijing</span><br><span class="line">1) 1) &quot;116.41667157411575317&quot;</span><br><span class="line">   2) &quot;39.91667095273589183&quot;</span><br><span class="line">123.122.10.231:6379&gt; geodist citys beijing shanghai  km</span><br><span class="line">&quot;748.3469&quot;</span><br><span class="line">123.122.228.34:6379&gt; georadius citys 116 39 500 km</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">123.122.228.34:6379&gt; GEORADIUSBYMEMBER citys shanghai 1000 km</span><br><span class="line">1) &quot;shanghai&quot;</span><br><span class="line">2) &quot;beijing&quot;</span><br><span class="line">123.122.228.34:6379&gt; GEORADIUSBYMEMBER citys shanghai 2000  km</span><br><span class="line">1) &quot;zhuhai&quot;</span><br><span class="line">2) &quot;guangzhou&quot;</span><br><span class="line">3) &quot;shenzhen&quot;</span><br><span class="line">4) &quot;shanghai&quot;</span><br><span class="line">5) &quot;beijing&quot;</span><br><span class="line">123.122.228.34:6379&gt; GEOHASH citys shenzhen</span><br><span class="line">1) &quot;ws10ethzdh0&quot;</span><br><span class="line"></span><br><span class="line">123.122.228.34:6379&gt; type citys </span><br><span class="line">zset</span><br><span class="line">123.122.228.34:6379&gt; OBJECT encoding citys</span><br><span class="line">&quot;ziplist</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>适用于和位置相关的业务，例如附近的人、共享单车等。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://blog.csdn.net/qq_35190492/article/details/123467702">1. 详解redis bitmap</a><br><a href="https://github.com/redis/redis/blob/2495b90a647f9f9987202efd29647f81f217b8ad/src/hyperloglog.c">2. redis hyperloglog实现</a><br><a href="http://redisdoc.com/geo/georadius.html">3. redis geo命令参考</a><br><a href="https://www.cnblogs.com/LBSer/p/3310455.html">4. GeoHash核心原理解析</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;bitmap&quot;&gt;&lt;a href=&quot;#bitmap&quot; class=&quot;headerlink&quot; title=&quot;bitmap&quot;&gt;&lt;/a&gt;bitmap&lt;/h3&gt;&lt;p&gt;&lt;code&gt;bitmap&lt;/code&gt;即位图，是一种基于位运算的数据结构，用连续的二进制位描述某些业务，例如</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis之基础数据类型</title>
    <link href="https://mqrayblog.cn/2023/07/19/redis%E5%9F%BA%E7%A1%80/"/>
    <id>https://mqrayblog.cn/2023/07/19/redis%E5%9F%BA%E7%A1%80/</id>
    <published>2023-07-18T17:16:20.000Z</published>
    <updated>2023-09-05T10:55:31.523Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>redis是一个开源的、基于内存的存储结构[使用C语言编写]，通常被用于缓存、消息订阅等场景。</p></blockquote><p>redis的特点</p><ul><li>基于内存：redis借助RAM提供高速的数据访问，比磁盘要快几个量级</li></ul><h3 id="redis的基础数据类型"><a href="#redis的基础数据类型" class="headerlink" title="redis的基础数据类型"></a>redis的基础数据类型</h3><blockquote><p>redis是键值对数据库，redis中的键均为字符串，redis中最基础的五种数据类型：<code>string</code>、<code>lsit</code>、<code>set</code>、<code>zset</code>、<code>hash</code><br>redis中使用<code>redisObject</code>来描述所有的key和value，<code>redisObject</code>的结构体定义如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="comment">// 数据类型， 占4bit</span></span><br><span class="line">    <span class="type">unsigned</span> type:<span class="number">4</span>; </span><br><span class="line">    <span class="comment">// 编码格式 占4bit</span></span><br><span class="line">    <span class="type">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 此对象最后一次被访问的时间 占24bit</span></span><br><span class="line">    <span class="type">unsigned</span> lru:LRU_BITS; <span class="comment">/* LRU time (relative to global lru_clock) or</span></span><br><span class="line"><span class="comment">                            * LFU data (least significant 8 bits frequency</span></span><br><span class="line"><span class="comment">                            * and most significant 16 bits access time). */</span></span><br><span class="line">    <span class="comment">// 引用计数 </span></span><br><span class="line">    <span class="type">int</span> refcount;</span><br><span class="line">    <span class="comment">// 指向底层的数据实例的指针</span></span><br><span class="line">    <span class="type">void</span> *ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中， type 标识数据类型，占4个比特，encoding标识具体的编码格式，占4个比特，lru占24个字节，用以记录最近一次访问时间，refcount为引用计数，*ptr则指向底层的数据结构实现。</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>redisObject.type的取值如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The actual Redis Object */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_STRING 0    <span class="comment">/* String object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_LIST 1      <span class="comment">/* List object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_SET 2       <span class="comment">/* Set object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ZSET 3      <span class="comment">/* Sorted set object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_HASH 4      <span class="comment">/* Hash object. */</span></span></span><br></pre></td></tr></table></figure><p>在客户端中，可以使用<code>type</code>命令获取每种数据类型的类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">string</span></span><br><span class="line">182.168.168.226:6379&gt; set age 18</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [741] located at 182.168.106.129:6379</span></span><br><span class="line">OK</span><br><span class="line">182.168.106.129:6379&gt; type age </span><br><span class="line">string</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">list</span></span><br><span class="line">182.168.106.129:6379&gt; lpush friends a b c</span><br><span class="line">(integer) 3</span><br><span class="line">182.168.106.129:6379&gt; type friends </span><br><span class="line">list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span></span></span><br><span class="line">182.168.106.129:6379&gt; sadd ids 1 2 3 </span><br><span class="line">(integer) 3</span><br><span class="line">182.168.106.129:6379&gt; type ids</span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zset</span></span><br><span class="line">182.168.106.129:6379&gt; zadd info 100 mqray 90 lmq</span><br><span class="line">(integer) 2</span><br><span class="line">182.168.168.226:6379&gt; type info </span><br><span class="line">zset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> <span class="built_in">hash</span></span></span><br><span class="line">182.168.168.226:6379&gt; hset myhset name mqray</span><br><span class="line">(integer) 1</span><br><span class="line">182.168.50.160:6379&gt; type myhset</span><br><span class="line">hash</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h4><p>在客户端中，可以使用<code>object encoding key</code> 获取到对象所使用的编码格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">182.168.106.129:6379&gt; object encoding age</span><br><span class="line">&quot;int&quot;</span><br><span class="line">182.168.106.129:6379&gt; object encoding name</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [5798] located at 182.168.168.226:6379</span></span><br><span class="line">&quot;embstr&quot;</span><br><span class="line">182.168.168.226:6379&gt; object encoding friends</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [420] located at 182.168.106.129:6379</span></span><br><span class="line">&quot;quicklist&quot;</span><br><span class="line">182.168.50.160:6379&gt; object encoding ids</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [3296] located at 182.168.106.129:6379</span></span><br><span class="line">&quot;intset&quot;</span><br><span class="line">182.168.106.129:6379&gt; object encoding info</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [5642] located at 182.168.168.226:6379</span></span><br><span class="line">&quot;ziplist&quot;</span><br><span class="line">182.168.168.226:6379&gt; object encoding myhset</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [13092] located at 182.168.50.160:6379</span></span><br><span class="line">&quot;ziplist&quot;</span><br></pre></td></tr></table></figure><p>redisObject.encoding取值如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Objects encoding. Some kind of objects like Strings and Hashes can be</span></span><br><span class="line"><span class="comment"> * internally represented in multiple ways. The &#x27;encoding&#x27; field of the object</span></span><br><span class="line"><span class="comment"> * is set to one of this fields for this object. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_RAW 0     <span class="comment">/* Raw representation */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_INT 1     <span class="comment">/* Encoded as integer */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_HT 2      <span class="comment">/* Encoded as hash table */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_ZIPMAP 3  <span class="comment">/* No longer used: old hash encoding. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_LINKEDLIST 4 <span class="comment">/* No longer used: old list encoding. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_ZIPLIST 5 <span class="comment">/* No longer used: old list/hash/zset encoding. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_INTSET 6  <span class="comment">/* Encoded as intset */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_SKIPLIST 7  <span class="comment">/* Encoded as skiplist */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_EMBSTR 8  <span class="comment">/* Embedded sds string encoding */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_QUICKLIST 9 <span class="comment">/* Encoded as linked list of listpacks */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_STREAM 10 <span class="comment">/* Encoded as a radix tree of listpacks */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_LISTPACK 11 <span class="comment">/* Encoded as a listpack */</span></span></span><br></pre></td></tr></table></figure><p>在redis中，对于每种数据类型<code>type</code>，对用有多种编码<code>encoding</code>实现， 其映射关系如图所示：<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/redis-type-encoding.png"></p><p>redis可以根据不同的使用场景来对对象使用不同的编码，大大提高的redis的灵活性和效率.</p><h5 id="类型检查与命令多态"><a href="#类型检查与命令多态" class="headerlink" title="类型检查与命令多态"></a>类型检查与命令多态</h5><h5 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h5><h5 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h5><h4 id="lru"><a href="#lru" class="headerlink" title="lru"></a>lru</h4><p>记录了此对象最后一次被命令程序访问的时间。用当前时间减去lru即为此对象的空转时长。可以使用 <code>object idletime</code>获取对象的空转时长。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">182.168.50.160:6379&gt; object idletime friends</span><br><span class="line">(integer) 108</span><br></pre></td></tr></table></figure><p>如果服务器开启了<code>maxmemory</code>选项，且服务器所使用的内存回收算法为<code>volatile-lru</code>或者<code>allkeys-lru</code>时，当服务器所使用的内存超出<code>maxmemory</code>设定的上限时，服务器会优先释放空转时长高的数据库键，以此回收内存。<br>其中，redis所使用的内存淘汰策略配置包括如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><span class="line"><span class="meta"># is reached. You can select one from the following behaviors:</span></span><br><span class="line">#</span><br><span class="line"><span class="meta"># volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.</span></span><br><span class="line"><span class="meta"># allkeys-lru -&gt; Evict any key using approximated LRU.</span></span><br><span class="line"><span class="meta"># volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.</span></span><br><span class="line"><span class="meta"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span></span><br><span class="line"><span class="meta"># volatile-random -&gt; Remove a random key having an expire set.</span></span><br><span class="line"><span class="meta"># allkeys-random -&gt; Remove a random key, any key.</span></span><br><span class="line"><span class="meta"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="meta"># noeviction -&gt; Don<span class="string">&#x27;t evict anything, just return an error on write operations.</span></span></span><br></pre></td></tr></table></figure><p>通过配置<code>maxmemory-policy</code>以调整内存回收策略，默认值为<code>noeviction</code>，即不回收</p><h4 id="refcount"><a href="#refcount" class="headerlink" title="refcount"></a>refcount</h4><ul><li>当新创建一个对象时，该对象的<code>refcount</code>属性被设置为1；</li><li>当对一个对象共享时，该对象的<code>refcount</code>属性 +1；</li><li>消除一个对象引用后，该对象的<code>refcount</code>属性 -1；</li><li>当对象的<code>refcount</code>为0时，此<code>redisObject</code>及它指向的数据结构的内存将被释放。</li></ul><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string 类型是二进制安全的，可以用于存储任何数据。所谓的二进制安全，是指该二进制在写入时是什么样的，读取时就是怎样。反例就是c语言中字符串默认以<code>\0</code>结尾，而读取时不显示末尾的<code>\0</code></p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br><span class="line">// 为多个键设置值</span><br><span class="line">mset key value [key value]</span><br><span class="line">// 只有在key不尊在的情况下将key的值设置为value</span><br><span class="line">setnx key value </span><br><span class="line">// 将键key的值设置为value，并将key的过期时间设置为 seconds；如果key已存在，则覆盖已有值</span><br><span class="line">setex key seconds value </span><br><span class="line"></span><br><span class="line">// 以毫秒形式设置key的过期时间</span><br><span class="line">psetex key millseconds value</span><br><span class="line"></span><br><span class="line">// 获取key对应的值，不存在返回nil</span><br><span class="line">get key</span><br><span class="line">// 获取过期时间</span><br><span class="line">ttl key </span><br><span class="line"></span><br><span class="line">// 返回key对应值的字符串长度， key不存在时返回0； key对应值不为string时，返回错误</span><br><span class="line">strlen key</span><br><span class="line">// 如果key对应值是字符串，则将value追加到键的末尾，返回追加之后键key的值的长度</span><br><span class="line">append key value</span><br><span class="line"></span><br><span class="line">// 如果键key的值为int，则+1；如果不存在则先初始化为0，在执行incr；如果不为int，返回错误</span><br><span class="line">incr key</span><br><span class="line">// key 是int时，增量修改</span><br><span class="line">incrby key increment</span><br><span class="line">// 为键key存储的值加上浮点数increment</span><br><span class="line">incrbyfloat key increment</span><br></pre></td></tr></table></figure><h4 id="sds-简单动态字符串"><a href="#sds-简单动态字符串" class="headerlink" title="sds 简单动态字符串"></a>sds 简单动态字符串</h4><p>尽管redis由c实现，但是redis中并未使用cyuyan中的string，而是使用其封装作为redis中的字符串实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// buf 中已占用空间的长度</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="comment">// buf 中剩余可用空间的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">free</span>;</span><br><span class="line">    <span class="comment">// 数据空间</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在redis3.2之后，为了更好地内存优化，<code>sdshdr</code>又被分为如下几种：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *sds;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Note: sdshdr5 is never used, we just access the flags byte directly.</span></span><br><span class="line"><span class="comment"> * However is here to document the layout of type 5 SDS strings. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr5</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, and 5 msb of string length */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr8</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint8_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr16</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint16_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr32</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint32_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr64</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint64_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="type-1"><a href="#type-1" class="headerlink" title="type"></a>type</h4><p>string 对应的 数据类型为 string</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; type long</span><br><span class="line">string</span><br><span class="line">182.168.168.226:6379&gt; type name</span><br><span class="line">string</span><br><span class="line">182.168.168.226:6379&gt; type age</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h4 id="encoding-1"><a href="#encoding-1" class="headerlink" title="encoding"></a>encoding</h4><p>string类型对应三种编码格式，分别为<code>embstr</code>、<code>int</code>、<code>raw</code></p><h5 id="int"><a href="#int" class="headerlink" title="int"></a>int</h5><p>如果一个字符串对象保存的是整数值，且这个整数值可以用long类型标识，那么此字符串对象会将这个整数值保存在<code>redisObject.*ptr</code>中，并将<code>encoding</code>设置为<code>int</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; set age 18</span><br><span class="line">OK</span><br><span class="line">182.168.106.129:6379&gt; object encoding age</span><br><span class="line">&quot;int&quot;</span><br></pre></td></tr></table></figure><p>对应的redisObject如图所示：<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/string-int.png"></p><h5 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h5><p>如果该字符串的长度大于44个字节，则将其对象编码设置为<code>raw</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">182.168.106.129:6379&gt; set long org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert</span><br><span class="line">OK</span><br><span class="line">182.168.106.129:6379&gt; strlen long</span><br><span class="line">(integer) 83</span><br><span class="line">182.168.168.226:6379&gt; object encoding long</span><br><span class="line">&quot;raw&quot;</span><br></pre></td></tr></table></figure><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/string-raw.png"><h5 id="embstr"><a href="#embstr" class="headerlink" title="embstr"></a>embstr</h5><p>如果该字符串的长度小于等于44个字节，将使用<code>embstr</code>编码方式保存这个字符串值<br>embstr是专门用于保存短字符串的编码方式，和raw一样使用redisObject和sdshdr结构标识字符串对象，但是raw会调用两次内存分配函数分别创建redisObject和sdshdr结构，而embstr则只需要调用一次内存分配函数分配一块连续的空间，空间中依次包含redisObject和sdshdr。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10.65.196.57:32084&gt; set name mqray</span><br><span class="line">OK</span><br><span class="line">182.168.168.226:6379&gt; strlen name</span><br><span class="line">(integer) 5</span><br><span class="line">182.168.50.160:6379&gt; object encoding name</span><br><span class="line">&quot;embstr&quot;</span><br></pre></td></tr></table></figure><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/string-embstr.png"><h5 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h5><p>int、embstr编码的字符串在条件满足的情况下会被转化为raw编码的字符串<br>原先值为<code>int</code>的对象，在执行诸如<code>append key value</code>后将会变为<code>raw</code>编码的对象。且不会变为<code>embstr</code>编码的对象，因为redis没有提供embstr编码字符串的修改程序。<br>原先为<code>embstr</code>编码的对象，执行命令时，会先将对象修改为<code>raw</code>编码的字符串，再执行修改命令。</p><h4 id="字符串分配源码"><a href="#字符串分配源码" class="headerlink" title="字符串分配源码"></a>字符串分配源码</h4><p>创建字符串对象时，会根据字符串对象的长度来使用不同的函数来创建。字符串长度大于44字节时，使用<code>createRawStringObject</code>创建，否则使用<code>createEmbeddedStringObject</code>创建。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_EMBSTR_SIZE_LIMIT 44</span></span><br><span class="line">robj *<span class="title function_">createStringObject</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= OBJ_ENCODING_EMBSTR_SIZE_LIMIT)</span><br><span class="line">        <span class="keyword">return</span> createEmbeddedStringObject(ptr,len);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> createRawStringObject(ptr,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>createEmbeddedStringObject</code>函数源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Create a string object with encoding OBJ_ENCODING_EMBSTR, that is</span></span><br><span class="line"><span class="comment"> * an object where the sds string is actually an unmodifiable string</span></span><br><span class="line"><span class="comment"> * allocated in the same chunk as the object itself. */</span></span><br><span class="line">robj *<span class="title function_">createEmbeddedStringObject</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    robj *o = zmalloc(<span class="keyword">sizeof</span>(robj)+<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr8)+len+<span class="number">1</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sdshdr8</span> *<span class="title">sh</span> =</span> (<span class="type">void</span>*)(o+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    o-&gt;type = OBJ_STRING;</span><br><span class="line">    o-&gt;encoding = OBJ_ENCODING_EMBSTR;</span><br><span class="line">    o-&gt;ptr = sh+<span class="number">1</span>;</span><br><span class="line">    o-&gt;refcount = <span class="number">1</span>;</span><br><span class="line">    o-&gt;lru = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    sh-&gt;len = len;</span><br><span class="line">    sh-&gt;alloc = len;</span><br><span class="line">    sh-&gt;flags = SDS_TYPE_8;</span><br><span class="line">    <span class="keyword">if</span> (ptr == SDS_NOINIT)</span><br><span class="line">        sh-&gt;buf[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ptr) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(sh-&gt;buf,ptr,len);</span><br><span class="line">        sh-&gt;buf[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">memset</span>(sh-&gt;buf,<span class="number">0</span>,len+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createRawStringObject</code>函数内部通过调用<code>createObject</code>函数创建字符串对象，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Create a string object with encoding OBJ_ENCODING_RAW, that is a plain</span></span><br><span class="line"><span class="comment"> * string object where o-&gt;ptr points to a proper sds string. */</span></span><br><span class="line">robj *<span class="title function_">createRawStringObject</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createObject(OBJ_STRING, sdsnewlen(ptr,len));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">robj *<span class="title function_">createObject</span><span class="params">(<span class="type">int</span> type, <span class="type">void</span> *ptr)</span> &#123;</span><br><span class="line">    robj *o = zmalloc(<span class="keyword">sizeof</span>(*o));</span><br><span class="line">    o-&gt;type = type;</span><br><span class="line">    o-&gt;encoding = OBJ_ENCODING_RAW;</span><br><span class="line">    o-&gt;ptr = ptr;</span><br><span class="line">    o-&gt;refcount = <span class="number">1</span>;</span><br><span class="line">    o-&gt;lru = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="redis内存管理基石-zmalloc-埋点预留"><a href="#redis内存管理基石-zmalloc-埋点预留" class="headerlink" title="redis内存管理基石 zmalloc [埋点预留]"></a>redis内存管理基石 zmalloc [埋点预留]</h4><p><a href="https://blog.csdn.net/guodongxiaren/article/details/44747719">redis内存管理基石</a></p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>redis使用c语言实现，没有内置链表数据结构，redis使用双向链表实现了链表，可以将元素添加到列表头部或者尾部。</p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><p>常见的list操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 将一个值或多个值的value插入到 列表键key的表头；如果key不存在，则创建后执行lpush；如果不是list类型，则返回错误</span><br><span class="line">lpush key value [value...]</span><br><span class="line"></span><br><span class="line">// 当key存在，且type为list时，将value插入到列表键key的表头，命令执行后返回列表长度；</span><br><span class="line">lpushx key value</span><br><span class="line"></span><br><span class="line">// 将一个值或多个值插入到列表尾部</span><br><span class="line">rpush key value [value...]</span><br><span class="line"></span><br><span class="line">// 将value插入到列表键的表尾</span><br><span class="line">rpushx key value</span><br><span class="line"></span><br><span class="line">// 移除key的表头元素</span><br><span class="line">lpop key </span><br><span class="line"></span><br><span class="line">// 移除key的表尾元素</span><br><span class="line"> rpop key</span><br><span class="line"></span><br><span class="line"> //  返回列表长度</span><br><span class="line"> llen key</span><br><span class="line"></span><br><span class="line">// 返回 列表key中，下标为index的元素，0代表第一个元素</span><br><span class="line">lindex key index</span><br><span class="line"></span><br><span class="line">// 返回列表 key 中指定区间的元素，0为第一个，-1为最后一个</span><br><span class="line">lrange key start stop</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">182.168.50.160:6379&gt; lpush char a b c d e f</span><br><span class="line">(integer) 6</span><br><span class="line">182.168.168.226:6379&gt; LRANGE char 0 -1 </span><br><span class="line">1) &quot;f&quot;</span><br><span class="line">2) &quot;e&quot;</span><br><span class="line">3) &quot;d&quot;</span><br><span class="line">4) &quot;c&quot;</span><br><span class="line">5) &quot;b&quot;</span><br><span class="line">6) &quot;a&quot;</span><br><span class="line">182.168.168.226:6379&gt; OBJECT encoding char</span><br><span class="line">&quot;quicklist&quot;</span><br><span class="line">182.168.168.226:6379&gt; llen char</span><br><span class="line">(integer) 6</span><br><span class="line">182.168.168.226:6379&gt; lpop key 1</span><br><span class="line">(nil)</span><br><span class="line">182.168.50.160:6379&gt; lpop char </span><br><span class="line">&quot;f&quot;</span><br><span class="line">182.168.168.226:6379&gt; llen char </span><br><span class="line">(integer) 5</span><br><span class="line">182.168.168.226:6379&gt; rpop char</span><br><span class="line">&quot;a&quot;</span><br><span class="line">182.168.168.226:6379&gt; llen char  </span><br><span class="line">(integer) 4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="type-2"><a href="#type-2" class="headerlink" title="type"></a>type</h4><p>redis中，列表对象对应的<code>redisObject</code>中type为<code>list</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; type char </span><br><span class="line">list</span><br></pre></td></tr></table></figure><h4 id="encoding-2"><a href="#encoding-2" class="headerlink" title="encoding"></a>encoding</h4><p>redis 3.2之前，列表对象采用的编码方式为 <code>ziplist</code>和<code>linkedlsit</code>，数据量小时使用ziplist，数据量大时则使用linkedlist。<br>由于链表的附加空间相对较高，prev和next指针占用16字节，每个节点的内存单独分配，会加剧内存的碎片化，影响内存管理效率。<br>后续的版本中，则使用<code>quicklist</code>替代了<code>ziplist</code>和<code>linkedlsit</code>。[为什么有这种优化?]</p><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/list-linkedlist-ziplist.png"><h5 id="ziplist"><a href="#ziplist" class="headerlink" title="ziplist"></a>ziplist</h5><p>压缩列表时为了节约内存而设计，由一系列页数编码的连续内存块组成的顺序型数据结构，一个压缩列表可以包含任意数量节点，每个节点可以保存一个字节数组或者整数值。<br>压缩链表的组成如下：<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/ziplist.png"></p><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/ziplist-2.png">- zlbytes：整个 ziplist 占用的内存字节数- zltail：到达 ziplist 表尾节点的偏移量- zllen：ziplist 中节点的数量- entryX： ziplist 所保存的节点- zlend： 用于标记 ziplist 的末端<h5 id="linkedlsit"><a href="#linkedlsit" class="headerlink" title="linkedlsit"></a>linkedlsit</h5><h5 id="quicklist"><a href="#quicklist" class="headerlink" title="quicklist"></a>quicklist</h5><p>quicklist实际上是ziplist和linkedlist的混合体，将linkedlist按段区分，每个节点使用ziplist来紧凑存储，多个ziplist之间使用双向指针相连。<br>在64位机器上占用40个字节<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/list-quickList.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* quicklist is a 40 byte struct (on 64-bit systems) describing a quicklist.</span></span><br><span class="line"><span class="comment"> * &#x27;count&#x27; is the number of total entries.</span></span><br><span class="line"><span class="comment"> * &#x27;len&#x27; is the number of quicklist nodes.</span></span><br><span class="line"><span class="comment"> * &#x27;compress&#x27; is: 0 if compression disabled, otherwise it&#x27;s the number</span></span><br><span class="line"><span class="comment"> *                of quicklistNodes to leave uncompressed at ends of quicklist.</span></span><br><span class="line"><span class="comment"> * &#x27;fill&#x27; is the user-requested (or default) fill factor.</span></span><br><span class="line"><span class="comment"> * &#x27;bookmarks are an optional feature that is used by realloc this struct,</span></span><br><span class="line"><span class="comment"> *      so that they don&#x27;t consume memory when not used. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quicklist</span> &#123;</span></span><br><span class="line">    quicklistNode *head;</span><br><span class="line">    quicklistNode *tail;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> count;        <span class="comment">/* total count of all entries in all listpacks */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> len;          <span class="comment">/* number of quicklistNodes */</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> fill : QL_FILL_BITS;       <span class="comment">/* fill factor for individual nodes */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> compress : QL_COMP_BITS; <span class="comment">/* depth of end nodes not to compress;0=off */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bookmark_count: QL_BM_BITS;</span><br><span class="line">    quicklistBookmark bookmarks[];</span><br><span class="line">&#125; quicklist;</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line"><span class="comment">/* quicklistNode is a 32 byte struct describing a listpack for a quicklist.</span></span><br><span class="line"><span class="comment"> * We use bit fields keep the quicklistNode at 32 bytes.</span></span><br><span class="line"><span class="comment"> * count: 16 bits, max 65536 (max lp bytes is 65k, so max count actually &lt; 32k).</span></span><br><span class="line"><span class="comment"> * encoding: 2 bits, RAW=1, LZF=2.</span></span><br><span class="line"><span class="comment"> * container: 2 bits, PLAIN=1 (a single item as char array), PACKED=2 (listpack with multiple items).</span></span><br><span class="line"><span class="comment"> * recompress: 1 bit, bool, true if node is temporary decompressed for usage.</span></span><br><span class="line"><span class="comment"> * attempted_compress: 1 bit, boolean, used for verifying during testing.</span></span><br><span class="line"><span class="comment"> * extra: 10 bits, free for future use; pads out the remainder of 32 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quicklistNode</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">quicklistNode</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">quicklistNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *entry;</span><br><span class="line">    <span class="type">size_t</span> sz;             <span class="comment">/* entry size in bytes */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count : <span class="number">16</span>;     <span class="comment">/* count of items in listpack */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> encoding : <span class="number">2</span>;   <span class="comment">/* RAW==1 or LZF==2 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> container : <span class="number">2</span>;  <span class="comment">/* PLAIN==1 or PACKED==2 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> recompress : <span class="number">1</span>; <span class="comment">/* was this node previous compressed? */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> attempted_compress : <span class="number">1</span>; <span class="comment">/* node can&#x27;t compress; too small */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> dont_compress : <span class="number">1</span>; <span class="comment">/* prevent compression of entry that will be used later */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> extra : <span class="number">9</span>; <span class="comment">/* more bits to steal for future usage */</span></span><br><span class="line">&#125; quicklistNode;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* quicklistLZF is a 8+N byte struct holding &#x27;sz&#x27; followed by &#x27;compressed&#x27;.</span></span><br><span class="line"><span class="comment"> * &#x27;sz&#x27; is byte length of &#x27;compressed&#x27; field.</span></span><br><span class="line"><span class="comment"> * &#x27;compressed&#x27; is LZF data with total (compressed) length &#x27;sz&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> uncompressed length is stored in quicklistNode-&gt;sz.</span></span><br><span class="line"><span class="comment"> * When quicklistNode-&gt;entry is compressed, node-&gt;entry points to a quicklistLZF */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quicklistLZF</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span> sz; <span class="comment">/* LZF size in bytes*/</span></span><br><span class="line">    <span class="type">char</span> compressed[];</span><br><span class="line">&#125; quicklistLZF;</span><br></pre></td></tr></table></figure><h5 id="编码转换-1"><a href="#编码转换-1" class="headerlink" title="编码转换"></a>编码转换</h5><p>如果列表元素小于512个，且列表的每个元素的所占空间均小于64字节，redis则使用ziplist作为底层数据结构；<br>否则将使用 linkedlist作为底层实现。<br>上述列表元素值由<code>list-max-ziplist-entries</code>配置，所占空间由<code>list-max-ziplist-value</code>配置。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>列表被用于多种功能，比如列表键、发布订阅、慢查询、监视器等</p><p>消息队列： 消息队列必须满足三个要求 <code>消息顺序、处理重复的消息、保证消息可靠性</code><br>[不推荐，redis官方推荐使用stream]<br>使用<code>lpop+rpush</code>完成，反之亦可</p><ol><li>消息保序</li><li>如何处理重复数据</li><li>如何保证消息可靠性<br>参见： <a href="https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-2">如何保证消息可靠性</a></li></ol><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>redis中哈希用以存储字符串域和值之间的映射，通常被用来存储对象。</p><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 为字典key 设置field=key</span><br><span class="line">hset key field value</span><br><span class="line">// 仅当 field 不存在时设置</span><br><span class="line">hsetnx key field value</span><br><span class="line">// 批量设置</span><br><span class="line">hmset key field value [feild value]</span><br><span class="line">// 从hash对象中获取field的value</span><br><span class="line">hget key field</span><br><span class="line">// 获取多个field的值</span><br><span class="line">hmget key field [field2]</span><br><span class="line">// 判断 field 是否存在</span><br><span class="line">hexists key field</span><br><span class="line">// 删除field元素</span><br><span class="line">hdel key field</span><br><span class="line">// 获取key中 field个数</span><br><span class="line">hlen key</span><br><span class="line">hstrlen key field  </span><br><span class="line">// 如果field值为int类型，则将value + inc</span><br><span class="line">hincrby key field inc</span><br><span class="line">// 获取哈希表中所有的域</span><br><span class="line">hkeys key</span><br><span class="line">// 获取哈希表中所有的域的值</span><br><span class="line">hvals key</span><br><span class="line">// 获取整个哈希表的元素</span><br><span class="line">hgetall key</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; hset profile name mqray</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; hmset profile age 18 gender male </span><br><span class="line">OK</span><br><span class="line">123.122.10.231:6379&gt; hget profile name</span><br><span class="line">&quot;mqray&quot;</span><br><span class="line">123.122.10.231:6379&gt; hmget profile name gender </span><br><span class="line">1) &quot;mqray&quot;</span><br><span class="line">2) &quot;male&quot;</span><br><span class="line">123.122.10.231:6379&gt; HEXISTS profile name </span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; HEXISTS profile height</span><br><span class="line">(integer) 0</span><br><span class="line">123.122.10.231:6379&gt; hlen profile</span><br><span class="line">(integer) 3</span><br><span class="line">123.122.10.231:6379&gt; hincrby profile age 2</span><br><span class="line">(integer) 20</span><br><span class="line">123.122.10.231:6379&gt; hkeys profile</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">3) &quot;gender&quot;</span><br><span class="line">123.122.10.231:6379&gt; hgetall profile</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;mqray&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;20&quot;</span><br><span class="line">5) &quot;gender&quot;</span><br><span class="line">6) &quot;male&quot;</span><br></pre></td></tr></table></figure><h4 id="type-3"><a href="#type-3" class="headerlink" title="type"></a>type</h4><p>上述命令操作是哈希表的命令，使用<code>type</code>命令查看此对象的类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; type profile</span><br><span class="line">hash</span><br></pre></td></tr></table></figure><h4 id="encoding-3"><a href="#encoding-3" class="headerlink" title="encoding"></a>encoding</h4><p>哈希中采用两种编码格式：<code>ziplist</code>和<code>hashtable</code>。<br>上述哈希对象所采用的编码格式为<code>ziplist</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; object encoding profile </span><br><span class="line">&quot;ziplist&quot;</span><br></pre></td></tr></table></figure><h5 id="ziplist-1"><a href="#ziplist-1" class="headerlink" title="ziplist"></a>ziplist</h5><p><code>ziplist</code>译作压缩列表，其定义位于<code>redis/src/ziplist.h</code>中</p><h5 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h5><h5 id="编码转换-2"><a href="#编码转换-2" class="headerlink" title="编码转换"></a>编码转换</h5><p>当哈希对象同时满足如下两个条件时，使用ziplist编码。</p><ol><li>哈希对象保存的所有键值对和值的字符串长度都小于64字节。</li><li>哈希对象保存的字符串键值对数量少于512个。<br>否则使用<code>hashtable</code>编码。<br>如上参数分别由 <code>hash-max-listpack-valuE</code>和<code>hash-max-listpack-entries</code>两个参数控制。</li></ol><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p><a href="https://blog.csdn.net/qq_40399646/article/details/108925856">redis-hash使用场景</a></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set(集合)是redis中的无需字符串集合，添加、查找、删除的时间复杂度为O(1) [为什么时间复杂度是-1?]</p><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// </span><br><span class="line">sadd key value </span><br><span class="line">sismember key value </span><br><span class="line">spop key </span><br><span class="line">srandmember</span><br><span class="line">srem key value </span><br><span class="line">smove key value</span><br><span class="line">scard key</span><br><span class="line">smembers key</span><br><span class="line"></span><br><span class="line">// 求交集，如果其中key为空集则交集为空</span><br><span class="line">sinter key [key1]</span><br><span class="line"></span><br><span class="line">// 将 sinter key [key1] 求得的交集保存至 dest中</span><br><span class="line">sinterstore dest key [key1]</span><br><span class="line"></span><br><span class="line">// 并集</span><br><span class="line">sunion key [key1]</span><br><span class="line"></span><br><span class="line">// 将 sunion key [key1] 的结果保存至 dest， 如果dest存在，则覆盖</span><br><span class="line">sunionstore dest key [key1]</span><br><span class="line"></span><br><span class="line">// 返回差集</span><br><span class="line">sdiff key [key1] </span><br><span class="line"></span><br><span class="line">// 将 sdiff key [key1]  结果 保存至 dest</span><br><span class="line">sdiffstore dest key [key1]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; sadd dep xdr</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [3555] located at 182.168.106.129:6379</span></span><br><span class="line">(integer) 1</span><br><span class="line">182.168.106.129:6379&gt; sadd dep edr</span><br><span class="line">(integer) 1</span><br><span class="line">182.168.106.129:6379&gt; smembers dep</span><br><span class="line">1) &quot;xdr&quot;</span><br><span class="line">2) &quot;edr&quot;</span><br><span class="line">182.168.106.129:6379&gt; sadd dep af </span><br><span class="line">(integer) 1</span><br><span class="line">182.168.106.129:6379&gt; sadd dep cwpp</span><br><span class="line">(integer) 1</span><br><span class="line">182.168.50.160:6379&gt; SMEMBERS dep</span><br><span class="line">1) &quot;cwpp&quot;</span><br><span class="line">2) &quot;xdr&quot;</span><br><span class="line">3) &quot;af&quot;</span><br><span class="line">4) &quot;edr</span><br></pre></td></tr></table></figure><h4 id="encoding-4"><a href="#encoding-4" class="headerlink" title="encoding"></a>encoding</h4><p>集合对象采用的编码方式为<code>intset</code>或<code>hashtable</code><br>当使用<code>intset</code>编码作为集合对象的底层实现时，集合对象包含的所有元素都被保留在整数集合中。<br>而使用<code>hashtable</code>编码作为底层实现时，字典的每一个键都是一个字符串对象，每个字符串对象包含一个集合元素，其值则全部被设置为<code>NULL</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">182.168.106.129:6379&gt; type dep</span><br><span class="line">set</span><br><span class="line">182.168.106.129:6379&gt; OBJECT encoding dep</span><br><span class="line">&quot;hashtable&quot;</span><br></pre></td></tr></table></figure><p>如上设置的集合 dep， 其采用的编码即是<code>hashtable</code></p><h5 id="intset"><a href="#intset" class="headerlink" title="intset"></a>intset</h5><p>如下是一个使用<code>inset</code>编码的集合实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123.122.228.34:6379&gt; sadd nums 1 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">123.122.10.231:6379&gt; object encoding nums</span><br><span class="line">&quot;intset&quot;</span><br></pre></td></tr></table></figure><p><code>intset</code>的源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> encoding; <span class="comment">// 编码方式 </span></span><br><span class="line">    <span class="type">uint32_t</span> length; <span class="comment">// 集合包含的元素</span></span><br><span class="line">    <span class="type">int8_t</span> contents[]; <span class="comment">// 保存的元素数组</span></span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure><h5 id="hashtable-1"><a href="#hashtable-1" class="headerlink" title="hashtable"></a>hashtable</h5><h5 id="编码转换-3"><a href="#编码转换-3" class="headerlink" title="编码转换"></a>编码转换</h5><p>当集合set对象同时满足如下两个条件时，集合的底层实现为<code>intset</code>：</p><ol><li>集合保存的所有元素都是整数值</li><li>集合对象保存的元素数量不超过512个<br>任意一个条件不满足时，则使用<code>hashtable</code>编码。<br>其中第2点中的元素个数限制由 <code>set-max-intset-entries</code>限制，默认是512个元素。</li></ol><h4 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li>使用交并集获取共同好友等。</li><li></li></ol><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p><code>zset</code>即有序集合，和<code>set</code>一样，存储string类型的元素集合，不允许重复的元素。<code>zset</code>中的每一个元素都会关联一个<code>double</code>类型的<code>score</code>。redis通过<code>score</code>为集合中的成员进行从小到大的排列。</p><h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 将一个或多个memeber及其score加入到zset key中</span><br><span class="line">zadd key score member [score member...]</span><br><span class="line">// 获取zset 中 成员member的score</span><br><span class="line">zscore key member</span><br><span class="line">// 为有序集 key 的成员 member的score 值加上增量 inc</span><br><span class="line">zincrby key inc member </span><br><span class="line">// 返回有序集合 key 的基数</span><br><span class="line">zcard key</span><br><span class="line">// 返回有序集合中score值在min和max之间的元素个数</span><br><span class="line">zcount key min max</span><br><span class="line">// 返回有序集合，指定区间内的成员</span><br><span class="line">zrange key  start stop </span><br><span class="line">// 返回有序集合中member的排名，按score递增排列</span><br><span class="line">zrank key member </span><br><span class="line">// 移除语序集合中的一个或多个成员，不存在则忽略</span><br><span class="line">zrem key member [member]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; zadd rank 100 mqray 90 lmq </span><br><span class="line">(integer) 2</span><br><span class="line">123.122.10.231:6379&gt; zscore mqray</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;zscore&#x27; command</span><br><span class="line">123.122.10.231:6379&gt; zscore rank mqray</span><br><span class="line">&quot;100&quot;</span><br><span class="line">123.122.10.231:6379&gt; zincrby rank 100 mqray</span><br><span class="line">&quot;200&quot;</span><br><span class="line">123.122.10.231:6379&gt; zcard rank</span><br><span class="line">(integer) 2</span><br><span class="line">123.122.10.231:6379&gt; zadd rank lm 199</span><br><span class="line">(error) ERR value is not a valid float</span><br><span class="line">123.122.10.231:6379&gt; zadd rank 199 lm</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; zcard rank</span><br><span class="line">(integer) 3</span><br><span class="line">123.122.10.231:6379&gt; zcount rank </span><br><span class="line">123.122.10.231:6379&gt; zcount rank 100 200</span><br><span class="line">(integer) 2</span><br><span class="line">123.122.10.231:6379&gt; zrem rank lm</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; zrange rank 0 -1</span><br><span class="line">1) &quot;lmq&quot;</span><br><span class="line">2) &quot;mqray</span><br></pre></td></tr></table></figure><h4 id="type-4"><a href="#type-4" class="headerlink" title="type"></a>type</h4><p>上述的对象rank，其数据类型为<code>zset</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; type rank</span><br><span class="line">zset</span><br></pre></td></tr></table></figure><h4 id="encoding-5"><a href="#encoding-5" class="headerlink" title="encoding"></a>encoding</h4><p><code>zset</code>所采用两种编码方式，分别为：<code>ziplist</code>、<code>zskiplist</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zset</span> &#123;</span></span><br><span class="line">    dict *dict;</span><br><span class="line">    zskiplist *zsl;</span><br><span class="line">&#125; zset;</span><br></pre></td></tr></table></figure><h5 id="ziplist-2"><a href="#ziplist-2" class="headerlink" title="ziplist"></a>ziplist</h5><p>参见4.3.1的说明</p><h5 id="zskiplist"><a href="#zskiplist" class="headerlink" title="zskiplist"></a>zskiplist</h5><p>redis的跳表由<code>redis.h/zskiplistNode</code>和<code>redis.h/zskiplist</code>两个结构定义，其中：<br><code>zskiplistNode</code>表示跳跃表节点，<code>zskiplist</code>则用于保存跳跃表节点的相关信息，比如节点数量，指向prev和post节点的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> length;</span><br><span class="line">    <span class="type">int</span> level;</span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure><p><code>header</code>： 指向跳跃表的表头节点<br><code>tail</code>: 指向跳跃表的表尾节点<br><code>level</code>：记录跳跃表内，层数最大的那个节点的层数[表头节点的层数不计算在内]<br><code>length</code>: 记录跳跃表的长度，即目前跳跃表中包含的节点数量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line">    sds ele; </span><br><span class="line">    <span class="type">double</span> score; <span class="comment">// 分值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span> <span class="comment">// 后退指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span> <span class="comment">// 前进指针</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> span; <span class="comment">// 跨度</span></span><br><span class="line">    &#125; level[];</span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><p>如下是一个跳跃表实例：<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/zskiplist.png"></p><h5 id="编码转换-4"><a href="#编码转换-4" class="headerlink" title="编码转换"></a>编码转换</h5><p>当有序集合对象同时满足如下两个条件时，采用<code>ziplist</code>编码：</p><ol><li>有序集合对象保存的元素数量小于128个；</li><li>有序集合保存的所有元素的长度都小于64字节；<br>否则，使用<code>skiplist</code>编码。上述两个值分别由配置<code>zset-max-listpack-entries</code>和<code>zset-max-listpack-value</code>控制。</li></ol><h4 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li>排行榜： 比如按关注数、浏览量等进行排名比较。</li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://github.com/redis/redis/blob/4b1fbb233848379f4085ffca02a7e7ac32155db8/src/server.h#L899">1.redis.src.server.h</a><br><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-redis-object.html">2.对象机制讲解</a><br><a href="https://github.com/redis/redis/blob/9b1d4f003de1b141ea850f01e7104e7e5c670620/redis.conf">3.redis.conf</a><br><a href="http://redisdoc.com/string/mset.html">4. redis命令参考</a><br><a href="http://redisbook.com/preview/object/string.html">5. redis设计与实现</a><br><a href="https://github.com/redis/redis/blob/unstable/src/object.c#L43">6. redis.object.c</a><br><a href="https://github.com/redis/redis/blob/4b1fbb233848379f4085ffca02a7e7ac32155db8/src/sds.h#L4">7. redis.sds.h</a><br><a href="https://www.cnblogs.com/hunternet/p/12624691.html">8. redis快速链表</a><br><a href="https://github.com/redis/redis/blob/unstable/src/quicklist.h">9. redis.quicklist.h</a><br><a href="https://github.com/redis/redis/blob/4b1fbb233848379f4085ffca02a7e7ac32155db8/src/intset.h">10. redis.intset.h</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;redis是一个开源的、基于内存的存储结构[使用C语言编写]，通常被用于缓存、消息订阅等场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于内存：redis借助RAM提供高速的数据访问，比磁盘要快几个量</summary>
      
    
    
    
    <category term="databases" scheme="https://mqrayblog.cn/categories/databases/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>github + hexo建站[待补充]</title>
    <link href="https://mqrayblog.cn/2023/07/15/%E5%BB%BA%E7%AB%99/"/>
    <id>https://mqrayblog.cn/2023/07/15/%E5%BB%BA%E7%AB%99/</id>
    <published>2023-07-15T05:32:21.739Z</published>
    <updated>2023-08-18T00:44:43.347Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://www.suyuanblog.xyz/2021/10/14/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/">1. 预部署文件渲染失败解决方案</a><br><a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC%E9%AB%98%E5%BA%A6%E9%99%90%E5%88%B6">2. hexo butteryfly设置</a><br><a href="https://segmentfault.com/a/1190000042183952">3. 配置友链</a><br><a href="https://blog.csdn.net/qq_33384402/article/details/107200465">4. 接入博客</a><br><a href="https://blog.csdn.net/weixin_45649612/article/details/122777623">5. gitalk 未找到相关的Issues进行评论解决方法</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="https://mqrayblog.cn/2023/07/05/%E9%9A%8F%E7%AC%94/"/>
    <id>https://mqrayblog.cn/2023/07/05/%E9%9A%8F%E7%AC%94/</id>
    <published>2023-07-05T11:00:13.000Z</published>
    <updated>2023-09-05T12:21:29.496Z</updated>
    
    <content type="html"><![CDATA[<h4 id="阿里巴巴java开发手册阅读"><a href="#阿里巴巴java开发手册阅读" class="headerlink" title="阿里巴巴java开发手册阅读"></a>阿里巴巴java开发手册阅读</h4><blockquote><p>很多编程方式客观上没有对错之分，一致性很重要，可读性很重要，团队沟通效率很重要。有一个理论叫帕金森琐碎定律: 一个组织中的成员往往会把过多的精力花费在一些琐碎的争论上。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;阿里巴巴java开发手册阅读&quot;&gt;&lt;a href=&quot;#阿里巴巴java开发手册阅读&quot; class=&quot;headerlink&quot; title=&quot;阿里巴巴java开发手册阅读&quot;&gt;&lt;/a&gt;阿里巴巴java开发手册阅读&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;很多编程方式客观上</summary>
      
    
    
    
    
    <category term="sth" scheme="https://mqrayblog.cn/tags/sth/"/>
    
  </entry>
  
  <entry>
    <title>java之拦截器</title>
    <link href="https://mqrayblog.cn/2023/05/01/java%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://mqrayblog.cn/2023/05/01/java%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2023-05-01T02:06:37.000Z</published>
    <updated>2023-09-05T10:47:17.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://www.modb.pro/db/158733">1. 一文了解拦截器与拦截器链的实现</a><br><a href="https://juejin.cn/post/7026150413036421127#heading-15">2. 自定义注解实现方式解析</a><br><a href="https://www.cnblogs.com/yihuihui/p/15121300.html">3. 拦截器原理</a><br><a href="https://blog.csdn.net/qq_41733192/article/details/124972406">4. MyBatis拦截器实现sql查询权限动态修改</a><br><a href="https://blog.csdn.net/sunxiaoju/article/details/109660493">5. 自定义一个拦截器实现打印完整sql</a><br><a href="https://juejin.cn/post/7026150413036421127#heading-0">6. 自定义注解实现方式解析</a><br><a href="https://blog.csdn.net/fly910905/article/details/118391502">7. MyBatis 分页插件 PageHelper:是如何拦截SQL进行分页</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.modb.pro/db/158733&quot;&gt;1. 一文了解拦截器与拦截器链的实现&lt;/a&gt;&lt;br&gt;&lt;a </summary>
      
    
    
    
    
    <category term="java" scheme="https://mqrayblog.cn/tags/java/"/>
    
  </entry>
  
</feed>
