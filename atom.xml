<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mqray&#39;s blog</title>
  
  
  <link href="https://mqrayblog.cn/atom.xml" rel="self"/>
  
  <link href="https://mqrayblog.cn/"/>
  <updated>2023-08-05T10:13:59.615Z</updated>
  <id>https://mqrayblog.cn/</id>
  
  <author>
    <name>mqray</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis之客户端</title>
    <link href="https://mqrayblog.cn/2023/08/05/redis%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>https://mqrayblog.cn/2023/08/05/redis%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2023-08-05T10:13:32.000Z</published>
    <updated>2023-08-05T10:13:59.615Z</updated>
    
    <content type="html"><![CDATA[<p><code>redis</code>服务器是典型的一对多服务器程序，一个服务器可以和多个客户端建立网络请求，每个客户端可以向服务器发送命令请求，服务器接收并处理客户端发送的命令请求，并向客户端返回命令回复。<br>通过使用由<code>IO多路复用技术</code>实现的文件事件处理器，<code>redis</code>服务器使用单线程单进程的方式处理命令请求，并与多个客户端进行网络通信。6.0之后，IO多路复用处使用多线程实现。<br>与服务器建立连接的客户端将以链表的形式被保存在<code>redisServer</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="built_in">list</span> *clients;  <span class="comment">// 链表保存各客户端状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端属性"><a href="#客户端属性" class="headerlink" title="客户端属性"></a>客户端属性</h3><p>客户端状态包含的属性可以分为两类：</p><ol><li>比较通用的属性，无论客户端执行什么工作，都需要使用这些属性</li><li>和特定功能相关的属性，比如操作数据库时需要用到的<code>db</code>属性和<code>dictid</code>属性，执行时需要用到<code>mstate</code>属性等。</li></ol><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">     <span class="type">uint64_t</span> id; <span class="comment">// 自增客户端唯一id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">     <span class="type">uint64_t</span> flags; <span class="comment">// 客户端标志位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flags</code>占8个字节，该属性记录了客户端角色以及当前所处的状态，标志值比较多，详见：<a href="https://github.com/redis/redis/blob/1b6bdff48dcc333affab02b945821eb865529de2/src/server.h">server.h</a><br>主从服务器进行复制时，主服务器会成为从服务器的客户端；从服务器也会成为主服务器的客户端</p><ol><li>CLIENT_SLAVE (1&lt;&lt;0)  0000 0001，客户端代表的是一个从服务器。</li><li>CLIENT_MASTER (1&lt;&lt;1) 0000 0010, 客户端代表的是一个主服务器。</li><li>CLIENT_MONITOR (1&lt;&lt;2)  0000 0100，客户端正在执行<code>monitor</code>命令</li><li>CLIENT_MULTI (1&lt;&lt;3) 0000 1000， 客户端正在执行事务。</li><li>CLIENT_BLOCKED (1&lt;&lt;4) 0001 0000，客户端正在被<code>BRPOP/BLPOP</code>等命令阻塞。</li><li>CLIENT_SCRIPT (1&lt;&lt;8)，标识这个客户端是专门用于执行lua脚本的客户端，并没有真正的网络连接。</li><li>CLIENT_UNIX_SOCKET (1&lt;&lt;11) ，标识该客户端通过unix域套接字进行连接。</li><li>CLIENT_FORCE_AOF (1&lt;&lt;14)， 标识该客户端，正在执行<code>aof</code>操作。</li><li>CLIENT_READONLY (1&lt;&lt;17)， 标识客户端当前处于只读状态。</li><li>CLIENT_PUBSUB (1&lt;&lt;18)，标识客户端正处于发布订阅模式下。</li></ol><h4 id="连接信息"><a href="#连接信息" class="headerlink" title="连接信息"></a>连接信息</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    connection *conn; <span class="comment">// 保存此客户端的连接信息</span></span><br><span class="line">    user *user;       <span class="comment">// 与当前连接绑定的用户</span></span><br><span class="line">    <span class="type">int</span> authenticated; <span class="comment">// 默认用户是否需要身份认证</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>authenticated=0</code>表示无需认证，<code>authenticated=1</code>则需要认证。</p><h4 id="RESP-协议版本"><a href="#RESP-协议版本" class="headerlink" title="RESP 协议版本"></a>RESP 协议版本</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">     <span class="type">int</span> resp; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即RESP协议版本，基于TCP的应用层协议 RESP(REdis Serialization Protocol)。</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">     redisDb *db; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端当前指向的数据库指针。</p><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    robj *name; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此客户端的名称，默认为空。可以通过<code>client list</code>命令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; client list</span><br><span class="line">id=764370 addr=182.168.106.129:34520 laddr=182.168.168.226:6379 fd=27 name= age=932860 idle=932860 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 argv-mem=0 obl=0 oll=0 omem=0 tot-mem=20504 events=r cmd=hgetall user=default redir=-1</span><br></pre></td></tr></table></figure><h4 id="输入缓冲区"><a href="#输入缓冲区" class="headerlink" title="输入缓冲区"></a>输入缓冲区</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    sds querybuf;  <span class="comment">// 输入缓冲区</span></span><br><span class="line">    <span class="type">size_t</span> qb_pos; <span class="comment">// 用以标识输入缓冲区中已读位置</span></span><br><span class="line">    <span class="type">size_t</span> querybuf_peak; <span class="comment">// 最近100ms+输入缓冲区的峰值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端输入缓冲区用于保存客户端发送的命令请求。输入缓冲区大小会根据输入内容动态的缩小或者扩大，但最多不能超过1G，否则服务器将关闭此客户端。</p><h4 id="输出缓冲区"><a href="#输出缓冲区" class="headerlink" title="输出缓冲区"></a>输出缓冲区</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    <span class="type">time_t</span> obuf_soft_limit_reached_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>缓冲区大小由一个链表和任意多个字符串对象组成，但是为了避免客户端回复过大，占用过多的服务器资源，服务器会检查客户端的输出缓冲区大小，并在缓冲区大小超限时，执行相应的操作。服务器使用两种模式来限制客户端输出缓冲区的大小：</p><ol><li>硬性限制: 如果输出缓冲区的大小超过了硬性限制所设置的大小，那么服务器立即关闭客户端；</li><li>软性限制: 如果输出缓冲区大小超过软性限制所设置的大小，但是没超过硬性限制，则服务器使用客户端结构体中<code>obuf_soft_limit_reached_time</code>属性记录客户端到达软性限制的起始时间，而后继续监视客户端，如果输出缓冲区大小一直超出软性限制，且持续时长超过服务器中设定的时长，则服务器关闭客户端。<br>使用<code>client-output-buffer-limit</code>可以为普通客户端、从服务器客户端、执行发布订阅功能的客户端分别设置不同的软性限制和硬性限制：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client-output-buffer-limit &lt;<span class="class"><span class="keyword">class</span>&gt;</span> &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span><br><span class="line">client-output-buffer-limit normal <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="comment">// 将普通客户端的软性限制和硬性限制都设置为0，即不限制客户端输出缓冲区大小</span></span><br><span class="line">client-output-buffer-limit replica <span class="number">256</span>mb <span class="number">64</span>mb <span class="number">60</span> <span class="comment">// 将从服务器客户端的硬性限制为256m，软性限制为64m，软性限制时长为60s</span></span><br><span class="line">client-output-buffer-limit pubsub <span class="number">32</span>mb <span class="number">8</span>mb <span class="number">60</span> <span class="comment">// 将执行发布订阅功能客户端的硬性限制为32m, 软性限制为8m，软性限制时长为60s</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="命令与命令参数"><a href="#命令与命令参数" class="headerlink" title="命令与命令参数"></a>命令与命令参数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> argc;               <span class="comment">// 当前命令的参数个数</span></span><br><span class="line">    robj **argv;            <span class="comment">// 当前命令 的参数</span></span><br><span class="line">    <span class="type">int</span> argv_len;           <span class="comment">// argv数组的长度，可能会大于argc</span></span><br><span class="line">    <span class="type">int</span> original_argc;      <span class="comment">// 在命令被重写时，记录命令原始参数个数</span></span><br><span class="line">    robj **original_argv;   <span class="comment">// 命令重写前，原始的参数</span></span><br><span class="line">    <span class="type">size_t</span> argv_len_sum;    <span class="comment">// 命令参数长度之和</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">cmd</span>, *<span class="title">lastcmd</span>;</span>  <span class="comment">// 上次执行的命令</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">realcmd</span>;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，<code>lastcmd</code>使用<code>redisCommand</code>记录了上次执行的命令，<code>redisCommand</code>的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> &#123;</span></span><br><span class="line">    <span class="comment">// 声明类数据</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *declared_name; <span class="comment">// 标识命令名，之所以定义为指针是为了兼容原生命令和sds命令</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *summary; <span class="comment">// 命令概要，可选</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *complexity; <span class="comment">// 复杂度描述， 可选</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *since; <span class="comment">// 命令的首次发布版本，可选</span></span><br><span class="line">    <span class="type">int</span> doc_flags; <span class="comment">/* Flags for documentation (see CMD_DOC_*). */</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *replaced_by; <span class="comment">// 如果命令被废弃，则填写其继任者</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *deprecated_since; <span class="comment">// 命令何时被废弃</span></span><br><span class="line">    redisCommandGroup group; <span class="comment">// 命令组</span></span><br><span class="line">    commandHistory *history; <span class="comment">// 命令历史</span></span><br><span class="line">    <span class="type">int</span> num_history;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> **tips; <span class="comment">/* An array of strings that are meant to be tips for clients/proxies regarding this command */</span></span><br><span class="line">    <span class="type">int</span> num_tips;</span><br><span class="line">    redisCommandProc *proc; <span class="comment">// 命令实现</span></span><br><span class="line">    <span class="type">int</span> arity; <span class="comment">// 参数个数</span></span><br><span class="line">    <span class="type">uint64_t</span> flags; <span class="comment">/* Command flags, see CMD_*. */</span></span><br><span class="line">    <span class="type">uint64_t</span> acl_categories; <span class="comment">// ACL分类</span></span><br><span class="line">    keySpec *key_specs;</span><br><span class="line">    <span class="type">int</span> key_specs_num;</span><br><span class="line">    <span class="comment">/* Use a function to determine keys arguments in a command line.</span></span><br><span class="line"><span class="comment">     * Used for Redis Cluster redirect (may be NULL) */</span></span><br><span class="line">    redisGetKeysProc *getkeys_proc; <span class="comment">// 使用函数确定命令行中的键参数</span></span><br><span class="line">    <span class="type">int</span> num_args; <span class="comment">// 命令参数数组长度</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">subcommands</span>;</span> <span class="comment">// 子命令数组</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommandArg</span> *<span class="title">args</span>;</span> <span class="comment">// 命令参数数组</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOG_REQ_RES</span></span><br><span class="line">    <span class="comment">/* Reply schema */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">jsonObject</span> *<span class="title">reply_schema</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行时填充的数据</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> microseconds, calls, rejected_calls, failed_calls;</span><br><span class="line">    <span class="type">int</span> id;   <span class="comment">// 命令id，从0开始，在运行时分配，用于acl检查；如果当前连接的用户具有此命令位，则此连接能执行给定的命令。[位图]</span></span><br><span class="line">    sds fullname; <span class="comment">// sds描述的命令全名</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hdr_histogram</span>* <span class="title">latency_histogram</span>;</span> <span class="comment">/*points to the command latency command histogram (unit of time nanosecond) */</span></span><br><span class="line">    keySpec legacy_range_key_spec; <span class="comment">/* The legacy (first,last,step) key spec is</span></span><br><span class="line"><span class="comment">                                     * still maintained (if applicable) so that</span></span><br><span class="line"><span class="comment">                                     * we can still support the reply format of</span></span><br><span class="line"><span class="comment">                                     * COMMAND INFO and COMMAND GETKEYS */</span></span><br><span class="line">    dict *subcommands_dict; <span class="comment">// 保留子命令的字典，键是子命令的sds名称(非全名)，值为redisCommand的指针。</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">parent</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">RedisModuleCommand</span> *<span class="title">module_cmd</span>;</span> <span class="comment">/* A pointer to the module command data (NULL if native command) */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中<code>redisCommandTable</code>的实现使用python实现的，详见<a href="https://github.com/redis/redis/blob/1b6bdff48dcc333affab02b945821eb865529de2/utils/generate-command-code.py#L613">redisCommand初始化</a><br>另外这个链接可以方便查看<code>redis</code>提供的命令的复杂度: <a href="https://github.com/redis/redis/tree/1b6bdff48dcc333affab02b945821eb865529de2/src/commands">commands</a></p><h4 id="时间参数"><a href="#时间参数" class="headerlink" title="时间参数"></a>时间参数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    <span class="type">time_t</span> ctime;           <span class="comment">// 客户端创建时间</span></span><br><span class="line">    <span class="type">long</span> duration;          <span class="comment">// 当前命令的执行时间</span></span><br><span class="line">    <span class="type">time_t</span> lastinteraction; <span class="comment">// 上次交互时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="client结构体详情"><a href="#client结构体详情" class="headerlink" title="client结构体详情"></a>client结构体详情</h4><p>redis客户端的结构体定义在<code>redis.h/client</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">client</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> id;            <span class="comment">/* Client incremental unique ID. */</span></span><br><span class="line">    <span class="type">uint64_t</span> flags;         <span class="comment">/* Client flags: CLIENT_* macros. */</span></span><br><span class="line">    connection *conn;</span><br><span class="line">    <span class="type">int</span> resp;               <span class="comment">/* RESP protocol version. Can be 2 or 3. */</span></span><br><span class="line">    redisDb *db;            <span class="comment">/* Pointer to currently SELECTed DB. */</span></span><br><span class="line">    robj *name;             <span class="comment">/* As set by CLIENT SETNAME. */</span></span><br><span class="line">    robj *lib_name;         <span class="comment">/* The client library name as set by CLIENT SETINFO. */</span></span><br><span class="line">    robj *lib_ver;          <span class="comment">/* The client library version as set by CLIENT SETINFO. */</span></span><br><span class="line">    sds querybuf;           <span class="comment">/* Buffer we use to accumulate client queries. */</span></span><br><span class="line">    <span class="type">size_t</span> qb_pos;          <span class="comment">/* The position we have read in querybuf. */</span></span><br><span class="line">    <span class="type">size_t</span> querybuf_peak;   <span class="comment">/* Recent (100ms or more) peak of querybuf size. */</span></span><br><span class="line">    <span class="type">int</span> argc;               <span class="comment">/* Num of arguments of current command. */</span></span><br><span class="line">    robj **argv;            <span class="comment">/* Arguments of current command. */</span></span><br><span class="line">    <span class="type">int</span> argv_len;           <span class="comment">/* Size of argv array (may be more than argc) */</span></span><br><span class="line">    <span class="type">int</span> original_argc;      <span class="comment">/* Num of arguments of original command if arguments were rewritten. */</span></span><br><span class="line">    robj **original_argv;   <span class="comment">/* Arguments of original command if arguments were rewritten. */</span></span><br><span class="line">    <span class="type">size_t</span> argv_len_sum;    <span class="comment">/* Sum of lengths of objects in argv list. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">cmd</span>, *<span class="title">lastcmd</span>;</span>  <span class="comment">/* Last command executed. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">redisCommand</span> *<span class="title">realcmd</span>;</span> <span class="comment">/* The original command that was executed by the client,</span></span><br><span class="line"><span class="comment">                                     Used to update error stats in case the c-&gt;cmd was modified</span></span><br><span class="line"><span class="comment">                                     during the command invocation (like on GEOADD for example). */</span></span><br><span class="line">    user *user;             <span class="comment">/* User associated with this connection. If the</span></span><br><span class="line"><span class="comment">                               user is set to NULL the connection can do</span></span><br><span class="line"><span class="comment">                               anything (admin). */</span></span><br><span class="line">    <span class="type">int</span> reqtype;            <span class="comment">/* Request protocol type: PROTO_REQ_* */</span></span><br><span class="line">    <span class="type">int</span> multibulklen;       <span class="comment">/* Number of multi bulk arguments left to read. */</span></span><br><span class="line">    <span class="type">long</span> bulklen;           <span class="comment">/* Length of bulk argument in multi bulk request. */</span></span><br><span class="line">    <span class="built_in">list</span> *reply;            <span class="comment">/* List of reply objects to send to the client. */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> reply_bytes; <span class="comment">/* Tot bytes of objects in reply list. */</span></span><br><span class="line">    <span class="built_in">list</span> *deferred_reply_errors;    <span class="comment">/* Used for module thread safe contexts. */</span></span><br><span class="line">    <span class="type">size_t</span> sentlen;         <span class="comment">/* Amount of bytes already sent in the current</span></span><br><span class="line"><span class="comment">                               buffer or object being sent. */</span></span><br><span class="line">    <span class="type">time_t</span> ctime;           <span class="comment">/* Client creation time. */</span></span><br><span class="line">    <span class="type">long</span> duration;          <span class="comment">/* Current command duration. Used for measuring latency of blocking/non-blocking cmds */</span></span><br><span class="line">    <span class="type">int</span> slot;               <span class="comment">/* The slot the client is executing against. Set to -1 if no slot is being used */</span></span><br><span class="line">    dictEntry *cur_script;  <span class="comment">/* Cached pointer to the dictEntry of the script being executed. */</span></span><br><span class="line">    <span class="type">time_t</span> lastinteraction; <span class="comment">/* Time of the last interaction, used for timeout */</span></span><br><span class="line">    <span class="type">time_t</span> obuf_soft_limit_reached_time;</span><br><span class="line">    <span class="type">int</span> authenticated;      <span class="comment">/* Needed when the default user requires auth. */</span></span><br><span class="line">    <span class="type">int</span> replstate;          <span class="comment">/* Replication state if this is a slave. */</span></span><br><span class="line">    <span class="type">int</span> repl_start_cmd_stream_on_ack; <span class="comment">/* Install slave write handler on first ACK. */</span></span><br><span class="line">    <span class="type">int</span> repldbfd;           <span class="comment">/* Replication DB file descriptor. */</span></span><br><span class="line">    <span class="type">off_t</span> repldboff;        <span class="comment">/* Replication DB file offset. */</span></span><br><span class="line">    <span class="type">off_t</span> repldbsize;       <span class="comment">/* Replication DB file size. */</span></span><br><span class="line">    sds replpreamble;       <span class="comment">/* Replication DB preamble. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> read_reploff; <span class="comment">/* Read replication offset if this is a master. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> reploff;      <span class="comment">/* Applied replication offset if this is a master. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_applied; <span class="comment">/* Applied replication data count in querybuf, if this is a replica. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_ack_off; <span class="comment">/* Replication ack offset, if this is a slave. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_aof_off; <span class="comment">/* Replication AOF fsync ack offset, if this is a slave. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_ack_time;<span class="comment">/* Replication ack time, if this is a slave. */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> repl_last_partial_write; <span class="comment">/* The last time the server did a partial write from the RDB child pipe to this replica  */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> psync_initial_offset; <span class="comment">/* FULLRESYNC reply offset other slaves</span></span><br><span class="line"><span class="comment">                                       copying this slave output buffer</span></span><br><span class="line"><span class="comment">                                       should use. */</span></span><br><span class="line">    <span class="type">char</span> replid[CONFIG_RUN_ID_SIZE+<span class="number">1</span>]; <span class="comment">/* Master replication ID (if master). */</span></span><br><span class="line">    <span class="type">int</span> slave_listening_port; <span class="comment">/* As configured with: REPLCONF listening-port */</span></span><br><span class="line">    <span class="type">char</span> *slave_addr;       <span class="comment">/* Optionally given by REPLCONF ip-address */</span></span><br><span class="line">    <span class="type">int</span> slave_capa;         <span class="comment">/* Slave capabilities: SLAVE_CAPA_* bitwise OR. */</span></span><br><span class="line">    <span class="type">int</span> slave_req;          <span class="comment">/* Slave requirements: SLAVE_REQ_* */</span></span><br><span class="line">    multiState mstate;      <span class="comment">/* MULTI/EXEC state */</span></span><br><span class="line">    blockingState bstate;     <span class="comment">/* blocking state */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> woff;         <span class="comment">/* Last write global replication offset. */</span></span><br><span class="line">    <span class="built_in">list</span> *watched_keys;     <span class="comment">/* Keys WATCHED for MULTI/EXEC CAS */</span></span><br><span class="line">    dict *pubsub_channels;  <span class="comment">/* channels a client is interested in (SUBSCRIBE) */</span></span><br><span class="line">    dict *pubsub_patterns;  <span class="comment">/* patterns a client is interested in (PSUBSCRIBE) */</span></span><br><span class="line">    dict *pubsubshard_channels;  <span class="comment">/* shard level channels a client is interested in (SSUBSCRIBE) */</span></span><br><span class="line">    sds peerid;             <span class="comment">/* Cached peer ID. */</span></span><br><span class="line">    sds sockname;           <span class="comment">/* Cached connection target address. */</span></span><br><span class="line">    listNode *client_list_node; <span class="comment">/* list node in client list */</span></span><br><span class="line">    listNode *postponed_list_node; <span class="comment">/* list node within the postponed list */</span></span><br><span class="line">    listNode *pending_read_list_node; <span class="comment">/* list node in clients pending read list */</span></span><br><span class="line">    <span class="type">void</span> *module_blocked_client; <span class="comment">/* Pointer to the RedisModuleBlockedClient associated with this</span></span><br><span class="line"><span class="comment">                                  * client. This is set in case of module authentication before the</span></span><br><span class="line"><span class="comment">                                  * unblocked client is reprocessed to handle reply callbacks. */</span></span><br><span class="line">    <span class="type">void</span> *module_auth_ctx; <span class="comment">/* Ongoing / attempted module based auth callback&#x27;s ctx.</span></span><br><span class="line"><span class="comment">                            * This is only tracked within the context of the command attempting</span></span><br><span class="line"><span class="comment">                            * authentication. If not NULL, it means module auth is in progress. */</span></span><br><span class="line">    RedisModuleUserChangedFunc auth_callback; <span class="comment">/* Module callback to execute</span></span><br><span class="line"><span class="comment">                                               * when the authenticated user</span></span><br><span class="line"><span class="comment">                                               * changes. */</span></span><br><span class="line">    <span class="type">void</span> *auth_callback_privdata; <span class="comment">/* Private data that is passed when the auth</span></span><br><span class="line"><span class="comment">                                   * changed callback is executed. Opaque for</span></span><br><span class="line"><span class="comment">                                   * Redis Core. */</span></span><br><span class="line">    <span class="type">void</span> *auth_module;      <span class="comment">/* The module that owns the callback, which is used</span></span><br><span class="line"><span class="comment">                             * to disconnect the client if the module is</span></span><br><span class="line"><span class="comment">                             * unloaded for cleanup. Opaque for Redis Core.*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If this client is in tracking mode and this field is non zero,</span></span><br><span class="line"><span class="comment">     * invalidation messages for keys fetched by this client will be sent to</span></span><br><span class="line"><span class="comment">     * the specified client ID. */</span></span><br><span class="line">    <span class="type">uint64_t</span> client_tracking_redirection;</span><br><span class="line">    rax *client_tracking_prefixes; <span class="comment">/* A dictionary of prefixes we are already</span></span><br><span class="line"><span class="comment">                                      subscribed to in BCAST mode, in the</span></span><br><span class="line"><span class="comment">                                      context of client side caching. */</span></span><br><span class="line">    <span class="comment">/* In updateClientMemoryUsage() we track the memory usage of</span></span><br><span class="line"><span class="comment">     * each client and add it to the sum of all the clients of a given type,</span></span><br><span class="line"><span class="comment">     * however we need to remember what was the old contribution of each</span></span><br><span class="line"><span class="comment">     * client, and in which category the client was, in order to remove it</span></span><br><span class="line"><span class="comment">     * before adding it the new value. */</span></span><br><span class="line">    <span class="type">size_t</span> last_memory_usage;</span><br><span class="line">    <span class="type">int</span> last_memory_type;</span><br><span class="line"></span><br><span class="line">    listNode *mem_usage_bucket_node;</span><br><span class="line">    clientMemUsageBucket *mem_usage_bucket;</span><br><span class="line"></span><br><span class="line">    listNode *ref_repl_buf_node; <span class="comment">/* Referenced node of replication buffer blocks,</span></span><br><span class="line"><span class="comment">                                  * see the definition of replBufBlock. */</span></span><br><span class="line">    <span class="type">size_t</span> ref_block_pos;        <span class="comment">/* Access position of referenced buffer block,</span></span><br><span class="line"><span class="comment">                                  * i.e. the next offset to send. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* list node in clients_pending_write list */</span></span><br><span class="line">    listNode clients_pending_write_node;</span><br><span class="line">    <span class="comment">/* Response buffer */</span></span><br><span class="line">    <span class="type">size_t</span> buf_peak; <span class="comment">/* Peak used size of buffer in last 5 sec interval. */</span></span><br><span class="line">    <span class="type">mstime_t</span> buf_peak_last_reset_time; <span class="comment">/* keeps the last time the buffer peak value was reset */</span></span><br><span class="line">    <span class="type">int</span> bufpos;</span><br><span class="line">    <span class="type">size_t</span> buf_usable_size; <span class="comment">/* Usable size of buffer. */</span></span><br><span class="line">    <span class="type">char</span> *buf;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> LOG_REQ_RES</span></span><br><span class="line">    clientReqResInfo reqres;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125; client;</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://github.com/redis/redis/blob/1b6bdff48dcc333affab02b945821eb865529de2/src/server.h">1. server.h</a><br><a href="https://zhuanlan.zhihu.com/p/607693207">2. Redis 源码剖析 3 – redisCommand</a><br><a href="https://github.com/redis/redis/blob/1b6bdff48dcc333affab02b945821eb865529de2/utils/generate-command-code.py#L613">3. redisCommand初始化</a><br><a href="https://github.com/redis/redis/tree/1b6bdff48dcc333affab02b945821eb865529de2/src/commands">4. commands</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;服务器是典型的一对多服务器程序，一个服务器可以和多个客户端建立网络请求，每个客户端可以向服务器发送命令请求，服务器接收并处理客户端发送的命令请求，并向客户端返回命令回复。&lt;br&gt;通过使用由&lt;code&gt;IO多路复用技术&lt;/code&gt;实现的文</summary>
      
    
    
    
    <category term="数据库" scheme="https://mqrayblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis之事件驱动</title>
    <link href="https://mqrayblog.cn/2023/07/31/redis%E4%B9%8B%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/"/>
    <id>https://mqrayblog.cn/2023/07/31/redis%E4%B9%8B%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/</id>
    <published>2023-07-31T04:54:32.000Z</published>
    <updated>2023-08-05T10:11:42.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p><code>redis</code>服务器是一个事件驱动程序，服务器需要处理两类事件：</p><ol><li>文件事件处理器：redis基于<code>reactor</code>模式开发的网络事件处理器。</li><li>事件事件处理器： 比如<code>serverCron</code>函数，需要在给定的时间点执行。</li></ol><p>文件事件处理器使用<code>io多路复用</code>来同时监听多个套接字，并根据套接字目前执行的任务为套接字关联不同的事件处理器。<br>当被监听的套接字准备好执行连接应答、读取、写入、关闭等操作时，与之操作相对应的文件事件就会产生，这些文件事件就会调用套接字关联的事件处理器处理这些事件。</p><h3 id="事件处理流程"><a href="#事件处理流程" class="headerlink" title="事件处理流程"></a>事件处理流程</h3><img src="/2023/07/31/redis%E4%B9%8B%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/事件处理流程.jpg"><h4 id="server-c-main"><a href="#server-c-main" class="headerlink" title="server.c main"></a>server.c main</h4><p>redis服务端主线程中定义有如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    initServer(); <span class="comment">// 创建、初始化服务端数据结构，</span></span><br><span class="line">    ...</span><br><span class="line">    initListeners(); <span class="comment">// 初始化服务器后，初始化监听器</span></span><br><span class="line">    ...</span><br><span class="line">    aeMain(server.el); <span class="comment">// 启动 事件循环</span></span><br><span class="line">    aeDeleteEventLoop(server.el); <span class="comment">// 服务器关闭时，停止事件循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化事件处理器"><a href="#初始化事件处理器" class="headerlink" title="初始化事件处理器"></a>初始化事件处理器</h4><p>如上，<code>redis</code>服务器主线程启动时，会调用<code>initServer</code>，该函数调用<code>aeCreateEventLoop</code>初始化事件处理器。在创建时需要指定<code>setsize</code>，表示<code>eventLoop</code>可以监听的网络事件fd的个数，如果当前监听的fd的个数超过了<code>setsize</code>,<code>eventLoop</code>将不能继续注册。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">initServer</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    server.el = aeCreateEventLoop(server.maxclients+CONFIG_FDSET_INCR);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (aeCreateTimeEvent(server.el, <span class="number">1</span>, serverCron, <span class="literal">NULL</span>, <span class="literal">NULL</span>) == AE_ERR) &#123;</span><br><span class="line">        serverPanic(<span class="string">&quot;Can&#x27;t create event loop timers.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (aeCreateFileEvent(server.el, server.module_pipe[<span class="number">0</span>], AE_READABLE,</span><br><span class="line">        modulePipeReadable,<span class="literal">NULL</span>) == AE_ERR) &#123;</span><br><span class="line">            serverPanic(</span><br><span class="line">                <span class="string">&quot;Error registering the readable event for the module pipe.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    aeSetBeforeSleepProc(server.el,beforeSleep);</span><br><span class="line">    aeSetAfterSleepProc(server.el,afterSleep);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="初始化事件循环"><a href="#初始化事件循环" class="headerlink" title="初始化事件循环"></a>初始化事件循环</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">aeEventLoop *<span class="title function_">aeCreateEventLoop</span><span class="params">(<span class="type">int</span> setsize)</span> &#123;</span><br><span class="line">    aeEventLoop *eventLoop;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    monotonicInit();    <span class="comment">/* just in case the calling app didn&#x27;t initialize */</span></span><br><span class="line">    <span class="comment">// 创建事件循环数据结构</span></span><br><span class="line">    <span class="keyword">if</span> ((eventLoop = zmalloc(<span class="keyword">sizeof</span>(*eventLoop))) == <span class="literal">NULL</span>) <span class="keyword">goto</span> err;</span><br><span class="line">    <span class="comment">// 初始化 事件循环中的注册事件和已触发事件</span></span><br><span class="line">    eventLoop-&gt;events = zmalloc(<span class="keyword">sizeof</span>(aeFileEvent)*setsize);</span><br><span class="line">    eventLoop-&gt;fired = zmalloc(<span class="keyword">sizeof</span>(aeFiredEvent)*setsize);</span><br><span class="line">    <span class="keyword">if</span> (eventLoop-&gt;events == <span class="literal">NULL</span> || eventLoop-&gt;fired == <span class="literal">NULL</span>) <span class="keyword">goto</span> err;</span><br><span class="line">    <span class="comment">// 设置数组大小</span></span><br><span class="line">    eventLoop-&gt;setsize = setsize;</span><br><span class="line">    <span class="comment">// 初始化时间事件结构</span></span><br><span class="line">    eventLoop-&gt;timeEventHead = <span class="literal">NULL</span>;</span><br><span class="line">    eventLoop-&gt;timeEventNextId = <span class="number">0</span>;</span><br><span class="line">    eventLoop-&gt;stop = <span class="number">0</span>;</span><br><span class="line">    eventLoop-&gt;maxfd = <span class="number">-1</span>;</span><br><span class="line">    eventLoop-&gt;beforesleep = <span class="literal">NULL</span>;</span><br><span class="line">    eventLoop-&gt;aftersleep = <span class="literal">NULL</span>;</span><br><span class="line">    eventLoop-&gt;flags = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 创建 io多路复用实例，赋值给apidata字段</span></span><br><span class="line">    <span class="keyword">if</span> (aeApiCreate(eventLoop) == <span class="number">-1</span>) <span class="keyword">goto</span> err;</span><br><span class="line">    <span class="comment">// 初始化监听事件</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; setsize; i++)</span><br><span class="line">        eventLoop-&gt;events[i].mask = AE_NONE;</span><br><span class="line">    <span class="keyword">return</span> eventLoop;</span><br><span class="line"></span><br><span class="line">err:</span><br><span class="line">    <span class="keyword">if</span> (eventLoop) &#123;</span><br><span class="line">        zfree(eventLoop-&gt;events);</span><br><span class="line">        zfree(eventLoop-&gt;fired);</span><br><span class="line">        zfree(eventLoop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建时间事件"><a href="#创建时间事件" class="headerlink" title="创建时间事件"></a>创建时间事件</h5><p><code>initServer</code>中调用<code>aeCreateTimeEvent</code>创建时间事件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">aeCreateTimeEvent</span><span class="params">(aeEventLoop *eventLoop, <span class="type">long</span> <span class="type">long</span> milliseconds,</span></span><br><span class="line"><span class="params">        aeTimeProc *proc, <span class="type">void</span> *clientData,</span></span><br><span class="line"><span class="params">        aeEventFinalizerProc *finalizerProc)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 更新 时间计数器</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> id = eventLoop-&gt;timeEventNextId++;</span><br><span class="line">    aeTimeEvent *te;</span><br><span class="line">    <span class="comment">// 创建时间事件结构</span></span><br><span class="line">    te = zmalloc(<span class="keyword">sizeof</span>(*te));</span><br><span class="line">    <span class="keyword">if</span> (te == <span class="literal">NULL</span>) <span class="keyword">return</span> AE_ERR;</span><br><span class="line">    <span class="comment">// 设置id</span></span><br><span class="line">    te-&gt;id = id;</span><br><span class="line">    <span class="comment">// 设定处理事件的时间</span></span><br><span class="line">    te-&gt;when = getMonotonicUs() + milliseconds * <span class="number">1000</span>;</span><br><span class="line">    te-&gt;timeProc = proc;</span><br><span class="line">    te-&gt;finalizerProc = finalizerProc;</span><br><span class="line">    te-&gt;clientData = clientData;</span><br><span class="line">    te-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    te-&gt;next = eventLoop-&gt;timeEventHead;</span><br><span class="line">    te-&gt;refcount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (te-&gt;next)</span><br><span class="line">        te-&gt;next-&gt;prev = te;</span><br><span class="line">    eventLoop-&gt;timeEventHead = te;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注册文件IO事件"><a href="#注册文件IO事件" class="headerlink" title="注册文件IO事件"></a>注册文件IO事件</h5><p><code>initServer</code>中调用<code>aeCreateFileEvent</code>创建文件IO事件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">aeCreateFileEvent</span><span class="params">(aeEventLoop *eventLoop, <span class="type">int</span> fd, <span class="type">int</span> mask,</span></span><br><span class="line"><span class="params">        aeFileProc *proc, <span class="type">void</span> *clientData)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= eventLoop-&gt;setsize) &#123;</span><br><span class="line">        errno = ERANGE;</span><br><span class="line">        <span class="keyword">return</span> AE_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取出事件循环中的文件描述符对应的文件事件</span></span><br><span class="line">    aeFileEvent *fe = &amp;eventLoop-&gt;events[fd];</span><br><span class="line">    <span class="comment">// 监听该 文件描述符指定的 事件</span></span><br><span class="line">    <span class="keyword">if</span> (aeApiAddEvent(eventLoop, fd, mask) == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> AE_ERR;</span><br><span class="line">    <span class="comment">// 设置 文件事件类型，以及事件的处理器</span></span><br><span class="line">    fe-&gt;mask |= mask;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_READABLE) fe-&gt;rfileProc = proc;</span><br><span class="line">    <span class="keyword">if</span> (mask &amp; AE_WRITABLE) fe-&gt;wfileProc = proc;</span><br><span class="line">    fe-&gt;clientData = clientData;</span><br><span class="line">    <span class="keyword">if</span> (fd &gt; eventLoop-&gt;maxfd)</span><br><span class="line">        eventLoop-&gt;maxfd = fd;</span><br><span class="line">    <span class="keyword">return</span> AE_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h4><p>在<code>server.c main()</code>中初始化服务器之后，调用<code>initListeners()</code>初始化监听器。<br><code>redis</code>中为服务器提供了TCP&#x2F;TLS&#x2F;UNIX三种监听器。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">initListeners</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/* Setup listeners from server config for TCP/TLS/Unix */</span></span><br><span class="line">    <span class="type">int</span> conn_index;</span><br><span class="line">    connListener *listener;</span><br><span class="line">    <span class="keyword">if</span> (server.port != <span class="number">0</span>) &#123;</span><br><span class="line">        conn_index = connectionIndexByType(CONN_TYPE_SOCKET);</span><br><span class="line">        <span class="keyword">if</span> (conn_index &lt; <span class="number">0</span>)</span><br><span class="line">            serverPanic(<span class="string">&quot;Failed finding connection listener of %s&quot;</span>, CONN_TYPE_SOCKET);</span><br><span class="line">        listener = &amp;server.listeners[conn_index];</span><br><span class="line">        listener-&gt;bindaddr = server.bindaddr;</span><br><span class="line">        listener-&gt;bindaddr_count = server.bindaddr_count;</span><br><span class="line">        listener-&gt;port = server.port;</span><br><span class="line">        listener-&gt;ct = connectionByType(CONN_TYPE_SOCKET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.tls_port || server.tls_replication || server.tls_cluster) &#123;</span><br><span class="line">        ConnectionType *ct_tls = connectionTypeTls();</span><br><span class="line">        <span class="keyword">if</span> (!ct_tls) &#123;</span><br><span class="line">            serverLog(LL_WARNING, <span class="string">&quot;Failed finding TLS support.&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connTypeConfigure(ct_tls, &amp;server.tls_ctx_config, <span class="number">1</span>) == C_ERR) &#123;</span><br><span class="line">            serverLog(LL_WARNING, <span class="string">&quot;Failed to configure TLS. Check logs for more info.&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.tls_port != <span class="number">0</span>) &#123;</span><br><span class="line">        conn_index = connectionIndexByType(CONN_TYPE_TLS);</span><br><span class="line">        <span class="keyword">if</span> (conn_index &lt; <span class="number">0</span>)</span><br><span class="line">            serverPanic(<span class="string">&quot;Failed finding connection listener of %s&quot;</span>, CONN_TYPE_TLS);</span><br><span class="line">        listener = &amp;server.listeners[conn_index];</span><br><span class="line">        listener-&gt;bindaddr = server.bindaddr;</span><br><span class="line">        listener-&gt;bindaddr_count = server.bindaddr_count;</span><br><span class="line">        listener-&gt;port = server.tls_port;</span><br><span class="line">        listener-&gt;ct = connectionByType(CONN_TYPE_TLS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (server.unixsocket != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        conn_index = connectionIndexByType(CONN_TYPE_UNIX);</span><br><span class="line">        <span class="keyword">if</span> (conn_index &lt; <span class="number">0</span>)</span><br><span class="line">            serverPanic(<span class="string">&quot;Failed finding connection listener of %s&quot;</span>, CONN_TYPE_UNIX);</span><br><span class="line">        listener = &amp;server.listeners[conn_index];</span><br><span class="line">        listener-&gt;bindaddr = &amp;server.unixsocket;</span><br><span class="line">        listener-&gt;bindaddr_count = <span class="number">1</span>;</span><br><span class="line">        listener-&gt;ct = connectionByType(CONN_TYPE_UNIX);</span><br><span class="line">        listener-&gt;priv = &amp;server.unixsocketperm; <span class="comment">/* Unix socket specified */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create all the configured listener, and add handler to start to accept */</span></span><br><span class="line">    <span class="type">int</span> listen_fds = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; CONN_TYPE_MAX; j++) &#123;</span><br><span class="line">        listener = &amp;server.listeners[j];</span><br><span class="line">        <span class="keyword">if</span> (listener-&gt;ct == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connListen(listener) == C_ERR) &#123;</span><br><span class="line">            serverLog(LL_WARNING, <span class="string">&quot;Failed listening on port %u (%s), aborting.&quot;</span>, listener-&gt;port, listener-&gt;ct-&gt;get_type(<span class="literal">NULL</span>));</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (createSocketAcceptHandler(listener, connAcceptHandler(listener-&gt;ct)) != C_OK)</span><br><span class="line">            serverPanic(<span class="string">&quot;Unrecoverable error creating %s listener accept handler.&quot;</span>, listener-&gt;ct-&gt;get_type(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">       listen_fds += listener-&gt;count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listen_fds == <span class="number">0</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">&quot;Configured to not listen anywhere, exiting.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p><code>redis</code>主程序中，初始化事件循环、监听器后将调用<code>aeMain</code>进入事件循环中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">aeMain</span><span class="params">(aeEventLoop *eventLoop)</span> &#123;</span><br><span class="line">    eventLoop-&gt;stop = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!eventLoop-&gt;stop) &#123;</span><br><span class="line">        aeProcessEvents(eventLoop, AE_ALL_EVENTS|</span><br><span class="line">                                   AE_CALL_BEFORE_SLEEP|</span><br><span class="line">                                   AE_CALL_AFTER_SLEEP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>aeProcessEvents</code>先处理每个挂起的时间事件，再处理每个挂起的文件事件。<br>如果没有特殊标志，该函数将休眠，直到某个文件事件触发，或者下一次事件发生。</p><p><code>flag</code>的取值含义如下：<br>0： 什么也不做<br>AE_ALL_EVENTS：处理所有事件</p><p>先来看<code>eventLoop</code>的定义，位于<code>ae.h</code>文件中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* State of an event based program */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">aeEventLoop</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> maxfd;   <span class="comment">// 当前注册的事件中，最大的文件描述符</span></span><br><span class="line">    <span class="type">int</span> setsize; <span class="comment">// 追踪的文件描述符的最大值</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> timeEventNextId;</span><br><span class="line">    aeFileEvent *events; <span class="comment">// 已注册的文件事件</span></span><br><span class="line">    aeFiredEvent *fired; <span class="comment">// 已触发的事件</span></span><br><span class="line">    aeTimeEvent *timeEventHead; <span class="comment">// 时间事件的头指针</span></span><br><span class="line">    <span class="type">int</span> stop;</span><br><span class="line">    <span class="type">void</span> *apidata; <span class="comment">/* This is used for polling API specific data */</span></span><br><span class="line">    aeBeforeSleepProc *beforesleep;</span><br><span class="line">    aeBeforeSleepProc *aftersleep;</span><br><span class="line">    <span class="type">int</span> flags;</span><br><span class="line">&#125; aeEventLoop;</span><br></pre></td></tr></table></figure><p>文件事件的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">aeFileEvent</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> mask; <span class="comment">/* one of AE_(READABLE|WRITABLE|BARRIER) */</span></span><br><span class="line">    aeFileProc *rfileProc; <span class="comment">// 回调方法的指针，类似于接口</span></span><br><span class="line">    aeFileProc *wfileProc;</span><br><span class="line">    <span class="type">void</span> *clientData;</span><br><span class="line">&#125; aeFileEvent;</span><br></pre></td></tr></table></figure><p>其中，<code>mask</code>的取值如下，用以指定事件循环中注册的文件的触发方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AE_NONE 0      <span class="comment">// 没有事件注册</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AE_READABLE 1   <span class="comment">// 文件描述符为可读时，触发该事件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AE_WRITABLE 2   <span class="comment">// 文件描述符为可写时，触发触发此事件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AE_BARRIER 4   <span class="comment">// AE_BARRIER时，不会再可读事件后继续触发可写事件；此情形下，会导致读写顺序，使写先发生，再执行读</span></span></span><br></pre></td></tr></table></figure><p>触发的事件定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">aeFiredEvent</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> fd; <span class="comment">// 文件描述符</span></span><br><span class="line">    <span class="type">int</span> mask; <span class="comment">// 触发事件标志位</span></span><br><span class="line">&#125; aeFiredEvent;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 取值如下：</span></span><br><span class="line"><span class="comment">        AE_FILE_EVENTS： 0000 0001</span></span><br><span class="line"><span class="comment">        AE_TIME_EVENTS： 0000 0010</span></span><br><span class="line"><span class="comment">        AE_ALL_EVENTS：  0000 0011</span></span><br><span class="line"><span class="comment">        AE_DONT_WAIT：   0000 0100</span></span><br><span class="line"><span class="comment">AE_CALL_BEFORE_SLEEP：   0000 1000 </span></span><br><span class="line"><span class="comment">AE_CALL_AFTER_SLEEP：    0001 0000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">aeProcessEvents</span><span class="params">(aeEventLoop *eventLoop, <span class="type">int</span> flags)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> processed = <span class="number">0</span>, numevents;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(flags &amp; AE_TIME_EVENTS) &amp;&amp; !(flags &amp; AE_FILE_EVENTS)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Note that we want to call aeApiPoll() even if there are no</span></span><br><span class="line"><span class="comment">     * file events to process as long as we want to process time</span></span><br><span class="line"><span class="comment">     * events, in order to sleep until the next time event is ready</span></span><br><span class="line"><span class="comment">     * to fire. */</span></span><br><span class="line">    <span class="keyword">if</span> (eventLoop-&gt;maxfd != <span class="number">-1</span> ||</span><br><span class="line">        ((flags &amp; AE_TIME_EVENTS) &amp;&amp; !(flags &amp; AE_DONT_WAIT))) &#123;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>, *<span class="title">tvp</span> =</span> <span class="literal">NULL</span>; <span class="comment">/* NULL means infinite wait. */</span></span><br><span class="line">        <span class="type">int64_t</span> usUntilTimer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (eventLoop-&gt;beforesleep != <span class="literal">NULL</span> &amp;&amp; (flags &amp; AE_CALL_BEFORE_SLEEP))</span><br><span class="line">            eventLoop-&gt;beforesleep(eventLoop);</span><br><span class="line">         <span class="comment">// 在 beforesleep 中，eventLoop-&gt;flags可能会变化，两者存在时，flags的优先级更高</span></span><br><span class="line">         <span class="comment">// 如果 flags = AE_DONT_WAIT，无需处理 eventLoop-&gt;flags </span></span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; AE_DONT_WAIT) || (eventLoop-&gt;flags &amp; AE_DONT_WAIT)) &#123;</span><br><span class="line">            tv.tv_sec = tv.tv_usec = <span class="number">0</span>;</span><br><span class="line">            tvp = &amp;tv;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flags &amp; AE_TIME_EVENTS) &#123;</span><br><span class="line">            usUntilTimer = usUntilEarliestTimer(eventLoop);</span><br><span class="line">            <span class="keyword">if</span> (usUntilTimer &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                tv.tv_sec = usUntilTimer / <span class="number">1000000</span>;</span><br><span class="line">                tv.tv_usec = usUntilTimer % <span class="number">1000000</span>;</span><br><span class="line">                tvp = &amp;tv;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用多路复用的api，仅在超时或者某些事件触发时返回</span></span><br><span class="line">        numevents = aeApiPoll(eventLoop, tvp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果flag不包含AE_FILE_EVENTS，则 待处理事件数为0[包含情况仅为file_event和 all_event]</span></span><br><span class="line">        <span class="keyword">if</span> (!(flags &amp; AE_FILE_EVENTS)) &#123;</span><br><span class="line">            numevents = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果不为 after_sleep 不为空， 且flags为after_sleep时，设置后置处理</span></span><br><span class="line">        <span class="keyword">if</span> (eventLoop-&gt;aftersleep != <span class="literal">NULL</span> &amp;&amp; flags &amp; AE_CALL_AFTER_SLEEP)</span><br><span class="line">            eventLoop-&gt;aftersleep(eventLoop);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历事件</span></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; numevents; j++) &#123;</span><br><span class="line">            <span class="comment">// 获取当前事件的文件描述符</span></span><br><span class="line">            <span class="type">int</span> fd = eventLoop-&gt;fired[j].fd;</span><br><span class="line">            <span class="comment">// 根据文件描述符，定位到注册的文件事件</span></span><br><span class="line">            aeFileEvent *fe = &amp;eventLoop-&gt;events[fd];</span><br><span class="line">            <span class="comment">// 获取该文件事件的标志位</span></span><br><span class="line">            <span class="type">int</span> mask = eventLoop-&gt;fired[j].mask;</span><br><span class="line">            <span class="comment">// 计量 当前文件描述符 调用的事件数量</span></span><br><span class="line">            <span class="type">int</span> fired = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 是否需要倒置 写读 事件</span></span><br><span class="line">            <span class="type">int</span> invert = fe-&gt;mask &amp; AE_BARRIER;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 防止该文件事件已经被触发且已经从fireevents中移除</span></span><br><span class="line">            <span class="keyword">if</span> (!invert &amp;&amp; fe-&gt;mask &amp; mask &amp; AE_READABLE) &#123;</span><br><span class="line">                <span class="comment">// 调用该文件事件的 读操作 , 触发事件++</span></span><br><span class="line">                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                fired++;</span><br><span class="line">                fe = &amp;eventLoop-&gt;events[fd]; <span class="comment">/* Refresh in case of resize. */</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 触发 写操作</span></span><br><span class="line">            <span class="keyword">if</span> (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fired || fe-&gt;wfileProc != fe-&gt;rfileProc) &#123;</span><br><span class="line">                    <span class="comment">// 调用该文件事件的 写方法， 触发事件++</span></span><br><span class="line">                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                    fired++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 如果需要 倒置写读 操作，则在上述 写操作完毕后，再判断是否需要执行 读操作</span></span><br><span class="line">            <span class="keyword">if</span> (invert) &#123;</span><br><span class="line">                fe = &amp;eventLoop-&gt;events[fd]; <span class="comment">/* Refresh in case of resize. */</span></span><br><span class="line">                <span class="keyword">if</span> ((fe-&gt;mask &amp; mask &amp; AE_READABLE) &amp;&amp;</span><br><span class="line">                    (!fired || fe-&gt;wfileProc != fe-&gt;rfileProc))</span><br><span class="line">                &#123;</span><br><span class="line">                    fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                    fired++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 已处理事件 ++ </span></span><br><span class="line">            processed++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查是否需要处理时间事件</span></span><br><span class="line">    <span class="keyword">if</span> (flags &amp; AE_TIME_EVENTS)</span><br><span class="line">        processed += processTimeEvents(eventLoop);</span><br><span class="line">    <span class="comment">// 返回处理过的时间/文件事件</span></span><br><span class="line">    <span class="keyword">return</span> processed; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上<code>aeProcessEvents</code>的代码中，调用了如下两个方法：</p><ol><li><code>aeApiPoll</code>: 调用 多路复用 api，监控多个文件描述符的可读可写状态。</li><li><code>processTimeEvents</code>： 处理时间事件</li></ol><h5 id="监听文件描述符"><a href="#监听文件描述符" class="headerlink" title="监听文件描述符"></a>监听文件描述符</h5><p><code>aeApiPoll</code>实际上是 IO多路复用接口，<code>redis</code>中提供了四种实现方式:<br><code>evport、epoll、kqueue、select</code>。</p><p>因为 Redis 需要在多个平台上运行，同时为了最大化执行的效率与性能，所以会根据编译平台的不同选择不同的 I&#x2F;O 多路复用函数作为子模块，提供给上层统一的接口；在 Redis 中，通过宏定义的使用，合理的选择不同的子模块:<br><img src="/2023/07/31/redis%E4%B9%8B%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/aeApiPoll.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> HAVE_EVPORT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ae_evport.c&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> HAVE_EPOLL</span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ae_epoll.c&quot;</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">ifdef</span> HAVE_KQUEUE</span></span><br><span class="line">        <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ae_kqueue.c&quot;</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ae_select.c&quot;</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h5 id="处理文件读"><a href="#处理文件读" class="headerlink" title="处理文件读"></a>处理文件读</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!invert &amp;&amp; fe-&gt;mask &amp; mask &amp; AE_READABLE) &#123;</span><br><span class="line">                <span class="comment">// 调用该文件事件的 读操作 , 触发事件++</span></span><br><span class="line">                fe-&gt;rfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                fired++;</span><br><span class="line">                fe = &amp;eventLoop-&gt;events[fd]; <span class="comment">/* Refresh in case of resize. */</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h5 id="处理文件写"><a href="#处理文件写" class="headerlink" title="处理文件写"></a>处理文件写</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fe-&gt;mask &amp; mask &amp; AE_WRITABLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!fired || fe-&gt;wfileProc != fe-&gt;rfileProc) &#123;</span><br><span class="line">                    <span class="comment">// 调用该文件事件的 写方法， 触发事件++</span></span><br><span class="line">                    fe-&gt;wfileProc(eventLoop,fd,fe-&gt;clientData,mask);</span><br><span class="line">                    fired++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h5 id="处理时间事件"><a href="#处理时间事件" class="headerlink" title="处理时间事件"></a>处理时间事件</h5><p><code>processTimeEvents</code>方法用以处理时间事件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">processTimeEvents</span><span class="params">(aeEventLoop *eventLoop)</span> &#123;</span><br><span class="line">    <span class="type">int</span> processed = <span class="number">0</span>;</span><br><span class="line">    aeTimeEvent *te;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> maxId;</span><br><span class="line"></span><br><span class="line">    te = eventLoop-&gt;timeEventHead;</span><br><span class="line">    maxId = eventLoop-&gt;timeEventNextId<span class="number">-1</span>;</span><br><span class="line">    monotime now = getMonotonicUs();</span><br><span class="line">    <span class="keyword">while</span>(te) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除计划删除的事件，  AE_DELETED_EVENT_ID = -1 </span></span><br><span class="line">        <span class="keyword">if</span> (te-&gt;id == AE_DELETED_EVENT_ID) &#123;</span><br><span class="line">            aeTimeEvent *next = te-&gt;next;</span><br><span class="line">            <span class="comment">/* If a reference exists for this timer event,</span></span><br><span class="line"><span class="comment">             * don&#x27;t free it. This is currently incremented</span></span><br><span class="line"><span class="comment">             * for recursive timerProc calls */</span></span><br><span class="line">            <span class="keyword">if</span> (te-&gt;refcount) &#123;</span><br><span class="line">                te = next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (te-&gt;prev)</span><br><span class="line">                te-&gt;prev-&gt;next = te-&gt;next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                eventLoop-&gt;timeEventHead = te-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (te-&gt;next)</span><br><span class="line">                te-&gt;next-&gt;prev = te-&gt;prev;</span><br><span class="line">            <span class="keyword">if</span> (te-&gt;finalizerProc) &#123;</span><br><span class="line">                te-&gt;finalizerProc(eventLoop, te-&gt;clientData);</span><br><span class="line">                now = getMonotonicUs();</span><br><span class="line">            &#125;</span><br><span class="line">            zfree(te);</span><br><span class="line">            te = next;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在这次的事件循环中，不处理由被时间事件创建的时间事件。目前已无用</span></span><br><span class="line">        <span class="keyword">if</span> (te-&gt;id &gt; maxId) &#123;</span><br><span class="line">            te = te-&gt;next;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (te-&gt;when &lt;= now) &#123;</span><br><span class="line">            <span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">            id = te-&gt;id;</span><br><span class="line">            te-&gt;refcount++;</span><br><span class="line">            retval = te-&gt;timeProc(eventLoop, id, te-&gt;clientData);</span><br><span class="line">            te-&gt;refcount--;</span><br><span class="line">            processed++;</span><br><span class="line">            now = getMonotonicUs();</span><br><span class="line">            <span class="keyword">if</span> (retval != AE_NOMORE) &#123;</span><br><span class="line">                te-&gt;when = now + retval * <span class="number">1000</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                te-&gt;id = AE_DELETED_EVENT_ID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        te = te-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h3><p>在<code>IO多路复用模型</code>中，最重要的就是<code>select</code>函数，用以监听多个文件描述符的可读可写状态，当某些文件描述符可读或者可写时，该方法就会返回可读或可写的文件描述符个数。</p><p>缘起：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">startSaving</span><span class="params">(<span class="type">int</span> rdbflags)</span> &#123;</span><br><span class="line">    <span class="comment">/* Fire the persistence modules start event. */</span></span><br><span class="line">    <span class="type">int</span> subevent;</span><br><span class="line">    <span class="keyword">if</span> (rdbflags &amp; RDBFLAGS_AOF_PREAMBLE &amp;&amp; getpid() != server.pid)</span><br><span class="line">        subevent = REDISMODULE_SUBEVENT_PERSISTENCE_AOF_START;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (rdbflags &amp; RDBFLAGS_AOF_PREAMBLE)</span><br><span class="line">        subevent = REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_AOF_START;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (getpid()!=server.pid)</span><br><span class="line">        subevent = REDISMODULE_SUBEVENT_PERSISTENCE_RDB_START;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        subevent = REDISMODULE_SUBEVENT_PERSISTENCE_SYNC_RDB_START;</span><br><span class="line">    moduleFireServerEvent(REDISMODULE_EVENT_PERSISTENCE,subevent,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">stopSaving</span><span class="params">(<span class="type">int</span> success)</span> &#123;</span><br><span class="line">    <span class="comment">/* Fire the persistence modules end event. */</span></span><br><span class="line">    moduleFireServerEvent(REDISMODULE_EVENT_PERSISTENCE,</span><br><span class="line">                          success?</span><br><span class="line">                            REDISMODULE_SUBEVENT_PERSISTENCE_ENDED:</span><br><span class="line">                            REDISMODULE_SUBEVENT_PERSISTENCE_FAILED,</span><br><span class="line">                          <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://doc.yonyoucloud.com/doc/wiki/project/redis/event-driven.html">1. 事件驱动</a><br><a href="http://gosaturn.github.io/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/2015/11/23/redis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0_%E4%BA%8B%E4%BB%B6/">2. redis源码学习_事件</a><br><a href="https://www.cnblogs.com/Courage129/p/14338139.html">3. 浅析Redis与IO多路复用器原理</a><br><a href="https://doc.yonyoucloud.com/doc/wiki/project/redis/event-driven.html">4. Redis 事件驱动详解</a><br><a href="https://github.com/redis/redis/blob/6abb3c40384bd507fe410680e0e0fefc4141f8a3/src/server.c">5. server.c</a><br><a href="https://github.com/redis/redis/blob/6abb3c40384bd507fe410680e0e0fefc4141f8a3/src/ae.c">6. ae.c</a><br><a href="https://www.cyhone.com/articles/analysis-of-redis-ae/">7. Redis 事件循环器 (AE) 实现剖析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;服务器是一个事件驱动程序，服务器需要处理两类事件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文件事件处理器：redis</summary>
      
    
    
    
    <category term="数据库" scheme="https://mqrayblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis之io</title>
    <link href="https://mqrayblog.cn/2023/07/27/redis%E4%B9%8Bio/"/>
    <id>https://mqrayblog.cn/2023/07/27/redis%E4%B9%8Bio/</id>
    <published>2023-07-27T07:05:26.000Z</published>
    <updated>2023-07-27T07:05:26.851Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>c语言基础函数整理</title>
    <link href="https://mqrayblog.cn/2023/07/27/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/"/>
    <id>https://mqrayblog.cn/2023/07/27/c%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/</id>
    <published>2023-07-27T04:37:53.000Z</published>
    <updated>2023-07-31T04:34:03.392Z</updated>
    
    <content type="html"><![CDATA[<p>阅读redis源码过程中有比较多的C语言函数调用，起一个文档记录。</p><h4 id="fflush"><a href="#fflush" class="headerlink" title="fflush"></a>fflush</h4><p>刷新流stream的输出缓冲区，成功返回0，否则返回<code>eof</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fflush</span><span class="params">(FILE *stream)</span></span><br></pre></td></tr></table></figure><h4 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">char</span> *filename, <span class="type">char</span> *mode)</span>;</span><br></pre></td></tr></table></figure><h4 id="fclose"><a href="#fclose" class="headerlink" title="fclose"></a>fclose</h4><p>用于关闭一个已经打开的文件。关闭文件后，该文件的指针将不再指向该文件，文件的缓冲区中的数据将被写入到磁盘中，文件的描述符将被释放，以便其他程序可以使用该文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><h4 id="fileno"><a href="#fileno" class="headerlink" title="fileno"></a>fileno</h4><p>获取标准IO流的文件描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fileno</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure><h4 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h4><p>删除文件。<br>PS: 执行unlink()函数并不一定会真正的删除文件，它先会检查文件系统中此文件的连接数是否为<br>1，如果不是1说明此文件还有其他链接对象，因此只对此文件的连接数进行减1操作。若连接数为1，并且在此时没有任何进程打开该文件，此内容才会真正地被删除掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">unlink</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname)</span>;</span><br></pre></td></tr></table></figure><h4 id="snprintf"><a href="#snprintf" class="headerlink" title="snprintf"></a>snprintf</h4><p>用于格式化输出字符串，并将结果写入到指定的缓冲区，与 sprintf() 不同的是，snprintf() 会限制输出的字符数，避免缓冲区溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">snprintf</span> <span class="params">( <span class="type">char</span> * str, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> * format, ... )</span>;</span><br></pre></td></tr></table></figure><p><code>str</code>: 目标字符串，用于存储格式化后的字符串的字符数组的指针。<br><code>size</code>： 字符数组的大小。<br><code>format</code>: 格式化字符串。</p><h4 id="zmalloc"><a href="#zmalloc" class="headerlink" title="zmalloc"></a>zmalloc</h4><h4 id="zfree"><a href="#zfree" class="headerlink" title="zfree"></a>zfree</h4><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://www.runoob.com/cprogramming/c-function-fflush.html">1. 菜鸟教程-c库</a><br><a href="https://pubs.opengroup.org/onlinepubs/7908799/xsh/unlink.html">2. include&lt;unistd.h&gt;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;阅读redis源码过程中有比较多的C语言函数调用，起一个文档记录。&lt;/p&gt;
&lt;h4 id=&quot;fflush&quot;&gt;&lt;a href=&quot;#fflush&quot; class=&quot;headerlink&quot; title=&quot;fflush&quot;&gt;&lt;/a&gt;fflush&lt;/h4&gt;&lt;p&gt;刷新流stream的输出缓</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis之持久化</title>
    <link href="https://mqrayblog.cn/2023/07/24/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>https://mqrayblog.cn/2023/07/24/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2023-07-24T14:45:02.000Z</published>
    <updated>2023-07-27T11:40:51.719Z</updated>
    
    <content type="html"><![CDATA[<p>由于redis是内存数据库，其数据库状态保存在内存中。redis中提供了持久化功能，用以将redis内存中的数据库状态保存在磁盘中，避免意外的数据丢失。</p><p>Redis中提供了两种持久化方式，分别是<code>RDB</code>和<code>AOF</code>。</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p><code>RDB</code>持久化功能可以将某个时间点上的数据库状态保存到一个<code>RDB</code>文件中，所生成的<code>RDB</code>文件是一个经过压缩的二进制文件，通过该文件可以还原生成<code>RDB</code>文件时的数据库状态。</p><h3 id="RDB文件载入"><a href="#RDB文件载入" class="headerlink" title="RDB文件载入"></a>RDB文件载入</h3><p><code>rdb</code>文件的载入工作是在服务器启动时自动执行的。<br>因为<code>aof</code>文件的更新频率通常比<code>rdb</code>文件的更新频率高，所以如果服务器开启了<code>AOF</code>持久化功能，服务器将优先使用<code>AOF</code>文件来还原数据库状态。<br>只有在<code>AOF</code>持久化功能处于关闭时，服务器才会使用<code>rdb</code>文件来还原数据库状态。</p><p>另外，在服务器载入<code>rdb</code>文件期间，会一直处于阻塞状态，直到载入完毕。</p><h3 id="RDB文件创建"><a href="#RDB文件创建" class="headerlink" title="RDB文件创建"></a>RDB文件创建</h3><p><code>redis</code>中可以使用<code>SAVE</code>和<code>BGSAVE</code>两个命令生成<code>RDB</code>文件。<br>其中，<code>save</code>命令会阻塞服务器进程，直到<code>RDB</code>文件创建完毕位置，在此期间，服务器不能处理任何命令请求。而<code>BGSAVE</code>命令则会派生出一个子进程，由子进程负责创建<code>RDB</code>文件，服务器主进程可以继续处理命令请求。<br>由于<code>BGSAVE</code>可以在不阻塞服务器的情况下执行，因此<code>redis</code>提供了相应配置，条件触发<code>BGSAVE</code>命令。<br>在<code>redis.conf</code>中有如下配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]</span><br><span class="line">save <span class="number">3600</span> <span class="number">1</span> <span class="number">300</span> <span class="number">100</span> <span class="number">60</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><p>上述命令等价于如下三行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save <span class="number">3600</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">100</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure><ol><li>服务器在3600s内，对数据库至少修改了1次；</li><li>服务器在300s内，对数据库至少修改了100次；</li><li>服务器在60s内，对数据库至少修改了10000次；<br>上述任意条件满足时，服务器就会执行<code>BGSAVE</code>命令。</li></ol><p><code>RDB</code>持久化相关的配置体现在<code>redisServer</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">saveparam</span> *<span class="title">saveparams</span>;</span>   <span class="comment">// 触发rdb自动保存的配置数组</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> dirty;                <span class="comment">// 上一次save执行后，数据库表更次数</span></span><br><span class="line">    <span class="type">time_t</span> lastsave;                <span class="comment">// 上次成功执行 save的 unix时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">saveparam</span> &#123;</span></span><br><span class="line">    <span class="type">time_t</span> seconds; <span class="comment">// 秒数</span></span><br><span class="line">    <span class="type">int</span> changes; <span class="comment">// 修改次数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="RDB文件结构"><a href="#RDB文件结构" class="headerlink" title="RDB文件结构"></a>RDB文件结构</h3><p>下图描述了一个<code>RDB</code>文件结构：<br><img src="/2023/07/24/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/rdb-file.png"></p><ol><li>文件开头保存的是二进制的<code>redis</code>，占三个字节；</li><li><code>db_version</code>: 占四个字节，是字符串表示的整数，用以记录rdb文件的版本号；</li><li><code>databases</code>:用以保存任意多个非空数据库状态；</li><li><code>EOF</code>: 占一个字节，用以标识rdb文件中数据库状态记录的结束；</li><li><code>check_sum</code>: 为8字节长度的无符号整数，保存对数据库状态的校验和；<br>其中，<code>databases</code>中每个非空数据库在<code>rdb</code>文件中都可以保存为<code>SELECTDB|db_number|key_value_pair</code>三部分。</li></ol><img src="/2023/07/24/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/rdb-file-dbs.png"><p>而每一个<code>key_value_pair</code>都保存了一个或多个键值对，如果键值对带有过期时间，则键值对中的过期时间也会被保存。<br>键值对的保存参见： <a href="http://redisbook.com/preview/rdb/rdb_struct.html">redis设计与实现</a></p><h3 id="RDB-源码实现"><a href="#RDB-源码实现" class="headerlink" title="RDB 源码实现"></a>RDB 源码实现</h3><h4 id="save-命令的实现"><a href="#save-命令的实现" class="headerlink" title="save 命令的实现"></a>save 命令的实现</h4><p>在<code>redis</code>客户端中，键入<code>save</code>即可以触发<code>rdb</code>文件的生成，如果后台没有子进程在生成<code>rdb </code>就会调用<code>rdbSave</code>生成文件，并保存在磁盘中。</p><h5 id="saveCommand"><a href="#saveCommand" class="headerlink" title="saveCommand"></a>saveCommand</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">saveCommand</span><span class="params">(client *c)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查是否有进程在执行save，如有，则停止</span></span><br><span class="line">    <span class="keyword">if</span> (server.child_type == CHILD_TYPE_RDB) &#123;</span><br><span class="line">        addReplyError(c,<span class="string">&quot;Background save already in progress&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server.stat_rdb_saves++;</span><br><span class="line"></span><br><span class="line">    rdbSaveInfo rsi, *rsiptr;</span><br><span class="line">    rsiptr = rdbPopulateSaveInfo(&amp;rsi);</span><br><span class="line">    <span class="keyword">if</span> (rdbSave(SLAVE_REQ_NONE,server.rdb_filename,rsiptr,RDBFLAGS_NONE) == C_OK) &#123;</span><br><span class="line">        addReply(c,shared.ok);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        addReplyErrorObject(c,shared.err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rdbPopulateSaveInfo"><a href="#rdbPopulateSaveInfo" class="headerlink" title="rdbPopulateSaveInfo"></a>rdbPopulateSaveInfo</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">rdbSaveInfo *<span class="title function_">rdbPopulateSaveInfo</span><span class="params">(rdbSaveInfo *rsi)</span> &#123;</span><br><span class="line">    rdbSaveInfo rsi_init = RDB_SAVE_INFO_INIT;</span><br><span class="line">    *rsi = rsi_init;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前节点是主节点，且当 repl_backlog 不为null时，可以复制副本信息；</span></span><br><span class="line">    <span class="comment">// 如果 repl_backlog 为空，则代表当前实例不再副本链中。在这种场景下，副本无用。</span></span><br><span class="line">    <span class="comment">// 当从节点连接时，repl_backlog=null将触发完全同步，榆次同事将会创造新的副本。</span></span><br><span class="line">    <span class="keyword">if</span> (!server.masterhost &amp;&amp; server.repl_backlog) &#123;</span><br><span class="line">         <span class="comment">// 如果 server.slaveseldb=-1，则代表主节点在完全同步之后尚未接收任何请求；</span></span><br><span class="line">         <span class="comment">// 因此可以将 repl_stream_db=0，以允许从节点重新加载副本偏移量；</span></span><br><span class="line">         <span class="comment">// 此过程是安全的，因为下一次写入前将生成 select语句</span></span><br><span class="line">        rsi-&gt;repl_stream_db = server.slaveseldb == <span class="number">-1</span> ? <span class="number">0</span> : server.slaveseldb;</span><br><span class="line">        <span class="keyword">return</span> rsi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 如果当前是从节点，则需要连接到主节点，以获取当前选中的DB</span></span><br><span class="line">    <span class="keyword">if</span> (server.master) &#123;</span><br><span class="line">        rsi-&gt;repl_stream_db = server.master-&gt;db-&gt;id;</span><br><span class="line">        <span class="keyword">return</span> rsi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有一个缓存的master，可以使用它来填充选中的DB信息；从节点能根据来自master的数据增加 master_repl_offset，因此即使断开连接，master上的偏移量仍是有效的。</span></span><br><span class="line">    <span class="keyword">if</span> (server.cached_master) &#123;</span><br><span class="line">        rsi-&gt;repl_stream_db = server.cached_master-&gt;db-&gt;id;</span><br><span class="line">        <span class="keyword">return</span> rsi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rdbSave"><a href="#rdbSave" class="headerlink" title="rdbSave"></a>rdbSave</h5><p><code>rdbSave</code>命令：将当前redis的数据库状态保存在磁盘中，返回ok即成功，否则返回C_ERR。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rdbSave</span><span class="params">(<span class="type">int</span> req, <span class="type">char</span> *filename, rdbSaveInfo *rsi, <span class="type">int</span> rdbflags)</span> &#123;</span><br><span class="line">    <span class="type">char</span> tmpfile[<span class="number">256</span>];</span><br><span class="line">    <span class="type">char</span> cwd[MAXPATHLEN]; <span class="comment">/* Current working dir path for error messages. */</span></span><br><span class="line"></span><br><span class="line">    startSaving(RDBFLAGS_NONE);</span><br><span class="line">    <span class="comment">// 创建临时文件</span></span><br><span class="line">    <span class="built_in">snprintf</span>(tmpfile,<span class="number">256</span>,<span class="string">&quot;temp-%d.rdb&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rdbSaveInternal(req,tmpfile,rsi,rdbflags) != C_OK) &#123;</span><br><span class="line">        stopSaving(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重命名文件</span></span><br><span class="line">    <span class="keyword">if</span> (rename(tmpfile,filename) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *str_err = strerror(errno);</span><br><span class="line">        <span class="type">char</span> *cwdp = getcwd(cwd,MAXPATHLEN);</span><br><span class="line">        serverLog(LL_WARNING,</span><br><span class="line">            <span class="string">&quot;Error moving temp DB file %s on the final &quot;</span></span><br><span class="line">            <span class="string">&quot;destination %s (in server root dir %s): %s&quot;</span>,</span><br><span class="line">            tmpfile,</span><br><span class="line">            filename,</span><br><span class="line">            cwdp ? cwdp : <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">            str_err);</span><br><span class="line">        unlink(tmpfile);</span><br><span class="line">        stopSaving(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fsyncFileDir(filename) != <span class="number">0</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING,</span><br><span class="line">            <span class="string">&quot;Failed to fsync directory while saving DB: %s&quot;</span>, strerror(errno));</span><br><span class="line">        stopSaving(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serverLog(LL_NOTICE,<span class="string">&quot;DB saved on disk&quot;</span>);</span><br><span class="line">    <span class="comment">// 将 server.dirty 清零，该参数用以记录在上次生成rdb文件之后有多少次数据变更</span></span><br><span class="line">    server.dirty = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 记录上一次执行save操作的时间</span></span><br><span class="line">    server.lastsave = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 更新save操作状态</span></span><br><span class="line">    server.lastbgsave_status = C_OK;</span><br><span class="line">    stopSaving(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rdbSaveInternal"><a href="#rdbSaveInternal" class="headerlink" title="rdbSaveInternal"></a>rdbSaveInternal</h5><p>上述过程调用了 <code>rdbSaveInternal</code> 方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">rdbSaveInternal</span><span class="params">(<span class="type">int</span> req, <span class="type">const</span> <span class="type">char</span> *filename, rdbSaveInfo *rsi, <span class="type">int</span> rdbflags)</span> &#123;</span><br><span class="line">    <span class="type">char</span> cwd[MAXPATHLEN]; <span class="comment">/* Current working dir path for error messages. */</span></span><br><span class="line">    rio rdb;</span><br><span class="line">    <span class="type">int</span> error = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> saved_errno;</span><br><span class="line">    <span class="type">char</span> *err_op;    <span class="comment">/* For a detailed log */</span></span><br><span class="line">    <span class="comment">// 以写权限打开文件</span></span><br><span class="line">    FILE *fp = fopen(filename,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp) &#123;</span><br><span class="line">        saved_errno = errno;</span><br><span class="line">        <span class="type">char</span> *str_err = strerror(errno);</span><br><span class="line">        <span class="type">char</span> *cwdp = getcwd(cwd,MAXPATHLEN);</span><br><span class="line">        serverLog(LL_WARNING,</span><br><span class="line">            <span class="string">&quot;Failed opening the temp RDB file %s (in server root dir %s) &quot;</span></span><br><span class="line">            <span class="string">&quot;for saving: %s&quot;</span>,</span><br><span class="line">            filename,</span><br><span class="line">            cwdp ? cwdp : <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">            str_err);</span><br><span class="line">        errno = saved_errno;</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化 rio 对象 （文件对象io）</span></span><br><span class="line">    rioInitWithFile(&amp;rdb,fp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.rdb_save_incremental_fsync) &#123;</span><br><span class="line">        rioSetAutoSync(&amp;rdb,REDIS_AUTOSYNC_BYTES);</span><br><span class="line">        <span class="keyword">if</span> (!(rdbflags &amp; RDBFLAGS_KEEP_CACHE)) rioSetReclaimCache(&amp;rdb,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据库状态写入到rio中</span></span><br><span class="line">    <span class="keyword">if</span> (rdbSaveRio(req,&amp;rdb,&amp;error,rdbflags,rsi) == C_ERR) &#123;</span><br><span class="line">        errno = error;</span><br><span class="line">        err_op = <span class="string">&quot;rdbSaveRio&quot;</span>;</span><br><span class="line">        <span class="keyword">goto</span> werr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清理缓冲区，以保证所有数据都被写入磁盘</span></span><br><span class="line">    <span class="keyword">if</span> (fflush(fp)) &#123; err_op = <span class="string">&quot;fflush&quot;</span>; <span class="keyword">goto</span> werr; &#125;</span><br><span class="line">    <span class="comment">// 将fp指向的文件同步到磁盘中</span></span><br><span class="line">    <span class="keyword">if</span> (fsync(fileno(fp))) &#123; err_op = <span class="string">&quot;fsync&quot;</span>; <span class="keyword">goto</span> werr; &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(rdbflags &amp; RDBFLAGS_KEEP_CACHE) &amp;&amp; reclaimFilePageCache(fileno(fp), <span class="number">0</span>, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        serverLog(LL_NOTICE,<span class="string">&quot;Unable to reclaim cache after saving RDB: %s&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    <span class="keyword">if</span> (fclose(fp)) &#123; fp = <span class="literal">NULL</span>; err_op = <span class="string">&quot;fclose&quot;</span>; <span class="keyword">goto</span> werr; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    saved_errno = errno;</span><br><span class="line">    serverLog(LL_WARNING,<span class="string">&quot;Write error while saving DB to the disk(%s): %s&quot;</span>, err_op, strerror(errno));</span><br><span class="line">    <span class="keyword">if</span> (fp) fclose(fp);</span><br><span class="line">    unlink(filename);</span><br><span class="line">    errno = saved_errno;</span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="rdbSaveRio"><a href="#rdbSaveRio" class="headerlink" title="rdbSaveRio"></a>rdbSaveRio</h5><p>写入文件的主要逻辑由<code>rdbSaveRio</code>完成：[rio是redis抽象的io层，面向缓冲区、文件IO和socket IO]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rdbSaveRio</span><span class="params">(<span class="type">int</span> req, rio *rdb, <span class="type">int</span> *error, <span class="type">int</span> rdbflags, rdbSaveInfo *rsi)</span> &#123;</span><br><span class="line">    <span class="type">char</span> magic[<span class="number">10</span>];</span><br><span class="line">    <span class="type">uint64_t</span> cksum;</span><br><span class="line">    <span class="type">long</span> key_counter = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.rdb_checksum)</span><br><span class="line">        rdb-&gt;update_cksum = rioGenericUpdateChecksum;</span><br><span class="line">    <span class="built_in">snprintf</span>(magic,<span class="keyword">sizeof</span>(magic),<span class="string">&quot;REDIS%04d&quot;</span>,RDB_VERSION);</span><br><span class="line">    <span class="keyword">if</span> (rdbWriteRaw(rdb,magic,<span class="number">9</span>) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">if</span> (rdbSaveInfoAuxFields(rdb,rdbflags,rsi) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">if</span> (!(req &amp; SLAVE_REQ_RDB_EXCLUDE_DATA) &amp;&amp; rdbSaveModulesAux(rdb, REDISMODULE_AUX_BEFORE_RDB) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* save functions */</span></span><br><span class="line">    <span class="keyword">if</span> (!(req &amp; SLAVE_REQ_RDB_EXCLUDE_FUNCTIONS) &amp;&amp; rdbSaveFunctions(rdb) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历服务器上的所有数据库</span></span><br><span class="line">    <span class="comment">/* save all databases, skip this if we&#x27;re in functions-only mode */</span></span><br><span class="line">    <span class="keyword">if</span> (!(req &amp; SLAVE_REQ_RDB_EXCLUDE_DATA)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rdbSaveDb(rdb, j, rdbflags, &amp;key_counter) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(req &amp; SLAVE_REQ_RDB_EXCLUDE_DATA) &amp;&amp; rdbSaveModulesAux(rdb, REDISMODULE_AUX_AFTER_RDB) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向 rdb文件对象中写入 EOF</span></span><br><span class="line">    <span class="keyword">if</span> (rdbSaveType(rdb,RDB_OPCODE_EOF) == <span class="number">-1</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* CRC64 checksum. It will be zero if checksum computation is disabled, the</span></span><br><span class="line"><span class="comment">     * loading code skips the check in this case. */</span></span><br><span class="line">    cksum = rdb-&gt;cksum;</span><br><span class="line">    memrev64ifbe(&amp;cksum);</span><br><span class="line">    <span class="keyword">if</span> (rioWrite(rdb,&amp;cksum,<span class="number">8</span>) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    <span class="keyword">if</span> (error) *error = errno;</span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rdbSaveDb"><a href="#rdbSaveDb" class="headerlink" title="rdbSaveDb"></a>rdbSaveDb</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储每个数据库中的数据库状态</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">rdbSaveDb</span><span class="params">(rio *rdb, <span class="type">int</span> dbid, <span class="type">int</span> rdbflags, <span class="type">long</span> *key_counter)</span> &#123;</span><br><span class="line">    dictIterator *di;</span><br><span class="line">    dictEntry *de;</span><br><span class="line">    <span class="type">ssize_t</span> written = <span class="number">0</span>;</span><br><span class="line">    <span class="type">ssize_t</span> res;</span><br><span class="line">    <span class="type">static</span> <span class="type">long</span> <span class="type">long</span> info_updated_time = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *pname = (rdbflags &amp; RDBFLAGS_AOF_PREAMBLE) ? <span class="string">&quot;AOF rewrite&quot;</span> :  <span class="string">&quot;RDB&quot;</span>;</span><br><span class="line"></span><br><span class="line">    redisDb *db = server.db + dbid;</span><br><span class="line">    dict *d = db-&gt;dict;</span><br><span class="line">    <span class="keyword">if</span> (dictSize(d) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 如果此数据库中未保存数据，则跳过此数据库。</span></span><br><span class="line">    di = dictGetSafeIterator(d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向rdb文件中写入SELECTDB，以标识接下来将要读到数据库编号</span></span><br><span class="line">    <span class="keyword">if</span> ((res = rdbSaveType(rdb,RDB_OPCODE_SELECTDB)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    written += res;</span><br><span class="line">    <span class="comment">// 向rdb文件中写入此数据库键值对占用的的长度</span></span><br><span class="line">    <span class="keyword">if</span> ((res = rdbSaveLen(rdb, dbid)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    written += res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Write the RESIZE DB opcode. */</span></span><br><span class="line">    <span class="type">uint64_t</span> db_size, expires_size;</span><br><span class="line">    db_size = dictSize(db-&gt;dict);</span><br><span class="line">    expires_size = dictSize(db-&gt;expires);</span><br><span class="line">    <span class="keyword">if</span> ((res = rdbSaveType(rdb,RDB_OPCODE_RESIZEDB)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    written += res;</span><br><span class="line">    <span class="keyword">if</span> ((res = rdbSaveLen(rdb,db_size)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    written += res;</span><br><span class="line">    <span class="keyword">if</span> ((res = rdbSaveLen(rdb,expires_size)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">    written += res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历当前db的每一个entry</span></span><br><span class="line">    <span class="keyword">while</span>((de = dictNext(di)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        sds keystr = dictGetKey(de);</span><br><span class="line">        robj key, *o = dictGetVal(de);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> expire;</span><br><span class="line">        <span class="type">size_t</span> rdb_bytes_before_key = rdb-&gt;processed_bytes;</span><br><span class="line"></span><br><span class="line">        initStaticStringObject(key,keystr);</span><br><span class="line">        expire = getExpire(db,&amp;key);</span><br><span class="line">        <span class="keyword">if</span> ((res = rdbSaveKeyValuePair(rdb, &amp;key, o, expire, dbid)) &lt; <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">        written += res;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在fork出来的子进程中，可以尝试将内存释放回操作系统，同时尽可能减少COW</span></span><br><span class="line">        <span class="type">size_t</span> dump_size = rdb-&gt;processed_bytes - rdb_bytes_before_key;</span><br><span class="line">        <span class="keyword">if</span> (server.in_fork_child) dismissObject(o, dump_size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每秒更新一次 child 状态信息，以避免在每次迭代中调用调用mstime()</span></span><br><span class="line">        <span class="keyword">if</span> (((*key_counter)++ &amp; <span class="number">1023</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> now = mstime();</span><br><span class="line">            <span class="keyword">if</span> (now - info_updated_time &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                sendChildInfo(CHILD_INFO_TYPE_CURRENT_INFO, *key_counter, pname);</span><br><span class="line">                info_updated_time = now;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dictReleaseIterator(di);</span><br><span class="line">    <span class="keyword">return</span> written;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    dictReleaseIterator(di);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>redis</code>是单线程模型，执行<code>save</code>会阻塞服务器主进程执行其他请求吗，故而提供了另外一种实现<code>bgsave</code>，通过fork子进程的方式，使用子进程创建<code>rdb</code>文件，文件的保存过程中不影响服务器的正常读写。</p><h4 id="bgsave-命令的实现"><a href="#bgsave-命令的实现" class="headerlink" title="bgsave 命令的实现"></a>bgsave 命令的实现</h4><h5 id="bgsaveCommand"><a href="#bgsaveCommand" class="headerlink" title="bgsaveCommand"></a>bgsaveCommand</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bgsaveCommand</span><span class="params">(client *c)</span> &#123;</span><br><span class="line">    <span class="type">int</span> schedule = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The SCHEDULE option changes the behavior of BGSAVE when an AOF rewrite</span></span><br><span class="line"><span class="comment">     * is in progress. Instead of returning an error a BGSAVE gets scheduled. */</span></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;argc == <span class="number">2</span> &amp;&amp; !strcasecmp(c-&gt;argv[<span class="number">1</span>]-&gt;ptr,<span class="string">&quot;schedule&quot;</span>)) &#123;</span><br><span class="line">            schedule = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            addReplyErrorObject(c,shared.syntaxerr);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rdbSaveInfo rsi, *rsiptr;</span><br><span class="line">    rsiptr = rdbPopulateSaveInfo(&amp;rsi);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.child_type == CHILD_TYPE_RDB) &#123;</span><br><span class="line">        addReplyError(c,<span class="string">&quot;Background save already in progress&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasActiveChildProcess() || server.in_exec) &#123;</span><br><span class="line">        <span class="keyword">if</span> (schedule || server.in_exec) &#123;</span><br><span class="line">            server.rdb_bgsave_scheduled = <span class="number">1</span>;</span><br><span class="line">            addReplyStatus(c,<span class="string">&quot;Background saving scheduled&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            addReplyError(c,</span><br><span class="line">            <span class="string">&quot;Another child process is active (AOF?): can&#x27;t BGSAVE right now. &quot;</span></span><br><span class="line">            <span class="string">&quot;Use BGSAVE SCHEDULE in order to schedule a BGSAVE whenever &quot;</span></span><br><span class="line">            <span class="string">&quot;possible.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rdbSaveBackground(SLAVE_REQ_NONE,server.rdb_filename,rsiptr,RDBFLAGS_NONE) == C_OK) &#123;</span><br><span class="line">        addReplyStatus(c,<span class="string">&quot;Background saving started&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        addReplyErrorObject(c,shared.err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rdbPopulateSaveInfo-1"><a href="#rdbPopulateSaveInfo-1" class="headerlink" title="rdbPopulateSaveInfo"></a>rdbPopulateSaveInfo</h4><p>前文已有描述，不再复述。</p><h4 id="rdbSaveBackground"><a href="#rdbSaveBackground" class="headerlink" title="rdbSaveBackground"></a>rdbSaveBackground</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rdbSaveBackground</span><span class="params">(<span class="type">int</span> req, <span class="type">char</span> *filename, rdbSaveInfo *rsi, <span class="type">int</span> rdbflags)</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有正在执行 save、bgsave、aof-rewriting、被加载模块派生的某个副进程时，返回 C_ERR</span></span><br><span class="line">    <span class="keyword">if</span> (hasActiveChildProcess()) <span class="keyword">return</span> C_ERR;</span><br><span class="line">    <span class="comment">// 记录服务器上rdb save的执行次数</span></span><br><span class="line">    server.stat_rdb_saves++;</span><br><span class="line"></span><br><span class="line">    server.dirty_before_bgsave = server.dirty;</span><br><span class="line">    <span class="comment">// 记录上一次执行 bgsave 的unix时间</span></span><br><span class="line">    server.lastbgsave_try = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((childpid = redisFork(CHILD_TYPE_RDB)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> retval;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// child子进程，修改进程标题</span></span><br><span class="line">        redisSetProcTitle(<span class="string">&quot;redis-rdb-bgsave&quot;</span>);</span><br><span class="line">        redisSetCpuAffinity(server.bgsave_cpulist);</span><br><span class="line">        <span class="comment">// 进行rdb持久化，之后与save执行过程无异</span></span><br><span class="line">        retval = rdbSave(req, filename,rsi,rdbflags);</span><br><span class="line">        <span class="keyword">if</span> (retval == C_OK) &#123;</span><br><span class="line">            sendChildCowInfo(CHILD_INFO_TYPE_RDB_COW_SIZE, <span class="string">&quot;RDB&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        exitFromChild((retval == C_OK) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 父进程中，记录子进程的fork时间等信息</span></span><br><span class="line">        <span class="keyword">if</span> (childpid == <span class="number">-1</span>) &#123;</span><br><span class="line">            server.lastbgsave_status = C_ERR;</span><br><span class="line">            serverLog(LL_WARNING,<span class="string">&quot;Can&#x27;t save in background: fork: %s&quot;</span>,</span><br><span class="line">                strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> C_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        serverLog(LL_NOTICE,<span class="string">&quot;Background saving started by pid %ld&quot;</span>,(<span class="type">long</span>) childpid);</span><br><span class="line">        <span class="comment">// 记录子进程中执行rdbsave的时间</span></span><br><span class="line">        server.rdb_save_time_start = time(<span class="literal">NULL</span>);</span><br><span class="line">        server.rdb_child_type = RDB_CHILD_TYPE_DISK;</span><br><span class="line">        <span class="keyword">return</span> C_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C_OK; <span class="comment">/* unreached */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="redisFork"><a href="#redisFork" class="headerlink" title="redisFork"></a>redisFork</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* purpose is one of CHILD_TYPE_ types */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">redisFork</span><span class="params">(<span class="type">int</span> purpose)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isMutuallyExclusiveChildType(purpose)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasActiveChildProcess()) &#123;</span><br><span class="line">            errno = EEXIST;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        openChildInfoPipe();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> childpid;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> start = ustime();</span><br><span class="line">    <span class="keyword">if</span> ((childpid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置遵循如下原因</span></span><br><span class="line">        <span class="comment">// 1. 由于信号随时可能触发，所以需要先设置信号处理程序</span></span><br><span class="line">        <span class="comment">// 2. 随后调整OOM得分然后再做其他事情，以此帮助OOM killer在资源不足时进行回收</span></span><br><span class="line">        server.in_fork_child = purpose;</span><br><span class="line">        setupChildSignalHandlers();</span><br><span class="line">        setOOMScoreAdj(CONFIG_OOM_BGCHILD);</span><br><span class="line">        updateDictResizePolicy();</span><br><span class="line">        dismissMemoryInChild();</span><br><span class="line">        <span class="comment">// fork结束后关闭子进程中未用到的资源</span></span><br><span class="line">        closeChildUnusedResourceAfterFork();</span><br><span class="line">        <span class="comment">/* Close the reading part, so that if the parent crashes, the child will</span></span><br><span class="line"><span class="comment">         * get a write error and exit. */</span></span><br><span class="line">        <span class="keyword">if</span> (server.child_info_pipe[<span class="number">0</span>] != <span class="number">-1</span>)</span><br><span class="line">            close(server.child_info_pipe[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Parent */</span></span><br><span class="line">        <span class="keyword">if</span> (childpid == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> fork_errno = errno;</span><br><span class="line">            <span class="keyword">if</span> (isMutuallyExclusiveChildType(purpose)) closeChildInfoPipe();</span><br><span class="line">            errno = fork_errno;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        server.stat_total_forks++;</span><br><span class="line">        server.stat_fork_time = ustime()-start;</span><br><span class="line">        server.stat_fork_rate = (<span class="type">double</span>) zmalloc_used_memory() * <span class="number">1000000</span> / server.stat_fork_time / (<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>); <span class="comment">/* GB per second. */</span></span><br><span class="line">        latencyAddSampleIfNeeded(<span class="string">&quot;fork&quot;</span>,server.stat_fork_time/<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* The child_pid and child_type are only for mutually exclusive children.</span></span><br><span class="line"><span class="comment">         * other child types should handle and store their pid&#x27;s in dedicated variables.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Today, we allows CHILD_TYPE_LDB to run in parallel with the other fork types:</span></span><br><span class="line"><span class="comment">         * - it isn&#x27;t used for production, so it will not make the server be less efficient</span></span><br><span class="line"><span class="comment">         * - used for debugging, and we don&#x27;t want to block it from running while other</span></span><br><span class="line"><span class="comment">         *   forks are running (like RDB and AOF) */</span></span><br><span class="line">        <span class="keyword">if</span> (isMutuallyExclusiveChildType(purpose)) &#123;</span><br><span class="line">            server.child_pid = childpid;</span><br><span class="line">            server.child_type = purpose;</span><br><span class="line">            server.stat_current_cow_peak = <span class="number">0</span>;</span><br><span class="line">            server.stat_current_cow_bytes = <span class="number">0</span>;</span><br><span class="line">            server.stat_current_cow_updated = <span class="number">0</span>;</span><br><span class="line">            server.stat_current_save_keys_processed = <span class="number">0</span>;</span><br><span class="line">            server.stat_module_progress = <span class="number">0</span>;</span><br><span class="line">            server.stat_current_save_keys_total = dbTotalServerKeyCount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        updateDictResizePolicy();</span><br><span class="line">        moduleFireServerEvent(REDISMODULE_EVENT_FORK_CHILD,</span><br><span class="line">                              REDISMODULE_SUBEVENT_FORK_CHILD_BORN,</span><br><span class="line">                              <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> childpid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，<code>redis</code>中定义了五种子进程类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_TYPE_NONE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_TYPE_RDB 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_TYPE_AOF 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_TYPE_LDB 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHILD_TYPE_MODULE 4</span></span><br></pre></td></tr></table></figure><h4 id="rdbsave-命令总结"><a href="#rdbsave-命令总结" class="headerlink" title="rdbsave 命令总结"></a>rdbsave 命令总结</h4><img src="/2023/07/24/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/rdb-save.png"><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>除了<code>rdb</code>持久化外，<code>redis</code>还提供了<code>aof， append only file</code>持久化功能，将服务器执行的命令以<code>redis的命令请求协议格式</code>记录到<code>aof</code>文件中。<br>redis中默认不开启<code>aof</code>持久化功能，可通过修改如下配置实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly no ==&gt; appendonly yes</span><br></pre></td></tr></table></figure><p>在<code>redis.conf</code>中定义了<code>aof</code>持久化功能</p><h3 id="AOF-命令追加"><a href="#AOF-命令追加" class="headerlink" title="AOF 命令追加"></a>AOF 命令追加</h3><p><code>redisServer</code>中<code>aof</code>相关参数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> stat_aof_rewrites;    <span class="comment">/* number of aof file rewrites performed */</span></span><br><span class="line">    <span class="comment">/* AOF persistence */</span></span><br><span class="line">    <span class="type">int</span> aof_enabled;                <span class="comment">/* AOF configuration */</span></span><br><span class="line">    <span class="type">int</span> aof_state;                  <span class="comment">/* AOF_(ON|OFF|WAIT_REWRITE) */</span></span><br><span class="line">    <span class="type">int</span> aof_fsync;                  <span class="comment">// aof 文件同步模式</span></span><br><span class="line">    <span class="type">int</span> aof_no_fsync_on_rewrite;    <span class="comment">// aof 重写标志位， 如果已经在重写，则无需同步</span></span><br><span class="line">    <span class="type">int</span> aof_rewrite_perc;           <span class="comment">// aof重写间隔</span></span><br><span class="line">    <span class="type">off_t</span> aof_rewrite_min_size;     <span class="comment">// aof文件的最小bytes</span></span><br><span class="line">    <span class="type">off_t</span> aof_rewrite_base_size;    <span class="comment">// 最近执行aof重写时 aof文件的大小</span></span><br><span class="line">    <span class="type">off_t</span> aof_current_size;         <span class="comment">// 当前aof文件大小</span></span><br><span class="line">    <span class="type">off_t</span> aof_last_incr_size;       <span class="comment">// 上一次aof重写后，文件增加的字节数</span></span><br><span class="line">    <span class="type">int</span> aof_rewrite_scheduled;      <span class="comment">// 一旦 bgsave终止，执行aof重写</span></span><br><span class="line">    sds aof_buf;      <span class="comment">// aof 缓冲区</span></span><br><span class="line">    <span class="type">int</span> aof_fd;       <span class="comment">// 当前aof的文件描述符</span></span><br><span class="line">    <span class="type">int</span> aof_selected_db; <span class="comment">/* Currently selected DB in AOF */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端执行命令时，服务器在执行命令时，会将该值用协议进行封装，而后追加到<code>aof_buf</code>缓冲区中。</p><h3 id="AOF文件写入与同步"><a href="#AOF文件写入与同步" class="headerlink" title="AOF文件写入与同步"></a>AOF文件写入与同步</h3><p><code>redis</code>服务器进程实际上是一个事件循环<code>eventLoop</code>，循环中包含两个事件：<code>文件事件</code>和<code>时间事件</code>，其中，文件时间负责接收客户端的请求、向客户端发送回复命令等；时间事件则执行像<code>severCron</code>之类需要定时运行的函数。</p><p>服务器处理文件事件时，可能会执行写命令，这些内容将被加入到redisServer.aof_buf中。所以在结束一个事件循环后，都会调用<code>flushAppendOnlyFile</code>函数，考虑是否将<code>aof_buf</code>缓冲区中的内容写入和保存到<code>AOF</code>文件中。<br>系统提供了<code>fsync</code>和<code>fdatasync</code>两个同步函数，可以强制让操作系统立即将缓冲区中的数据写入到磁盘中，从而确保写入数据的安全性。</p><h4 id="AOF持久化模式"><a href="#AOF持久化模式" class="headerlink" title="AOF持久化模式"></a>AOF持久化模式</h4><p><code>redisServer</code>中 <code>aof_fsync</code>定义了服务器的持久化行为，其取值如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AOF_FSYNC_NO 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AOF_FSYNC_ALWAYS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AOF_FSYNC_EVERYSEC 2</span></span><br></pre></td></tr></table></figure><ol><li><code>AOF_FSYNC_NO</code>: 将<code>aof_buf</code>缓冲区中的所有内容写入到<code>AOF</code>文件中，但不对AOF文件进行同步，何时同步由操作系统决定。[aof不是在磁盘上么？为什么会有同步的差异]</li><li><code>AOF_FSYNC_ALWAYS</code>: 将<code>aof_buf</code>缓冲区中的所有内容写入并同步到<code>AOF</code>文件中。</li><li><code>AOF_FSYNC_EVERYSEC</code>: 将<code>aof_buf</code>缓冲区中的所有内容写入到<code>AOF</code>文件中，如果距上次同步AOF文件的时间超过一秒钟，则再次对<code>AOF</code>文件进行同步，此同步过程有一个子线程处理。<br>默认为 <code>AOF_FSYNC_EVERYSEC</code>。<blockquote><p>这里之所以有写入和同步的差异，是因为在操作系统中，用户调用write函数将数据写入到文件时，并不是立即将该数据落盘，而是先将数据保存在一个内存缓冲区中，待缓冲区中的文件被填满，或者超出指定时限后，才真正将缓冲区中的数据写入到磁盘中。</p></blockquote></li></ol><h4 id="AOF持久化模式的对比"><a href="#AOF持久化模式的对比" class="headerlink" title="AOF持久化模式的对比"></a>AOF持久化模式的对比</h4><ol><li>安全性角度：<code>always</code>&gt; <code>every_sec</code>&gt;<code>no</code>，即使出现停机故障，<code>aof</code>持久化也只会丢失一个事件循环中所产生的命令数据。而<code>every_sec</code>也只会丢失一秒钟的命令数据。</li><li>效率：<code>always</code>&lt; <code>every_sec</code> &lt; <code>no</code>，因为 服务器在每个事件循环中，既需要将<code>aof_buf</code>缓冲区中的所有内容写入到<code>AOF</code>文件中，也需要将页缓存中的数据同步到<code>AOF</code>文件中。而<code>no</code>模式下，无需执行同步操作，故而该模式下<code>AOF</code>文件的写入速度最快，但是同步时间反而是最长的。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 force=1，则无论是否有后台调用fsync，文件都将被写入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">flushAppendOnlyFile</span><span class="params">(<span class="type">int</span> force)</span> &#123;</span><br><span class="line">    <span class="type">ssize_t</span> nwritten;</span><br><span class="line">    <span class="type">int</span> sync_in_progress = <span class="number">0</span>;</span><br><span class="line">    <span class="type">mstime_t</span> latency;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sdslen(server.aof_buf) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_EVERYSEC &amp;&amp;</span><br><span class="line">            server.aof_last_incr_fsync_offset != server.aof_last_incr_size &amp;&amp;</span><br><span class="line">            server.unixtime &gt; server.aof_last_fsync &amp;&amp;</span><br><span class="line">            !(sync_in_progress = aofFsyncInProgress())) &#123;</span><br><span class="line">            <span class="keyword">goto</span> try_fsync;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Check if we need to do fsync even the aof buffer is empty,</span></span><br><span class="line"><span class="comment">         * the reason is described in the previous AOF_FSYNC_EVERYSEC block,</span></span><br><span class="line"><span class="comment">         * and AOF_FSYNC_ALWAYS is also checked here to handle a case where</span></span><br><span class="line"><span class="comment">         * aof_fsync is changed from everysec to always. */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_ALWAYS &amp;&amp;</span><br><span class="line">                   server.aof_last_incr_fsync_offset != server.aof_last_incr_size)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">goto</span> try_fsync;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_EVERYSEC)</span><br><span class="line">        sync_in_progress = aofFsyncInProgress();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_EVERYSEC &amp;&amp; !force) &#123;</span><br><span class="line">        <span class="comment">// EVERYSEC 模式下， 将在后台执行fsync</span></span><br><span class="line">        <span class="comment">// 如果fsync正在进行中，则在2秒后尝试进行 fsync</span></span><br><span class="line">        <span class="keyword">if</span> (sync_in_progress) &#123;</span><br><span class="line">            <span class="keyword">if</span> (server.aof_flush_postponed_start == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/* No previous write postponing, remember that we are</span></span><br><span class="line"><span class="comment">                 * postponing the flush and return. */</span></span><br><span class="line">                server.aof_flush_postponed_start = server.unixtime;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (server.unixtime - server.aof_flush_postponed_start &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">/* We were already waiting for fsync to finish, but for less</span></span><br><span class="line"><span class="comment">                 * than two seconds this is still ok. Postpone again. */</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则失败</span></span><br><span class="line">            <span class="comment">/* Otherwise fall through, and go write since we can&#x27;t wait</span></span><br><span class="line"><span class="comment">             * over two seconds. */</span></span><br><span class="line">            server.aof_delayed_fsync++;</span><br><span class="line">            serverLog(LL_NOTICE,<span class="string">&quot;Asynchronous AOF fsync is taking too long (disk is busy?). Writing the AOF buffer without waiting for fsync to complete, this may slow down Redis.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* We want to perform a single write. This should be guaranteed atomic</span></span><br><span class="line"><span class="comment">     * at least if the filesystem we are writing is a real physical one.</span></span><br><span class="line"><span class="comment">     * While this will save us against the server being killed I don&#x27;t think</span></span><br><span class="line"><span class="comment">     * there is much to do about the whole server stopping for power problems</span></span><br><span class="line"><span class="comment">     * or alike */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (server.aof_flush_sleep &amp;&amp; sdslen(server.aof_buf)) &#123;</span><br><span class="line">        usleep(server.aof_flush_sleep);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    latencyStartMonitor(latency);</span><br><span class="line">    nwritten = aofWrite(server.aof_fd,server.aof_buf,sdslen(server.aof_buf));</span><br><span class="line">    latencyEndMonitor(latency);</span><br><span class="line">    <span class="comment">/* We want to capture different events for delayed writes:</span></span><br><span class="line"><span class="comment">     * when the delay happens with a pending fsync, or with a saving child</span></span><br><span class="line"><span class="comment">     * active, and when the above two conditions are missing.</span></span><br><span class="line"><span class="comment">     * We also use an additional event name to save all samples which is</span></span><br><span class="line"><span class="comment">     * useful for graphing / monitoring purposes. */</span></span><br><span class="line">    <span class="keyword">if</span> (sync_in_progress) &#123;</span><br><span class="line">        latencyAddSampleIfNeeded(<span class="string">&quot;aof-write-pending-fsync&quot;</span>,latency);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasActiveChildProcess()) &#123;</span><br><span class="line">        latencyAddSampleIfNeeded(<span class="string">&quot;aof-write-active-child&quot;</span>,latency);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        latencyAddSampleIfNeeded(<span class="string">&quot;aof-write-alone&quot;</span>,latency);</span><br><span class="line">    &#125;</span><br><span class="line">    latencyAddSampleIfNeeded(<span class="string">&quot;aof-write&quot;</span>,latency);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We performed the write so reset the postponed flush sentinel to zero. */</span></span><br><span class="line">    server.aof_flush_postponed_start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nwritten != (<span class="type">ssize_t</span>)sdslen(server.aof_buf)) &#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">time_t</span> last_write_error_log = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> can_log = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Limit logging rate to 1 line per AOF_WRITE_LOG_ERROR_RATE seconds. */</span></span><br><span class="line">        <span class="keyword">if</span> ((server.unixtime - last_write_error_log) &gt; AOF_WRITE_LOG_ERROR_RATE) &#123;</span><br><span class="line">            can_log = <span class="number">1</span>;</span><br><span class="line">            last_write_error_log = server.unixtime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Log the AOF write error and record the error code. */</span></span><br><span class="line">        <span class="keyword">if</span> (nwritten == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (can_log) &#123;</span><br><span class="line">                serverLog(LL_WARNING,<span class="string">&quot;Error writing to the AOF file: %s&quot;</span>,</span><br><span class="line">                    strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">            server.aof_last_write_errno = errno;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (can_log) &#123;</span><br><span class="line">                serverLog(LL_WARNING,<span class="string">&quot;Short write while writing to &quot;</span></span><br><span class="line">                                       <span class="string">&quot;the AOF file: (nwritten=%lld, &quot;</span></span><br><span class="line">                                       <span class="string">&quot;expected=%lld)&quot;</span>,</span><br><span class="line">                                       (<span class="type">long</span> <span class="type">long</span>)nwritten,</span><br><span class="line">                                       (<span class="type">long</span> <span class="type">long</span>)sdslen(server.aof_buf));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ftruncate(server.aof_fd, server.aof_last_incr_size) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (can_log) &#123;</span><br><span class="line">                    serverLog(LL_WARNING, <span class="string">&quot;Could not remove short write &quot;</span></span><br><span class="line">                             <span class="string">&quot;from the append-only file.  Redis may refuse &quot;</span></span><br><span class="line">                             <span class="string">&quot;to load the AOF the next time it starts.  &quot;</span></span><br><span class="line">                             <span class="string">&quot;ftruncate: %s&quot;</span>, strerror(errno));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* If the ftruncate() succeeded we can set nwritten to</span></span><br><span class="line"><span class="comment">                 * -1 since there is no longer partial data into the AOF. */</span></span><br><span class="line">                nwritten = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            server.aof_last_write_errno = ENOSPC;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Handle the AOF write error. */</span></span><br><span class="line">        <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_ALWAYS) &#123;</span><br><span class="line">            <span class="comment">/* We can&#x27;t recover when the fsync policy is ALWAYS since the reply</span></span><br><span class="line"><span class="comment">             * for the client is already in the output buffers (both writes and</span></span><br><span class="line"><span class="comment">             * reads), and the changes to the db can&#x27;t be rolled back. Since we</span></span><br><span class="line"><span class="comment">             * have a contract with the user that on acknowledged or observed</span></span><br><span class="line"><span class="comment">             * writes are is synced on disk, we must exit. */</span></span><br><span class="line">            serverLog(LL_WARNING,<span class="string">&quot;Can&#x27;t recover from AOF write error when the AOF fsync policy is &#x27;always&#x27;. Exiting...&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* Recover from failed write leaving data into the buffer. However</span></span><br><span class="line"><span class="comment">             * set an error to stop accepting writes as long as the error</span></span><br><span class="line"><span class="comment">             * condition is not cleared. */</span></span><br><span class="line">            server.aof_last_write_status = C_ERR;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Trim the sds buffer if there was a partial write, and there</span></span><br><span class="line"><span class="comment">             * was no way to undo it with ftruncate(2). */</span></span><br><span class="line">            <span class="keyword">if</span> (nwritten &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                server.aof_current_size += nwritten;</span><br><span class="line">                server.aof_last_incr_size += nwritten;</span><br><span class="line">                sdsrange(server.aof_buf,nwritten,<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">/* We&#x27;ll try again on the next call... */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Successful write(2). If AOF was in error state, restore the</span></span><br><span class="line"><span class="comment">         * OK state and log the event. */</span></span><br><span class="line">        <span class="keyword">if</span> (server.aof_last_write_status == C_ERR) &#123;</span><br><span class="line">            serverLog(LL_NOTICE,</span><br><span class="line">                <span class="string">&quot;AOF write error looks solved, Redis can write again.&quot;</span>);</span><br><span class="line">            server.aof_last_write_status = C_OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server.aof_current_size += nwritten;</span><br><span class="line">    server.aof_last_incr_size += nwritten;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Re-use AOF buffer when it is small enough. The maximum comes from the</span></span><br><span class="line"><span class="comment">     * arena size of 4k minus some overhead (but is otherwise arbitrary). */</span></span><br><span class="line">    <span class="keyword">if</span> ((sdslen(server.aof_buf)+sdsavail(server.aof_buf)) &lt; <span class="number">4000</span>) &#123;</span><br><span class="line">        sdsclear(server.aof_buf);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sdsfree(server.aof_buf);</span><br><span class="line">        server.aof_buf = sdsempty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">try_fsync:</span><br><span class="line">    <span class="comment">/* Don&#x27;t fsync if no-appendfsync-on-rewrite is set to yes and there are</span></span><br><span class="line"><span class="comment">     * children doing I/O in the background. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_no_fsync_on_rewrite &amp;&amp; hasActiveChildProcess())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Perform the fsync if needed. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_ALWAYS) &#123;</span><br><span class="line">        <span class="comment">/* redis_fsync is defined as fdatasync() for Linux in order to avoid</span></span><br><span class="line"><span class="comment">         * flushing metadata. */</span></span><br><span class="line">        latencyStartMonitor(latency);</span><br><span class="line">        <span class="comment">/* Let&#x27;s try to get this data on the disk. To guarantee data safe when</span></span><br><span class="line"><span class="comment">         * the AOF fsync policy is &#x27;always&#x27;, we should exit if failed to fsync</span></span><br><span class="line"><span class="comment">         * AOF (see comment next to the exit(1) after write error above). */</span></span><br><span class="line">        <span class="keyword">if</span> (redis_fsync(server.aof_fd) == <span class="number">-1</span>) &#123;</span><br><span class="line">            serverLog(LL_WARNING,<span class="string">&quot;Can&#x27;t persist AOF for fsync error when the &quot;</span></span><br><span class="line">              <span class="string">&quot;AOF fsync policy is &#x27;always&#x27;: %s. Exiting...&quot;</span>, strerror(errno));</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        latencyEndMonitor(latency);</span><br><span class="line">        latencyAddSampleIfNeeded(<span class="string">&quot;aof-fsync-always&quot;</span>,latency);</span><br><span class="line">        server.aof_last_incr_fsync_offset = server.aof_last_incr_size;</span><br><span class="line">        server.aof_last_fsync = server.unixtime;</span><br><span class="line">        atomicSet(server.fsynced_reploff_pending, server.master_repl_offset);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (server.aof_fsync == AOF_FSYNC_EVERYSEC &amp;&amp;</span><br><span class="line">               server.unixtime &gt; server.aof_last_fsync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!sync_in_progress) &#123;</span><br><span class="line">            aof_background_fsync(server.aof_fd);</span><br><span class="line">            server.aof_last_incr_fsync_offset = server.aof_last_incr_size;</span><br><span class="line">        &#125;</span><br><span class="line">        server.aof_last_fsync = server.unixtime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>判断<code>aof_buf==0</code>，检查我们是否需要做fsync，即使aof缓冲区是空的，因为以前在<code>EVERYSEC</code>模式下，fsync只有在aof缓冲区不是空的时候才会被调用，所以如果用户在fsync调用前一秒停止写命令，那么页面缓存中的数据就不能及时刷新。这里就能解释写入和同步的差异： 同步是指，将用户输入的内容从页缓存中同步到<code>aof</code>文件中。而写入则是指将<code>aof_buf</code>中的数据写入到<code>aof</code>文件中</li><li>在<code>AOF_FSYNC_ALWAYS </code>模式下也需要检查，以防止持久化模式是从<code>EVERYSEC</code>被修改为<code>AOF_FSYNC_ALWAYS</code>。</li><li></li></ol><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>由于<code>AOF</code>持久化是通过保存服务器执行的命令来记录数据库状态的，故而<code>AOF</code>文件中的内容会越来越多，文件也会越来越大，体积过大时，可能会对<code>redis</code>服务器造成影响，还原数据库状态所耗费的时间也越多。<br>为了解决<code>AOF</code>文件膨胀的问题，<code>redis</code>提供了<code>AOF rewrite</code>功能，使用该功能时，redis服务器将创建一个新的<code>AOF</code>文件来代替现有文件。</p><h4 id="AOF文件重写的实现"><a href="#AOF文件重写的实现" class="headerlink" title="AOF文件重写的实现"></a>AOF文件重写的实现</h4><p>实际上<code>AOF rewrite</code>并不需要对现有的<code>AOF</code>文件做读取、分析、写入操作，而是通过读取服务器当前的数据库状态实现的，其完整流程如下：</p><ol><li>创建新的AOF文件</li><li>遍历所有数据库[忽略空数据库]</li><li>遍历数据库中的所有键[忽略已过期的键]</li><li>根据键的类型进行重写</li><li>写入完毕，关闭文件</li></ol><p>为了避免在执行命令时，造成客户端输入缓冲区移除，重写时会先检查键所包含的元素数量，如果元素数量超过了<code>AOF_REWRITE_ITEMS_PER_CMD</code>，则将分作多个命令写入。默认值为 64。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AOF_REWRITE_ITEMS_PER_CMD 64</span></span><br></pre></td></tr></table></figure><h4 id="AOF后台重写"><a href="#AOF后台重写" class="headerlink" title="AOF后台重写"></a>AOF后台重写</h4><p>上述的<code>AOF rewrite</code>过程包含大量的写入操作，调用时将长时间阻塞服务器主线程，故而在redis中通常将<code>aof rewrite</code>操作放到子进程中执行。这样做有两个好处：</p><ol><li>子进程在<code>aof rewrite</code>期间，服务器主进程可以继续处理命令请求。</li><li>子进程带有服务器进程的数据副本，可以在避免使用锁的情况下，保证数据的安全性。</li></ol><p>使用子进程执行<code>AOF rewrite</code>有一个问题，即主进程中仍能处理命令请求，会对现有数据库状态进行修改，故而导致服务器当前状态和子进程重写<code>AOF</code>文件所保存的数据库状态不一致的情况。<br>为此，redis设置了一个<code>AOF 重写缓冲区</code>，，该缓存在fork出子进程后开始使用，主进程执行完写命令后，会同时将这个写命令写入到<code>aof_buf</code>和<code>AOF 重写缓冲区</code>。<br>当子进程完成重写之后，向父进程发送信号，执行如下任务：</p><ol><li>将<code>AOF 重写缓冲区</code>中的所有内容写入到新的<code>AOF</code>文件中，以此保证新的<code>aof</code>文件保存的服务器状态和当前服务器的状态一致。</li><li>对新的<code>AOF</code>文件进行改名，原子的覆盖现有<code>AOF</code>文件。<br>整个过程中，服务器只有处理 信号处理函数时会被阻塞。<br>以上即是<code>BGREWRITEAOF</code>命令的实现原理。</li></ol><h4 id="AOF后台重写的触发条件"><a href="#AOF后台重写的触发条件" class="headerlink" title="AOF后台重写的触发条件"></a>AOF后台重写的触发条件</h4><p><code>redisServer</code>中有如下三个和<code>AOF rewrite</code>相关的变量，用以控制<code>aof 后台重写</code>的执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="type">off_t</span> aof_current_size;         <span class="comment">// aof文件当前的大小</span></span><br><span class="line">    <span class="type">off_t</span> aof_rewrite_base_size;    <span class="comment">// 最近一次aof重写后 aof文件的大小</span></span><br><span class="line">    <span class="type">int</span> aof_rewrite_perc;           <span class="comment">// 增长百分比变量</span></span><br><span class="line">    <span class="type">off_t</span> aof_rewrite_min_size;     <span class="comment">// 执行aof重写时，aof文件的最小值</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>每当<code>serverCron</code>函数执行时，如果满足如下条件时，则会自动触发<code>aof rewrite</code>：</p><ol><li>没有<code>bgsave</code>命令在执行。</li><li>没有<code>bgrewriteaof</code>命令在执行。</li><li>当前AOF文件的大小大于<code>redisServer.aof_rewrite_min_size</code>。</li><li><code>(aof_current_size - aof_base_size) / aof_base_size &gt; auto-aof-rewrite-percentage</code><br>上述默认参数值为：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span>-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line"><span class="keyword">auto</span>-aof-rewrite-min-size <span class="number">64</span>mb</span><br></pre></td></tr></table></figure></li></ol><h4 id="AOF后台重写-源码"><a href="#AOF后台重写-源码" class="headerlink" title="AOF后台重写 源码"></a>AOF后台重写 源码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bgrewriteaofCommand</span><span class="params">(client *c)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果当前服务器正在执行 aof重写</span></span><br><span class="line">    <span class="keyword">if</span> (server.child_type == CHILD_TYPE_AOF) &#123;</span><br><span class="line">        addReplyError(c,<span class="string">&quot;Background append only file rewriting already in progress&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasActiveChildProcess() || server.in_exec) &#123;</span><br><span class="line">        server.aof_rewrite_scheduled = <span class="number">1</span>; <span class="comment">// 标记bgsave结束后执行aof重写</span></span><br><span class="line">        server.stat_aofrw_consecutive_failures = <span class="number">0</span>; <span class="comment">// aofrw 连续失败的次数</span></span><br><span class="line">        addReplyStatus(c,<span class="string">&quot;Background append only file rewriting scheduled&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rewriteAppendOnlyFileBackground() == C_OK) &#123;</span><br><span class="line">        addReplyStatus(c,<span class="string">&quot;Background append only file rewriting started&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        addReplyError(c,<span class="string">&quot;Can&#x27;t execute an AOF background rewriting. &quot;</span></span><br><span class="line">                        <span class="string">&quot;Please check the server logs for more information.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * AOF background rewrite</span></span><br><span class="line"><span class="comment"> * ------------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is how rewriting of the append only file in background works:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1) The user calls BGREWRITEAOF</span></span><br><span class="line"><span class="comment"> * 2) Redis calls this function, that forks():</span></span><br><span class="line"><span class="comment"> *    2a) the child rewrite the append only file in a temp file.</span></span><br><span class="line"><span class="comment"> *    2b) the parent open a new INCR AOF file to continue writing.</span></span><br><span class="line"><span class="comment"> * 3) When the child finished &#x27;2a&#x27; exists.</span></span><br><span class="line"><span class="comment"> * 4) The parent will trap the exit code, if it&#x27;s OK, it will:</span></span><br><span class="line"><span class="comment"> *    4a) get a new BASE file name and mark the previous (if we have) as the HISTORY type</span></span><br><span class="line"><span class="comment"> *    4b) rename(2) the temp file in new BASE file name</span></span><br><span class="line"><span class="comment"> *    4c) mark the rewritten INCR AOFs as history type</span></span><br><span class="line"><span class="comment"> *    4d) persist AOF manifest file</span></span><br><span class="line"><span class="comment"> *    4e) Delete the history files use bio</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rewriteAppendOnlyFileBackground</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> childpid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasActiveChildProcess()) <span class="keyword">return</span> C_ERR;</span><br><span class="line">    <span class="comment">// appenddirname 默认值为&quot;appendonlydir&quot;，如果不存在或者创建失败</span></span><br><span class="line">    <span class="keyword">if</span> (dirCreateIfMissing(server.aof_dirname) == <span class="number">-1</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">&quot;Can&#x27;t open or create append-only dir %s: %s&quot;</span>,</span><br><span class="line">            server.aof_dirname, strerror(errno));</span><br><span class="line">        server.aof_lastbgrewrite_status = C_ERR;</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We set aof_selected_db to -1 in order to force the next call to the</span></span><br><span class="line"><span class="comment">     * feedAppendOnlyFile() to issue a SELECT command. */</span></span><br><span class="line">    server.aof_selected_db = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 无论后台是否有调用fsync，都执行落盘动作</span></span><br><span class="line">    flushAppendOnlyFile(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (openNewIncrAofForAppend() != C_OK) &#123;</span><br><span class="line">        server.aof_lastbgrewrite_status = C_ERR;</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    server.stat_aof_rewrites++;</span><br><span class="line">    <span class="keyword">if</span> ((childpid = redisFork(CHILD_TYPE_AOF)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> tmpfile[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Child */</span></span><br><span class="line">        redisSetProcTitle(<span class="string">&quot;redis-aof-rewrite&quot;</span>);</span><br><span class="line">        redisSetCpuAffinity(server.aof_rewrite_cpulist);</span><br><span class="line">        <span class="built_in">snprintf</span>(tmpfile,<span class="number">256</span>,<span class="string">&quot;temp-rewriteaof-bg-%d.aof&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">        <span class="keyword">if</span> (rewriteAppendOnlyFile(tmpfile) == C_OK) &#123;</span><br><span class="line">            serverLog(LL_NOTICE,</span><br><span class="line">                <span class="string">&quot;Successfully created the temporary AOF base file %s&quot;</span>, tmpfile);</span><br><span class="line">            sendChildCowInfo(CHILD_INFO_TYPE_AOF_COW_SIZE, <span class="string">&quot;AOF rewrite&quot;</span>);</span><br><span class="line">            exitFromChild(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            exitFromChild(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Parent */</span></span><br><span class="line">        <span class="keyword">if</span> (childpid == <span class="number">-1</span>) &#123;</span><br><span class="line">            server.aof_lastbgrewrite_status = C_ERR;</span><br><span class="line">            serverLog(LL_WARNING,</span><br><span class="line">                <span class="string">&quot;Can&#x27;t rewrite append only file in background: fork: %s&quot;</span>,</span><br><span class="line">                strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> C_ERR;</span><br><span class="line">        &#125;</span><br><span class="line">        serverLog(LL_NOTICE,</span><br><span class="line">            <span class="string">&quot;Background append only file rewriting started by pid %ld&quot;</span>,(<span class="type">long</span>) childpid);</span><br><span class="line">        server.aof_rewrite_scheduled = <span class="number">0</span>;</span><br><span class="line">        server.aof_rewrite_time_start = time(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> C_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C_OK; <span class="comment">/* unreached */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Called in `rewriteAppendOnlyFileBackground`. If `server.aof_state`</span></span><br><span class="line"><span class="comment"> * is &#x27;AOF_ON&#x27;, It will do two things:</span></span><br><span class="line"><span class="comment"> * 1. Open a new INCR type AOF for writing</span></span><br><span class="line"><span class="comment"> * 2. Synchronously update the manifest file to the disk</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The above two steps of modification are atomic, that is, if</span></span><br><span class="line"><span class="comment"> * any step fails, the entire operation will rollback and returns</span></span><br><span class="line"><span class="comment"> * C_ERR, and if all succeeds, it returns C_OK.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * If `server.aof_state` is &#x27;AOF_WAIT_REWRITE&#x27;, It will open a temporary INCR AOF </span></span><br><span class="line"><span class="comment"> * file to accumulate data during AOF_WAIT_REWRITE, and it will eventually be </span></span><br><span class="line"><span class="comment"> * renamed in the `backgroundRewriteDoneHandler` and written to the manifest file.</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">openNewIncrAofForAppend</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    serverAssert(server.aof_manifest != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">int</span> newfd = <span class="number">-1</span>;</span><br><span class="line">    aofManifest *temp_am = <span class="literal">NULL</span>;</span><br><span class="line">    sds new_aof_name = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Only open new INCR AOF when AOF enabled. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_state == AOF_OFF) <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Open new AOF. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_state == AOF_WAIT_REWRITE) &#123;</span><br><span class="line">        <span class="comment">/* Use a temporary INCR AOF file to accumulate data during AOF_WAIT_REWRITE. */</span></span><br><span class="line">        new_aof_name = getTempIncrAofName();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* Dup a temp aof_manifest to modify. */</span></span><br><span class="line">        temp_am = aofManifestDup(server.aof_manifest);</span><br><span class="line">        new_aof_name = sdsdup(getNewIncrAofName(temp_am));</span><br><span class="line">    &#125;</span><br><span class="line">    sds new_aof_filepath = makePath(server.aof_dirname, new_aof_name);</span><br><span class="line">    newfd = open(new_aof_filepath, O_WRONLY|O_TRUNC|O_CREAT, <span class="number">0644</span>);</span><br><span class="line">    sdsfree(new_aof_filepath);</span><br><span class="line">    <span class="keyword">if</span> (newfd == <span class="number">-1</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">&quot;Can&#x27;t open the append-only file %s: %s&quot;</span>,</span><br><span class="line">            new_aof_name, strerror(errno));</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (temp_am) &#123;</span><br><span class="line">        <span class="comment">/* Persist AOF Manifest. */</span></span><br><span class="line">        <span class="keyword">if</span> (persistAofManifest(temp_am) == C_ERR) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serverLog(LL_NOTICE, <span class="string">&quot;Creating AOF incr file %s on background rewrite&quot;</span>,</span><br><span class="line">            new_aof_name);</span><br><span class="line">    sdsfree(new_aof_name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If reaches here, we can safely modify the `server.aof_manifest`</span></span><br><span class="line"><span class="comment">     * and `server.aof_fd`. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fsync and close old aof_fd if needed. In fsync everysec it&#x27;s ok to delay</span></span><br><span class="line"><span class="comment">     * the fsync as long as we grantee it happens, and in fsync always the file</span></span><br><span class="line"><span class="comment">     * is already synced at this point so fsync doesn&#x27;t matter. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_fd != <span class="number">-1</span>) &#123;</span><br><span class="line">        aof_background_fsync_and_close(server.aof_fd);</span><br><span class="line">        server.aof_last_fsync = server.unixtime;</span><br><span class="line">    &#125;</span><br><span class="line">    server.aof_fd = newfd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Reset the aof_last_incr_size. */</span></span><br><span class="line">    server.aof_last_incr_size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* Reset the aof_last_incr_fsync_offset. */</span></span><br><span class="line">    server.aof_last_incr_fsync_offset = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* Update `server.aof_manifest`. */</span></span><br><span class="line">    <span class="keyword">if</span> (temp_am) aofManifestFreeAndUpdate(temp_am);</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">cleanup:</span><br><span class="line">    <span class="keyword">if</span> (new_aof_name) sdsfree(new_aof_name);</span><br><span class="line">    <span class="keyword">if</span> (newfd != <span class="number">-1</span>) close(newfd);</span><br><span class="line">    <span class="keyword">if</span> (temp_am) aofManifestFree(temp_am);</span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AOF重写的主逻辑</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Write a sequence of commands able to fully rebuild the dataset into</span></span><br><span class="line"><span class="comment"> * &quot;filename&quot;. Used both by REWRITEAOF and BGREWRITEAOF.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * In order to minimize the number of commands needed in the rewritten</span></span><br><span class="line"><span class="comment"> * log Redis uses variadic commands when possible, such as RPUSH, SADD</span></span><br><span class="line"><span class="comment"> * and ZADD. However at max AOF_REWRITE_ITEMS_PER_CMD items per time</span></span><br><span class="line"><span class="comment"> * are inserted using a single command. */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rewriteAppendOnlyFile</span><span class="params">(<span class="type">char</span> *filename)</span> &#123;</span><br><span class="line">    rio aof;</span><br><span class="line">    FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> tmpfile[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Note that we have to use a different temp name here compared to the</span></span><br><span class="line"><span class="comment">     * one used by rewriteAppendOnlyFileBackground() function. */</span></span><br><span class="line">    <span class="built_in">snprintf</span>(tmpfile,<span class="number">256</span>,<span class="string">&quot;temp-rewriteaof-%d.aof&quot;</span>, (<span class="type">int</span>) getpid());</span><br><span class="line">    fp = fopen(tmpfile,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!fp) &#123;</span><br><span class="line">        serverLog(LL_WARNING, <span class="string">&quot;Opening the temp file for AOF rewrite in rewriteAppendOnlyFile(): %s&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化aof为 文件io对象</span></span><br><span class="line">    rioInitWithFile(&amp;aof,fp);</span><br><span class="line">    <span class="comment">// 如果开启aof增量同步功能  防止在缓存中堆积太多命令，造成写入时的IO阻塞时长过长</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_rewrite_incremental_fsync) &#123;</span><br><span class="line">        <span class="comment">// 将自动同步的字节数限制为 REDIS_AUTOSYNC_BYTES， 默认4MB</span></span><br><span class="line">        rioSetAutoSync(&amp;aof,REDIS_AUTOSYNC_BYTES);</span><br><span class="line">        rioSetReclaimCache(&amp;aof,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 触发持久性模块启动事件</span></span><br><span class="line">    startSaving(RDBFLAGS_AOF_PREAMBLE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在aof重写时，基础的aof重写使用rdb编码</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_use_rdb_preamble) &#123;</span><br><span class="line">        <span class="type">int</span> error;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rdbSaveRio(SLAVE_REQ_NONE,&amp;aof,&amp;error,RDBFLAGS_AOF_PREAMBLE,<span class="literal">NULL</span>) == C_ERR) &#123;</span><br><span class="line">            errno = error;</span><br><span class="line">            <span class="keyword">goto</span> werr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rewriteAppendOnlyFileRio(&amp;aof) == C_ERR) <span class="keyword">goto</span> werr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make sure data will not remain on the OS&#x27;s output buffers */</span></span><br><span class="line">    <span class="keyword">if</span> (fflush(fp)) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">if</span> (fsync(fileno(fp))) <span class="keyword">goto</span> werr;</span><br><span class="line">    <span class="keyword">if</span> (reclaimFilePageCache(fileno(fp), <span class="number">0</span>, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">/* A minor error. Just log to know what happens */</span></span><br><span class="line">        serverLog(LL_NOTICE,<span class="string">&quot;Unable to reclaim page cache: %s&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fclose(fp)) &#123; fp = <span class="literal">NULL</span>; <span class="keyword">goto</span> werr; &#125;</span><br><span class="line">    fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Use RENAME to make sure the DB file is changed atomically only</span></span><br><span class="line"><span class="comment">     * if the generate DB file is ok. */</span></span><br><span class="line">    <span class="keyword">if</span> (rename(tmpfile,filename) == <span class="number">-1</span>) &#123;</span><br><span class="line">        serverLog(LL_WARNING,<span class="string">&quot;Error moving temp append only file on the final destination: %s&quot;</span>, strerror(errno));</span><br><span class="line">        unlink(tmpfile);</span><br><span class="line">        <span class="comment">// REDISMODULE_SUBEVENT_PERSISTENCE_FAILED 失败</span></span><br><span class="line">        stopSaving(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> C_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// REDISMODULE_SUBEVENT_PERSISTENCE_ENDED 成功</span></span><br><span class="line">    stopSaving(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    serverLog(LL_WARNING,<span class="string">&quot;Write error writing append only file on disk: %s&quot;</span>, strerror(errno));</span><br><span class="line">    <span class="keyword">if</span> (fp) fclose(fp);</span><br><span class="line">    unlink(tmpfile);</span><br><span class="line">    stopSaving(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到，<code>redis5.0</code>之后，<code>aof_use_rdb_preamble = yes</code>服务器配置中配置了<code>aof_use_rdb_preamble</code>，指定在<code>aof</code>重写时基础aof写入时使用<code>rdb</code>编码；否则调用<code>rewriteAppendOnlyFileRio</code>完成文件写入。</p><p>对比一下差异：<a href="https://blog.csdn.net/Aquester/article/details/88550655">https://blog.csdn.net/Aquester/article/details/88550655</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rewriteAppendOnlyFileRio</span><span class="params">(rio *aof)</span> &#123;</span><br><span class="line">    dictIterator *di = <span class="literal">NULL</span>;</span><br><span class="line">    dictEntry *de;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="type">long</span> key_count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> updated_time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Record timestamp at the beginning of rewriting AOF. */</span></span><br><span class="line">    <span class="keyword">if</span> (server.aof_timestamp_enabled) &#123;</span><br><span class="line">        sds ts = genAofTimestampAnnotationIfNeeded(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (rioWrite(aof,ts,sdslen(ts)) == <span class="number">0</span>) &#123; sdsfree(ts); <span class="keyword">goto</span> werr; &#125;</span><br><span class="line">        sdsfree(ts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rewriteFunctions(aof) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class="line">        <span class="type">char</span> selectcmd[] = <span class="string">&quot;*2\r\n$6\r\nSELECT\r\n&quot;</span>;</span><br><span class="line">        redisDb *db = server.db+j;</span><br><span class="line">        dict *d = db-&gt;dict;</span><br><span class="line">        <span class="keyword">if</span> (dictSize(d) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        di = dictGetSafeIterator(d);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* SELECT the new DB */</span></span><br><span class="line">        <span class="keyword">if</span> (rioWrite(aof,selectcmd,<span class="keyword">sizeof</span>(selectcmd)<span class="number">-1</span>) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">        <span class="keyword">if</span> (rioWriteBulkLongLong(aof,j) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Iterate this DB writing every entry */</span></span><br><span class="line">        <span class="keyword">while</span>((de = dictNext(di)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            sds keystr;</span><br><span class="line">            robj key, *o;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> expiretime;</span><br><span class="line">            <span class="type">size_t</span> aof_bytes_before_key = aof-&gt;processed_bytes;</span><br><span class="line"></span><br><span class="line">            keystr = dictGetKey(de);</span><br><span class="line">            o = dictGetVal(de);</span><br><span class="line">            initStaticStringObject(key,keystr);</span><br><span class="line"></span><br><span class="line">            expiretime = getExpire(db,&amp;key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Save the key and associated value */</span></span><br><span class="line">            <span class="keyword">if</span> (o-&gt;type == OBJ_STRING) &#123;</span><br><span class="line">                <span class="comment">/* Emit a SET command */</span></span><br><span class="line">                <span class="type">char</span> cmd[]=<span class="string">&quot;*3\r\n$3\r\nSET\r\n&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (rioWrite(aof,cmd,<span class="keyword">sizeof</span>(cmd)<span class="number">-1</span>) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">                <span class="comment">/* Key and value */</span></span><br><span class="line">                <span class="keyword">if</span> (rioWriteBulkObject(aof,&amp;key) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">                <span class="keyword">if</span> (rioWriteBulkObject(aof,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_LIST) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteListObject(aof,&amp;key,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_SET) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteSetObject(aof,&amp;key,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_ZSET) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteSortedSetObject(aof,&amp;key,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_HASH) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteHashObject(aof,&amp;key,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_STREAM) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteStreamObject(aof,&amp;key,o) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o-&gt;type == OBJ_MODULE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rewriteModuleObject(aof,&amp;key,o,j) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                serverPanic(<span class="string">&quot;Unknown object type&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* In fork child process, we can try to release memory back to the</span></span><br><span class="line"><span class="comment">             * OS and possibly avoid or decrease COW. We give the dismiss</span></span><br><span class="line"><span class="comment">             * mechanism a hint about an estimated size of the object we stored. */</span></span><br><span class="line">            <span class="type">size_t</span> dump_size = aof-&gt;processed_bytes - aof_bytes_before_key;</span><br><span class="line">            <span class="keyword">if</span> (server.in_fork_child) dismissObject(o, dump_size);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Save the expire time */</span></span><br><span class="line">            <span class="keyword">if</span> (expiretime != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="type">char</span> cmd[]=<span class="string">&quot;*3\r\n$9\r\nPEXPIREAT\r\n&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (rioWrite(aof,cmd,<span class="keyword">sizeof</span>(cmd)<span class="number">-1</span>) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">                <span class="keyword">if</span> (rioWriteBulkObject(aof,&amp;key) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">                <span class="keyword">if</span> (rioWriteBulkLongLong(aof,expiretime) == <span class="number">0</span>) <span class="keyword">goto</span> werr;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Update info every 1 second (approximately).</span></span><br><span class="line"><span class="comment">             * in order to avoid calling mstime() on each iteration, we will</span></span><br><span class="line"><span class="comment">             * check the diff every 1024 keys */</span></span><br><span class="line">            <span class="keyword">if</span> ((key_count++ &amp; <span class="number">1023</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> now = mstime();</span><br><span class="line">                <span class="keyword">if</span> (now - updated_time &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                    sendChildInfo(CHILD_INFO_TYPE_CURRENT_INFO, key_count, <span class="string">&quot;AOF rewrite&quot;</span>);</span><br><span class="line">                    updated_time = now;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* Delay before next key if required (for testing) */</span></span><br><span class="line">            <span class="keyword">if</span> (server.rdb_key_save_delay)</span><br><span class="line">                debugDelay(server.rdb_key_save_delay);</span><br><span class="line">        &#125;</span><br><span class="line">        dictReleaseIterator(di);</span><br><span class="line">        di = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C_OK;</span><br><span class="line"></span><br><span class="line">werr:</span><br><span class="line">    <span class="keyword">if</span> (di) dictReleaseIterator(di);</span><br><span class="line">    <span class="keyword">return</span> C_ERR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述有几个点需要注意：</p><ol><li><code>sendChildInfo</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rioInitWithFile</span><span class="params">(rio *r, FILE *fp)</span> &#123;</span><br><span class="line">    *r = rioFileIO;</span><br><span class="line">    r-&gt;io.file.fp = fp;</span><br><span class="line">    r-&gt;io.file.buffered = <span class="number">0</span>;</span><br><span class="line">    r-&gt;io.file.autosync = <span class="number">0</span>;</span><br><span class="line">    r-&gt;io.file.reclaim_cache = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/redis/redis/blob/2495b90a647f9f9987202efd29647f81f217b8ad/src/rdb.c">1. rdb.c</a><br><a href="https://blog.csdn.net/men_wen/article/details/71248449">2. redis rdb源码阅读</a><br><a href="https://redisbook.readthedocs.io/en/latest/internal/aof.html">3. redis aof实现</a><br><a href="https://www.5ycode.com/article/1192.html">4. aof源码</a><br><a href="https://www.modb.pro/db/221416">5. aof流程</a><br><a href="https://www.modb.pro/db/610186">6. aof源码分析</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于redis是内存数据库，其数据库状态保存在内存中。redis中提供了持久化功能，用以将redis内存中的数据库状态保存在磁盘中，避免意外的数据丢失。&lt;/p&gt;
&lt;p&gt;Redis中提供了两种持久化方式，分别是&lt;code&gt;RDB&lt;/code&gt;和&lt;code&gt;AOF&lt;/code&gt;</summary>
      
    
    
    
    <category term="数据库" scheme="https://mqrayblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis之服务器</title>
    <link href="https://mqrayblog.cn/2023/07/23/redis%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://mqrayblog.cn/2023/07/23/redis%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2023-07-23T14:44:39.000Z</published>
    <updated>2023-07-25T00:54:53.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis服务器"><a href="#redis服务器" class="headerlink" title="redis服务器"></a>redis服务器</h2><p>redis服务器负责与多个客户端建立网络连接，处理客户端请求，在数据库中保存客户端执行命令所产生的数据，并通过资源管理来维持服务器的自身运转。<br>本文将应用侧和源码侧两个角度进行描述。</p><ol><li>服务器的功能：redis客户端发送命令后，服务器如何处理；</li><li>服务器源码结构中相关重要参数。</li></ol><h3 id="redis架构详解"><a href="#redis架构详解" class="headerlink" title="redis架构详解"></a>redis架构详解</h3><h4 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h4><h4 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h4><h4 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h4><h4 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h4><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>redis的慢查询日志功能用于记录执行时间超过设定时长的命令请求，用户可以通过这个功能那个产生的日志来监控和优化查询。<br>服务器配置中包含如下两个和慢查询有关的参数：</p><ol><li><code>slowlog-log-slower-than</code>： 执行时长超过多少微秒时，将命令记录到慢查询日志中；如果&#x3D;0，则表示将存储所有执行的日志。</li><li><code>slowlog-max-length</code>： 指定服务器能保存多少条慢查询日志。</li></ol><p>redisServer属性众多，现在来看下和慢查询相关的属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span> &#123;</span></span><br><span class="line">    <span class="built_in">list</span> *slowlog;                  <span class="comment">/* SLOWLOG list of commands */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> slowlog_entry_id;     <span class="comment">/* SLOWLOG current entry ID */</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> slowlog_log_slower_than; <span class="comment">/* SLOWLOG time limit (to get logged) */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> slowlog_max_len;     <span class="comment">/* SLOWLOG max number of items logged */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<br><code>slowlog_entry_id</code>表示当前慢查询的日志id。其初始值为0，当创建一条新的慢查询日志时，这个属性就会用作新日志的id，而后自增+1用作下一条日志的id。<br><code>slowlog</code>则保存了所有慢查询日志的链表，每次新增一个慢查询日志时，都会将新的放在链表头部，并且移除最早加入慢查询日志的entry。<br><code>slowlog_log_slower_than</code>即上述命令执行的标定时间，<br><code>slowlog-max-len</code>用以限制慢查询日志链表长度。</p><p>链表中的节点为<code>slowlogEntry</code>，其定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slowlogEntry</span> &#123;</span></span><br><span class="line">    robj **argv; <span class="comment">// 节点命令的详细内容</span></span><br><span class="line">    <span class="type">int</span> argc; <span class="comment">// 参数个数</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> id;      <span class="comment">// 链表节点的唯一标识符</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> duration; <span class="comment">// 节点命令的执行时长，单位微秒</span></span><br><span class="line">    <span class="type">time_t</span> time;        <span class="comment">// 节点命令执行的unix时间</span></span><br><span class="line">    sds cname;          <span class="comment">// 节点命令的发起客户端</span></span><br><span class="line">    sds peerid;         <span class="comment">// 命令发起的客户端的网络地址</span></span><br><span class="line">&#125; slowlogEntry;</span><br></pre></td></tr></table></figure><p>如下是慢查询日志链表节点的示意图：<br><img src="/2023/07/23/redis%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/slowlog-entry.png"></p><p>在客户端可以使用<code>slowlog get</code>命令查看服务器保存的慢查询日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">123.122.228.34:6379&gt; slowlog get </span><br><span class="line"> 1) 1) (integer) 10</span><br><span class="line">    2) (integer) 1690086551</span><br><span class="line">    3) (integer) 66497</span><br><span class="line">    4) 1) &quot;geodist&quot;</span><br><span class="line">       2) &quot;citys&quot;</span><br><span class="line">       3) &quot;beijing&quot;</span><br><span class="line">       4) &quot;shanghai&quot;</span><br><span class="line">       5) &quot;km&quot;</span><br><span class="line">    5) &quot;123.122.42.170:44244&quot;</span><br><span class="line">    6) &quot;&quot;</span><br><span class="line"> 2) 1) (integer) 9</span><br><span class="line">    2) (integer) 1690049869</span><br><span class="line">    3) (integer) 10520</span><br><span class="line">    4) 1) &quot;INFO&quot;</span><br><span class="line">    5) &quot;123.122.42.134:54780&quot;</span><br><span class="line">    6) &quot;lettuce#ClusterTopologyRefresh&quot;</span><br><span class="line"> 3) 1) (integer) 8</span><br><span class="line">    2) (integer) 1690012734</span><br><span class="line">    3) (integer) 10706</span><br><span class="line">    4) 1) &quot;PING&quot;</span><br><span class="line">    5) &quot;123.122.228.37:43154&quot;</span><br><span class="line">    6) &quot;&quot;</span><br><span class="line"> 4) 1) (integer) 7</span><br><span class="line">    2) (integer) 1689999931</span><br><span class="line">    3) (integer) 11551</span><br><span class="line">    4) 1) &quot;PING&quot;</span><br><span class="line">    5) &quot;123.122.228.37:42252&quot;</span><br><span class="line">    6) &quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="初始化慢查询日志"><a href="#初始化慢查询日志" class="headerlink" title="初始化慢查询日志"></a>初始化慢查询日志</h4><p>服务器启动时，将会执行慢查询的初始化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">slowlogInit</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    server.slowlog = listCreate();</span><br><span class="line">    server.slowlog_entry_id = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 释放慢查询列表中的元素，及相关内存空间</span></span><br><span class="line">    listSetFreeMethod(server.slowlog,slowlogFreeEntry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">slowlogFreeEntry</span><span class="params">(<span class="type">void</span> *septr)</span> &#123;</span><br><span class="line">    slowlogEntry *se = septr;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; se-&gt;argc; j++)</span><br><span class="line">        <span class="comment">// 将slowentry中保存的所有查询参数的引用计数值-1</span></span><br><span class="line">        decrRefCount(se-&gt;argv[j]);</span><br><span class="line">    <span class="comment">// 释放查询参数的指针数组空间</span></span><br><span class="line">    zfree(se-&gt;argv);</span><br><span class="line">    sdsfree(se-&gt;peerid);</span><br><span class="line">    sdsfree(se-&gt;cname);</span><br><span class="line">    <span class="comment">// 释放slowentry自身的空间</span></span><br><span class="line">    zfree(se);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加慢查询日志"><a href="#添加慢查询日志" class="headerlink" title="添加慢查询日志"></a>添加慢查询日志</h4><p>前面讲述过慢查询日志产生的条件，下面来看一下其源码实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">slowlogPushEntryIfNeeded</span><span class="params">(client *c, robj **argv, <span class="type">int</span> argc, <span class="type">long</span> <span class="type">long</span> duration)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是否开启了慢查询日志</span></span><br><span class="line">    <span class="keyword">if</span> (server.slowlog_log_slower_than &lt; <span class="number">0</span>) <span class="keyword">return</span>; </span><br><span class="line">    <span class="comment">// 如果 该命令耗时大于设定值，则創建一个slowlogentry，并将其加入慢查询日志链表头部</span></span><br><span class="line">    <span class="keyword">if</span> (duration &gt;= server.slowlog_log_slower_than)</span><br><span class="line">        listAddNodeHead(server.slowlog,</span><br><span class="line">                        slowlogCreateEntry(c,argv,argc,duration));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断加入后的链表长度，如果超出链表长度的最大值，则删除最新入链的元素</span></span><br><span class="line">    <span class="keyword">while</span> (listLength(server.slowlog) &gt; server.slowlog_max_len)</span><br><span class="line">        listDelNode(server.slowlog,listLast(server.slowlog));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">slowlogEntry *<span class="title function_">slowlogCreateEntry</span><span class="params">(client *c, robj **argv, <span class="type">int</span> argc, <span class="type">long</span> <span class="type">long</span> duration)</span> &#123;</span><br><span class="line">    slowlogEntry *se = zmalloc(<span class="keyword">sizeof</span>(*se));</span><br><span class="line">    <span class="type">int</span> j, slargc = argc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (slargc &gt; SLOWLOG_ENTRY_MAX_ARGC) slargc = SLOWLOG_ENTRY_MAX_ARGC;</span><br><span class="line">    se-&gt;argc = slargc;</span><br><span class="line">    se-&gt;argv = zmalloc(<span class="keyword">sizeof</span>(robj*)*slargc);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; slargc; j++) &#123;</span><br><span class="line">        <span class="comment">// 判断命令参数是否超出额定值，因为命令参数过多对于服务器而言是无效的内存开销</span></span><br><span class="line">        <span class="keyword">if</span> (slargc != argc &amp;&amp; j == slargc<span class="number">-1</span>) &#123;</span><br><span class="line">            se-&gt;argv[j] = createObject(OBJ_STRING,</span><br><span class="line">                sdscatprintf(sdsempty(),<span class="string">&quot;... (%d more arguments)&quot;</span>,</span><br><span class="line">                argc-slargc+<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 命令参数中 字符串参数过长，则new一个额定长度的字符串</span></span><br><span class="line">            <span class="keyword">if</span> (argv[j]-&gt;type == OBJ_STRING &amp;&amp;</span><br><span class="line">                sdsEncodedObject(argv[j]) &amp;&amp;</span><br><span class="line">                sdslen(argv[j]-&gt;ptr) &gt; SLOWLOG_ENTRY_MAX_STRING)</span><br><span class="line">            &#123;</span><br><span class="line">                sds s = sdsnewlen(argv[j]-&gt;ptr, SLOWLOG_ENTRY_MAX_STRING);</span><br><span class="line"></span><br><span class="line">                s = sdscatprintf(s,<span class="string">&quot;... (%lu more bytes)&quot;</span>,</span><br><span class="line">                    (<span class="type">unsigned</span> <span class="type">long</span>)</span><br><span class="line">                    sdslen(argv[j]-&gt;ptr) - SLOWLOG_ENTRY_MAX_STRING);</span><br><span class="line">                se-&gt;argv[j] = createObject(OBJ_STRING,s);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[j]-&gt;refcount == OBJ_SHARED_REFCOUNT) &#123;</span><br><span class="line">                se-&gt;argv[j] = argv[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* Here we need to duplicate the string objects composing the</span></span><br><span class="line"><span class="comment">                 * argument vector of the command, because those may otherwise</span></span><br><span class="line"><span class="comment">                 * end shared with string objects stored into keys. Having</span></span><br><span class="line"><span class="comment">                 * shared objects between any part of Redis, and the data</span></span><br><span class="line"><span class="comment">                 * structure holding the data, is a problem: FLUSHALL ASYNC</span></span><br><span class="line"><span class="comment">                 * may release the shared string object and create a race. */</span></span><br><span class="line">                se-&gt;argv[j] = dupStringObject(argv[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置命令的执行时间</span></span><br><span class="line">    se-&gt;time = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 设置发生时间</span></span><br><span class="line">    se-&gt;duration = duration;</span><br><span class="line">    se-&gt;id = server.slowlog_entry_id++;</span><br><span class="line">    se-&gt;peerid = sdsnew(getClientPeerId(c));</span><br><span class="line">    se-&gt;cname = c-&gt;name ? sdsnew(c-&gt;name-&gt;ptr) : sdsempty();</span><br><span class="line">    <span class="keyword">return</span> se;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除慢查询日志"><a href="#删除慢查询日志" class="headerlink" title="删除慢查询日志"></a>删除慢查询日志</h4><p>遍历服务器的慢查询日志，如果存在，则逐条删除。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">slowlogReset</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (listLength(server.slowlog) &gt; <span class="number">0</span>)</span><br><span class="line">        listDelNode(server.slowlog,listLast(server.slowlog));</span><br></pre></td></tr></table></figure><p><code>listDelNode</code>方法定义在<code>src/adlist.c</code>中。</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>redis提供了两种持久化方式，对应的服务器配置如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/redis/redis/blob/unstable/src/slowlog.c#L137">1. redis slowlog.c</a><br><a href="https://www.cnblogs.com/mrhelloworld/p/redis-architecture.html">2. redis架构</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redis服务器&quot;&gt;&lt;a href=&quot;#redis服务器&quot; class=&quot;headerlink&quot; title=&quot;redis服务器&quot;&gt;&lt;/a&gt;redis服务器&lt;/h2&gt;&lt;p&gt;redis服务器负责与多个客户端建立网络连接，处理客户端请求，在数据库中保存客户端执行命令所</summary>
      
    
    
    
    <category term="数据库" scheme="https://mqrayblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>redis之特殊数据类型</title>
    <link href="https://mqrayblog.cn/2023/07/21/redis%E4%B9%8B%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://mqrayblog.cn/2023/07/21/redis%E4%B9%8B%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-07-20T17:26:45.000Z</published>
    <updated>2023-07-23T09:07:37.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h3><p><code>bitmap</code>即位图，是一种基于位运算的数据结构，用连续的二进制位描述某些业务，例如用户的签到状态等。<code>redis</code>中的string是二进制安全的，故而使用string来描述这个位图。<br>相比其他数据结构，位图所占用的存储空间非常小，在上述的业务场景，使用位图更加高效。<br><img src="/2023/07/21/redis%E4%B9%8B%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/bit-map.png"></p><p>Redis提供了<code>SETBIT</code>、<code>GETBIT</code> 、<code>BITCOUNT</code> 、<code>BITOP</code>四个命令，用于处理二进制数组</p><h4 id="SETBIT"><a href="#SETBIT" class="headerlink" title="SETBIT"></a>SETBIT</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETBIT key offset value </span><br></pre></td></tr></table></figure><p><code>SETBIT</code>用于将二进制数组在偏移量位置处的二进制值设置为value，当<code>key</code>不存在时，会自动生成一个新的字符串值。字符串会扩展以确保可以在offset位置上设置value值，当字符串扩展时，空白位置以0填充 offset&gt;&#x3D;0， 小于512M<br>注意对于较大的<code>OFFSET</code>值，命令执行过程中的内存分配可能阻塞redis服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; setbit bitmap 10086 1</span><br><span class="line">(integer) 0</span><br><span class="line">123.122.10.231:6379&gt; getbit bitmap 10086</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h5 id="setbit的执行过程"><a href="#setbit的执行过程" class="headerlink" title="setbit的执行过程"></a>setbit的执行过程</h5><ol><li>计算保存offset偏移量指定的二进制位至少需要多少个字节：<br> <code>len=[offset/8] + 1</code> 向下取整。</li><li>检查这个位图对应的<code>redisObject.ptr</code>指向的<code>sdshar</code>的len字段<br>是否小于步骤1中计算的len值，如果小于，则将sds的长度扩展为len字节，并将所有扩展空间的二进制位设置为0。</li><li>计算offset偏移量指定的二进制位保存在哪一个字节：<br><code>byte=offset/8</code>。</li><li>计算offset偏移量指定的二进制位在byte个字节中的第几个二进制位：<br><code>bit=offser%8 + 1</code>。</li><li>根据计算得出的byte和bit定位到二进制数组中offset的位置，将旧值存储在oldvalue中，并将其值修改为value指定的值。</li><li>最后，向客户端返回oldvalue的值。</li></ol><p>上述计算过程均可以在常数时间内完成，故而其时间复杂度为<code>O(1)</code></p><h4 id="GETBIT"><a href="#GETBIT" class="headerlink" title="GETBIT"></a>GETBIT</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GETBIT key offset </span><br></pre></td></tr></table></figure><p>获取二进制数组key指定偏移量offset处的值。当offset比字符串值的长度大或者key不存在时，返回0。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; getbit bitmap 10086</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h5 id="getbit的执行过程"><a href="#getbit的执行过程" class="headerlink" title="getbit的执行过程"></a>getbit的执行过程</h5><p>和<code>setbit</code>类似，核心就是计算<code>byte</code>和<code>bit</code>。命令执行过程如下：</p><ol><li>计算byte</li><li>计算bit</li><li>根据byte 和 bit定位到二进制数组中偏移量位置，读取该位置上的值</li></ol><p>上述过程的时间复杂度也为<code>O(1)</code></p><h4 id="BITCOUNT"><a href="#BITCOUNT" class="headerlink" title="BITCOUNT"></a>BITCOUNT</h4><p>此命令经常被用于统计用户上线次数等业务：<a href="http://redisdoc.com/bitmap/bitcount.html">模式：使用 bitmap 实现用户上线次数统计</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITCOUNT key [start] [end]</span><br></pre></td></tr></table></figure><p>计算给定字符串key中，被设置为1的比特位数量；也可以只计算start到stop指定的字节范围的二进制数组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; getbit bitmap 10086</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; bitcount bitmap</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; setbit bitmap 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">123.122.10.231:6379&gt; setbit bitmap 2 1</span><br><span class="line">(integer) 0</span><br><span class="line">123.122.10.231:6379&gt; bitcount bitmap</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h5 id="bitcount实现原理"><a href="#bitcount实现原理" class="headerlink" title="bitcount实现原理"></a>bitcount实现原理</h5><p>在数学上，统计一个二进制数组中，非0二进制位的数量，被称作<code>计算汉明重量</code>，该算法通过一系列位移和位运算操作，可以在常数时间内计算多个字节的汉明重量，并且不需要使用任何额外的内存。<br>参见<code>variable-precision swar</code>算法<br>redis使用查表法+swar实现：<br>redis中采用的实现源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Count number of bits set in the binary array pointed by &#x27;s&#x27; and long</span></span><br><span class="line"><span class="comment"> * &#x27;count&#x27; bytes. The implementation of this function is required to</span></span><br><span class="line"><span class="comment"> * work with an input string length up to 512 MB or more (server.proto_max_bulk_len) */</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">redisPopcount</span><span class="params">(<span class="type">void</span> *s, <span class="type">long</span> count)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *p = s;</span><br><span class="line">    <span class="type">uint32_t</span> *p4;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> bitsinbyte[<span class="number">256</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Count initial bytes not aligned to 32 bit. */</span></span><br><span class="line">    <span class="keyword">while</span>((<span class="type">unsigned</span> <span class="type">long</span>)p &amp; <span class="number">3</span> &amp;&amp; count) &#123;</span><br><span class="line">        bits += bitsinbyte[*p++];</span><br><span class="line">        count--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Count bits 28 bytes at a time */</span></span><br><span class="line">    p4 = (<span class="type">uint32_t</span>*)p;</span><br><span class="line">    <span class="keyword">while</span>(count&gt;=<span class="number">28</span>) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> aux1, aux2, aux3, aux4, aux5, aux6, aux7;</span><br><span class="line"></span><br><span class="line">        aux1 = *p4++;</span><br><span class="line">        aux2 = *p4++;</span><br><span class="line">        aux3 = *p4++;</span><br><span class="line">        aux4 = *p4++;</span><br><span class="line">        aux5 = *p4++;</span><br><span class="line">        aux6 = *p4++;</span><br><span class="line">        aux7 = *p4++;</span><br><span class="line">        count -= <span class="number">28</span>;</span><br><span class="line"></span><br><span class="line">        aux1 = aux1 - ((aux1 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux1 = (aux1 &amp; <span class="number">0x33333333</span>) + ((aux1 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux2 = aux2 - ((aux2 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux2 = (aux2 &amp; <span class="number">0x33333333</span>) + ((aux2 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux3 = aux3 - ((aux3 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux3 = (aux3 &amp; <span class="number">0x33333333</span>) + ((aux3 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux4 = aux4 - ((aux4 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux4 = (aux4 &amp; <span class="number">0x33333333</span>) + ((aux4 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux5 = aux5 - ((aux5 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux5 = (aux5 &amp; <span class="number">0x33333333</span>) + ((aux5 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux6 = aux6 - ((aux6 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux6 = (aux6 &amp; <span class="number">0x33333333</span>) + ((aux6 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        aux7 = aux7 - ((aux7 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">        aux7 = (aux7 &amp; <span class="number">0x33333333</span>) + ((aux7 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">        bits += ((((aux1 + (aux1 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux2 + (aux2 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux3 + (aux3 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux4 + (aux4 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux5 + (aux5 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux6 + (aux6 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>) +</span><br><span class="line">                    ((aux7 + (aux7 &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>))* <span class="number">0x01010101</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Count the remaining bytes. */</span></span><br><span class="line">    p = (<span class="type">unsigned</span> <span class="type">char</span>*)p4;</span><br><span class="line">    <span class="keyword">while</span>(count--) bits += bitsinbyte[*p++];</span><br><span class="line">    <span class="keyword">return</span> bits;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BITOP"><a href="#BITOP" class="headerlink" title="BITOP"></a>BITOP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITOP operation destkey key [key …]</span><br></pre></td></tr></table></figure><p>对一个或多个二进制数组key进行元操作，并将结果保存到二进制数组destkey中。其中<code>operation</code>可以是<code>and</code>、<code>or</code>、<code>not</code>、<code>xor</code>中的任意一种，对应与或非、异或操作。</p><h3 id="hyperloglog"><a href="#hyperloglog" class="headerlink" title="hyperloglog"></a>hyperloglog</h3><p><code>hyperloglog</code>并非<code>redis</code>特有，它是一种基于统计的算法，用以计算大数据场景下统计基数的算法：<br>目前用于基数统计的算法包括：</p><ol><li>linear counting(LC): 早期的基数估算算法，时间复杂度是O(N)。</li><li>LogLog counting(LLC): 相比LC更节省内存，空间复杂度为O(log(log(N)))。</li><li>hyperloglog counting(HLLC): 是基于LLC的优化，在相同的空间复杂度下，比LLC的误差要小。</li></ol><p>其优点在于，在输入的元素数量或者所占空间非常大时，计算基数的空间开销非常少。每个<code>hyperloglog</code>键只需要花费12KB的内存，就可以计算<code>2^64</code>个不同元素的基数。<br>另外，它只会根据输入元素计算基数，不会存储元素本身，所以不能返回各个元素。</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 将任意数量的元素添加到指定的hyperloglog中</span><br><span class="line">PFADD key element [element …]</span><br><span class="line"></span><br><span class="line">// 返回在给定键的hyperloglog的近似基数，key不存在则返回0</span><br><span class="line">PFCOUNT key [key …]</span><br><span class="line"></span><br><span class="line">// 将多个hyperloglog 合并为 一个</span><br><span class="line">PFMERGE destkey sourcekey [sourcekey …]</span><br></pre></td></tr></table></figure><p><code>PFADD</code>命令的返回取决于执行命令后，<code>hyperloglog</code>估计的基数发生变化时，则返回1，否则返回0。命令不会一次性分配12K内存。[具体的扩展原则见源码]</p><p>如果该key值不存在，则先创建，再执行此命令。<br><code>PFCOUNT</code>返回的基数并不是精确值，而是带有一个<code>0.81%</code>标准错误的近似值。<br><code>PFMERGE</code>，将多个<code>hyperloglog</code>合并为一个，合并后的<code>htperloglog</code>的基数接近于所有输入的<code>hyperloglog</code>可见集合的并集。<br><code>hyperloglog</code>的源码实现主要参考 <code>P. Flajolet, Éric Fusy, O. Gandouet, and F. Meunier. Hyperloglog: The analysis of a near-optimal cardinality estimation algorithm</code></p><p>实际操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; PFADD  database  &quot;Redis&quot;  &quot;MongoDB&quot;  &quot;MySQL&quot;</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [246] located at 123.122.42.170:6379</span></span><br><span class="line">(integer) 1</span><br><span class="line">123.122.42.170:6379&gt; PFADD  database  &quot;PostgreSQL&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.42.170:6379&gt; PFCOUNT  database</span><br><span class="line">(integer) 4</span><br><span class="line">123.122.42.170:6379&gt; PFADD  database  &quot;PostgreSQL&quot;</span><br><span class="line">(integer) 0</span><br><span class="line">123.122.42.170:6379&gt; PFCOUNT  database</span><br><span class="line">(integer) 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">123.122.42.170:6379&gt;  PFADD  nosql  &quot;Redis&quot;  &quot;MongoDB&quot;  &quot;Memcached&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.42.170:6379&gt; PFADD  RDBMS  &quot;MySQL&quot; &quot;MSSQL&quot; &quot;PostgreSQL&quot;</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.42.170:6379&gt;  PFMERGE  databases  nosql  RDBMS</span><br><span class="line">OK</span><br><span class="line">123.122.42.170:6379&gt;  PFCOUNT  databases</span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li>由于不需要保存数据内容+计算基数特别快，所以非常适合计算日活、月活数据</li></ol><h3 id="geo"><a href="#geo" class="headerlink" title="geo"></a>geo</h3><p>redis 3.2版本开始提供了<code>geo(地理信息定位)</code>功能，支持存储地理位置信息。</p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 将给定的空间元素加到指定的键中 [longitude latitude member]， 这些元素会以有序集合的形式被存储在键中</span><br><span class="line">GEOADD key longitude latitude member [longitude latitude member …]</span><br><span class="line"></span><br><span class="line">// 从key中获取 给定位置元素的位置，返回经纬度</span><br><span class="line">GEOPOS key member [member …]</span><br><span class="line"></span><br><span class="line">// 返回两个给定位置之间的距离 </span><br><span class="line">GEODIST key member1 member2 [unit]</span><br><span class="line"></span><br><span class="line">//  以给定的经纬度为中心，返回键中与中心点距离不超过最大距离的所有元素位置</span><br><span class="line">GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [ASC|DESC] [COUNT count]</span><br><span class="line"></span><br><span class="line">// 和GEORADIUS类似，不过是以键中元素作为圆心返回与之距离不超过最大距离的所有元素位置</span><br><span class="line">GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [ASC|DESC] [COUNT count]</span><br><span class="line"></span><br><span class="line">// 返回某元素位置的 geohash表示</span><br><span class="line">GEOHASH key member [member …]</span><br></pre></td></tr></table></figure><p><code>GEOADD</code>命令以标准(x,y)的形式接收输入参数，经度在前，纬度在后。另外，它能够记录的坐标是有限的，非常接近两级的区域无法被索引，精确的坐标限制为:</p><ol><li>有效的经度介于 -180 度至 180 度之间。</li><li>有效的纬度介于 -85.05112878 度至 85.05112878 度之间。<br>超出上述范围则会返回错误。</li></ol><p><code>GEODIST</code>命令中默认的单位为m，可选参数有：</p><ol><li>m，即米。</li><li>km，即千米。</li><li>mi， 即英里。</li><li>ft，即英尺。</li></ol><p><code>geohash</code>: 对于精度维度而言，<code>geohash</code>会将其编码为N位的二进制数，实际上就是通过N次分区实现。<br>对于某一位置元素，分别对其经度和维度进行编码，得到的两个二进制数，偶数位放置经度值，奇数为放置维度，最后使用base32进行编码即得到最后的输出。<br>这里要注意的是，geohash算法使用的是<code>peano空间填充曲线</code>，这种曲线会产生突变，会导致编码虽然相似，但其距离可能相差很大的问题。在实际应用中，需要先筛选相似<code>geohash</code>编码相似的点，然后计算实际距离。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">123.122.228.34:6379&gt; zrange citys 0 -1 withscores </span><br><span class="line"> 1) &quot;zhuhai&quot;</span><br><span class="line"> 2) &quot;4046325959374599&quot;</span><br><span class="line"> 3) &quot;guangzhou&quot;</span><br><span class="line"> 4) &quot;4046533892156333&quot;</span><br><span class="line"> 5) &quot;shenzhen&quot;</span><br><span class="line"> 6) &quot;4046615882282816&quot;</span><br><span class="line"> 7) &quot;shanghai&quot;</span><br><span class="line"> 8) &quot;4066919243534770&quot;</span><br><span class="line"> 9) &quot;beijing&quot;</span><br><span class="line">10) &quot;4069885649163649&quot;</span><br></pre></td></tr></table></figure><p><code>geo</code>中使用某种编码将经纬度设置为 对应 memeber 的 score。<br>故而，<code>GEOADD citys 116.41667 39.91667 &quot;beijing&quot;</code>命令等价于：<br><code>ZADD citys 4069885649163649 beijing</code>。</p><p>实际操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; GEOADD citys 116.41667 39.91667 &quot;beijing&quot; 121.43333 34.50000 &quot;shanghai&quot; 113.23333 23.16667 &quot;guangzhou&quot; 114.06667 22.61667 &quot;shenzhen&quot;   113.51667 22.30000 &quot;zhuhai&quot;</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [9558] located at 123.122.228.34:6379</span></span><br><span class="line">(integer) 5</span><br><span class="line">123.122.228.34:6379&gt; geopos citys beijing</span><br><span class="line">1) 1) &quot;116.41667157411575317&quot;</span><br><span class="line">   2) &quot;39.91667095273589183&quot;</span><br><span class="line">123.122.10.231:6379&gt; geodist citys beijing shanghai  km</span><br><span class="line">&quot;748.3469&quot;</span><br><span class="line">123.122.228.34:6379&gt; georadius citys 116 39 500 km</span><br><span class="line">1) &quot;beijing&quot;</span><br><span class="line">123.122.228.34:6379&gt; GEORADIUSBYMEMBER citys shanghai 1000 km</span><br><span class="line">1) &quot;shanghai&quot;</span><br><span class="line">2) &quot;beijing&quot;</span><br><span class="line">123.122.228.34:6379&gt; GEORADIUSBYMEMBER citys shanghai 2000  km</span><br><span class="line">1) &quot;zhuhai&quot;</span><br><span class="line">2) &quot;guangzhou&quot;</span><br><span class="line">3) &quot;shenzhen&quot;</span><br><span class="line">4) &quot;shanghai&quot;</span><br><span class="line">5) &quot;beijing&quot;</span><br><span class="line">123.122.228.34:6379&gt; GEOHASH citys shenzhen</span><br><span class="line">1) &quot;ws10ethzdh0&quot;</span><br><span class="line"></span><br><span class="line">123.122.228.34:6379&gt; type citys </span><br><span class="line">zset</span><br><span class="line">123.122.228.34:6379&gt; OBJECT encoding citys</span><br><span class="line">&quot;ziplist</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>适用于和位置相关的业务，例如附近的人、共享单车等。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://blog.csdn.net/qq_35190492/article/details/123467702">1. 详解redis bitmap</a><br><a href="https://github.com/redis/redis/blob/2495b90a647f9f9987202efd29647f81f217b8ad/src/hyperloglog.c">2. redis hyperloglog实现</a><br><a href="http://redisdoc.com/geo/georadius.html">3. redis geo命令参考</a><br><a href="https://www.cnblogs.com/LBSer/p/3310455.html">4. GeoHash核心原理解析</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;bitmap&quot;&gt;&lt;a href=&quot;#bitmap&quot; class=&quot;headerlink&quot; title=&quot;bitmap&quot;&gt;&lt;/a&gt;bitmap&lt;/h3&gt;&lt;p&gt;&lt;code&gt;bitmap&lt;/code&gt;即位图，是一种基于位运算的数据结构，用连续的二进制位描述某些业务，例如</summary>
      
    
    
    
    <category term="数据库" scheme="https://mqrayblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis之基础数据类型</title>
    <link href="https://mqrayblog.cn/2023/07/19/redis%E5%9F%BA%E7%A1%80/"/>
    <id>https://mqrayblog.cn/2023/07/19/redis%E5%9F%BA%E7%A1%80/</id>
    <published>2023-07-18T17:16:20.000Z</published>
    <updated>2023-07-21T14:38:25.895Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>redis是一个开源的、基于内存的存储结构[使用C语言编写]，通常被用于缓存、消息订阅等场景。</p></blockquote><p>redis的特点</p><ul><li>基于内存：redis借助RAM提供高速的数据访问，比磁盘要快几个量级</li></ul><h3 id="redis的基础数据类型"><a href="#redis的基础数据类型" class="headerlink" title="redis的基础数据类型"></a>redis的基础数据类型</h3><blockquote><p>redis是键值对数据库，redis中的键均为字符串，redis中最基础的五种数据类型：<code>string</code>、<code>lsit</code>、<code>set</code>、<code>zset</code>、<code>hash</code><br>redis中使用<code>redisObject</code>来描述所有的key和value，<code>redisObject</code>的结构体定义如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="comment">// 数据类型， 占4bit</span></span><br><span class="line">    <span class="type">unsigned</span> type:<span class="number">4</span>; </span><br><span class="line">    <span class="comment">// 编码格式 占4bit</span></span><br><span class="line">    <span class="type">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 此对象最后一次被访问的时间 占24bit</span></span><br><span class="line">    <span class="type">unsigned</span> lru:LRU_BITS; <span class="comment">/* LRU time (relative to global lru_clock) or</span></span><br><span class="line"><span class="comment">                            * LFU data (least significant 8 bits frequency</span></span><br><span class="line"><span class="comment">                            * and most significant 16 bits access time). */</span></span><br><span class="line">    <span class="comment">// 引用计数 </span></span><br><span class="line">    <span class="type">int</span> refcount;</span><br><span class="line">    <span class="comment">// 指向底层的数据实例的指针</span></span><br><span class="line">    <span class="type">void</span> *ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中， type 标识数据类型，占4个比特，encoding标识具体的编码格式，占4个比特，lru占24个字节，用以记录最近一次访问时间，refcount为引用计数，*ptr则指向底层的数据结构实现。</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>redisObject.type的取值如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The actual Redis Object */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_STRING 0    <span class="comment">/* String object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_LIST 1      <span class="comment">/* List object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_SET 2       <span class="comment">/* Set object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ZSET 3      <span class="comment">/* Sorted set object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_HASH 4      <span class="comment">/* Hash object. */</span></span></span><br></pre></td></tr></table></figure><p>在客户端中，可以使用<code>type</code>命令获取每种数据类型的类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">string</span></span><br><span class="line">182.168.168.226:6379&gt; set age 18</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [741] located at 182.168.106.129:6379</span></span><br><span class="line">OK</span><br><span class="line">182.168.106.129:6379&gt; type age </span><br><span class="line">string</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">list</span></span><br><span class="line">182.168.106.129:6379&gt; lpush friends a b c</span><br><span class="line">(integer) 3</span><br><span class="line">182.168.106.129:6379&gt; type friends </span><br><span class="line">list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span></span></span><br><span class="line">182.168.106.129:6379&gt; sadd ids 1 2 3 </span><br><span class="line">(integer) 3</span><br><span class="line">182.168.106.129:6379&gt; type ids</span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zset</span></span><br><span class="line">182.168.106.129:6379&gt; zadd info 100 mqray 90 lmq</span><br><span class="line">(integer) 2</span><br><span class="line">182.168.168.226:6379&gt; type info </span><br><span class="line">zset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> <span class="built_in">hash</span></span></span><br><span class="line">182.168.168.226:6379&gt; hset myhset name mqray</span><br><span class="line">(integer) 1</span><br><span class="line">182.168.50.160:6379&gt; type myhset</span><br><span class="line">hash</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h4><p>在客户端中，可以使用<code>object encoding key</code> 获取到对象所使用的编码格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">182.168.106.129:6379&gt; object encoding age</span><br><span class="line">&quot;int&quot;</span><br><span class="line">182.168.106.129:6379&gt; object encoding name</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [5798] located at 182.168.168.226:6379</span></span><br><span class="line">&quot;embstr&quot;</span><br><span class="line">182.168.168.226:6379&gt; object encoding friends</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [420] located at 182.168.106.129:6379</span></span><br><span class="line">&quot;quicklist&quot;</span><br><span class="line">182.168.50.160:6379&gt; object encoding ids</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [3296] located at 182.168.106.129:6379</span></span><br><span class="line">&quot;intset&quot;</span><br><span class="line">182.168.106.129:6379&gt; object encoding info</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [5642] located at 182.168.168.226:6379</span></span><br><span class="line">&quot;ziplist&quot;</span><br><span class="line">182.168.168.226:6379&gt; object encoding myhset</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [13092] located at 182.168.50.160:6379</span></span><br><span class="line">&quot;ziplist&quot;</span><br></pre></td></tr></table></figure><p>redisObject.encoding取值如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Objects encoding. Some kind of objects like Strings and Hashes can be</span></span><br><span class="line"><span class="comment"> * internally represented in multiple ways. The &#x27;encoding&#x27; field of the object</span></span><br><span class="line"><span class="comment"> * is set to one of this fields for this object. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_RAW 0     <span class="comment">/* Raw representation */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_INT 1     <span class="comment">/* Encoded as integer */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_HT 2      <span class="comment">/* Encoded as hash table */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_ZIPMAP 3  <span class="comment">/* No longer used: old hash encoding. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_LINKEDLIST 4 <span class="comment">/* No longer used: old list encoding. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_ZIPLIST 5 <span class="comment">/* No longer used: old list/hash/zset encoding. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_INTSET 6  <span class="comment">/* Encoded as intset */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_SKIPLIST 7  <span class="comment">/* Encoded as skiplist */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_EMBSTR 8  <span class="comment">/* Embedded sds string encoding */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_QUICKLIST 9 <span class="comment">/* Encoded as linked list of listpacks */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_STREAM 10 <span class="comment">/* Encoded as a radix tree of listpacks */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_LISTPACK 11 <span class="comment">/* Encoded as a listpack */</span></span></span><br></pre></td></tr></table></figure><p>在redis中，对于每种数据类型<code>type</code>，对用有多种编码<code>encoding</code>实现， 其映射关系如图所示：<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/redis-type-encoding.png"></p><p>redis可以根据不同的使用场景来对对象使用不同的编码，大大提高的redis的灵活性和效率.</p><h5 id="类型检查与命令多态"><a href="#类型检查与命令多态" class="headerlink" title="类型检查与命令多态"></a>类型检查与命令多态</h5><h5 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h5><h5 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h5><h4 id="lru"><a href="#lru" class="headerlink" title="lru"></a>lru</h4><p>记录了此对象最后一次被命令程序访问的时间。用当前时间减去lru即为此对象的空转时长。可以使用 <code>object idletime</code>获取对象的空转时长。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">182.168.50.160:6379&gt; object idletime friends</span><br><span class="line">(integer) 108</span><br></pre></td></tr></table></figure><p>如果服务器开启了<code>maxmemory</code>选项，且服务器所使用的内存回收算法为<code>volatile-lru</code>或者<code>allkeys-lru</code>时，当服务器所使用的内存超出<code>maxmemory</code>设定的上限时，服务器会优先释放空转时长高的数据库键，以此回收内存。<br>其中，redis所使用的内存淘汰策略配置包括如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><span class="line"><span class="meta"># is reached. You can select one from the following behaviors:</span></span><br><span class="line">#</span><br><span class="line"><span class="meta"># volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.</span></span><br><span class="line"><span class="meta"># allkeys-lru -&gt; Evict any key using approximated LRU.</span></span><br><span class="line"><span class="meta"># volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.</span></span><br><span class="line"><span class="meta"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span></span><br><span class="line"><span class="meta"># volatile-random -&gt; Remove a random key having an expire set.</span></span><br><span class="line"><span class="meta"># allkeys-random -&gt; Remove a random key, any key.</span></span><br><span class="line"><span class="meta"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="meta"># noeviction -&gt; Don<span class="string">&#x27;t evict anything, just return an error on write operations.</span></span></span><br></pre></td></tr></table></figure><p>通过配置<code>maxmemory-policy</code>以调整内存回收策略，默认值为<code>noeviction</code>，即不回收</p><h4 id="refcount"><a href="#refcount" class="headerlink" title="refcount"></a>refcount</h4><ul><li>当新创建一个对象时，该对象的<code>refcount</code>属性被设置为1；</li><li>当对一个对象共享时，该对象的<code>refcount</code>属性 +1；</li><li>消除一个对象引用后，该对象的<code>refcount</code>属性 -1；</li><li>当对象的<code>refcount</code>为0时，此<code>redisObject</code>及它指向的数据结构的内存将被释放。</li></ul><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string 类型是二进制安全的，可以用于存储任何数据。所谓的二进制安全，是指该二进制在写入时是什么样的，读取时就是怎样。反例就是c语言中字符串默认以<code>\0</code>结尾，而读取时不显示末尾的<code>\0</code></p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br><span class="line">// 为多个键设置值</span><br><span class="line">mset key value [key value]</span><br><span class="line">// 只有在key不尊在的情况下将key的值设置为value</span><br><span class="line">setnx key value </span><br><span class="line">// 将键key的值设置为value，并将key的过期时间设置为 seconds；如果key已存在，则覆盖已有值</span><br><span class="line">setex key seconds value </span><br><span class="line"></span><br><span class="line">// 以毫秒形式设置key的过期时间</span><br><span class="line">psetex key millseconds value</span><br><span class="line"></span><br><span class="line">// 获取key对应的值，不存在返回nil</span><br><span class="line">get key</span><br><span class="line">// 获取过期时间</span><br><span class="line">ttl key </span><br><span class="line"></span><br><span class="line">// 返回key对应值的字符串长度， key不存在时返回0； key对应值不为string时，返回错误</span><br><span class="line">strlen key</span><br><span class="line">// 如果key对应值是字符串，则将value追加到键的末尾，返回追加之后键key的值的长度</span><br><span class="line">append key value</span><br><span class="line"></span><br><span class="line">// 如果键key的值为int，则+1；如果不存在则先初始化为0，在执行incr；如果不为int，返回错误</span><br><span class="line">incr key</span><br><span class="line">// key 是int时，增量修改</span><br><span class="line">incrby key increment</span><br><span class="line">// 为键key存储的值加上浮点数increment</span><br><span class="line">incrbyfloat key increment</span><br></pre></td></tr></table></figure><h4 id="sds-简单动态字符串"><a href="#sds-简单动态字符串" class="headerlink" title="sds 简单动态字符串"></a>sds 简单动态字符串</h4><p>尽管redis由c实现，但是redis中并未使用cyuyan中的string，而是使用其封装作为redis中的字符串实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// buf 中已占用空间的长度</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="comment">// buf 中剩余可用空间的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">free</span>;</span><br><span class="line">    <span class="comment">// 数据空间</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在redis3.2之后，为了更好地内存优化，<code>sdshdr</code>又被分为如下几种：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *sds;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Note: sdshdr5 is never used, we just access the flags byte directly.</span></span><br><span class="line"><span class="comment"> * However is here to document the layout of type 5 SDS strings. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr5</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, and 5 msb of string length */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr8</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint8_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr16</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint16_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr32</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint32_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr64</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint64_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="type-1"><a href="#type-1" class="headerlink" title="type"></a>type</h4><p>string 对应的 数据类型为 string</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; type long</span><br><span class="line">string</span><br><span class="line">182.168.168.226:6379&gt; type name</span><br><span class="line">string</span><br><span class="line">182.168.168.226:6379&gt; type age</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h4 id="encoding-1"><a href="#encoding-1" class="headerlink" title="encoding"></a>encoding</h4><p>string类型对应三种编码格式，分别为<code>embstr</code>、<code>int</code>、<code>raw</code></p><h5 id="int"><a href="#int" class="headerlink" title="int"></a>int</h5><p>如果一个字符串对象保存的是整数值，且这个整数值可以用long类型标识，那么此字符串对象会将这个整数值保存在<code>redisObject.*ptr</code>中，并将<code>encoding</code>设置为<code>int</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; set age 18</span><br><span class="line">OK</span><br><span class="line">182.168.106.129:6379&gt; object encoding age</span><br><span class="line">&quot;int&quot;</span><br></pre></td></tr></table></figure><p>对应的redisObject如图所示：<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/string-int.png"></p><h5 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h5><p>如果该字符串的长度大于44个字节，则将其对象编码设置为<code>raw</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">182.168.106.129:6379&gt; set long org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert</span><br><span class="line">OK</span><br><span class="line">182.168.106.129:6379&gt; strlen long</span><br><span class="line">(integer) 83</span><br><span class="line">182.168.168.226:6379&gt; object encoding long</span><br><span class="line">&quot;raw&quot;</span><br></pre></td></tr></table></figure><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/string-raw.png"><h5 id="embstr"><a href="#embstr" class="headerlink" title="embstr"></a>embstr</h5><p>如果该字符串的长度小于等于44个字节，将使用<code>embstr</code>编码方式保存这个字符串值<br>embstr是专门用于保存短字符串的编码方式，和raw一样使用redisObject和sdshdr结构标识字符串对象，但是raw会调用两次内存分配函数分别创建redisObject和sdshdr结构，而embstr则只需要调用一次内存分配函数分配一块连续的空间，空间中依次包含redisObject和sdshdr。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10.65.196.57:32084&gt; set name mqray</span><br><span class="line">OK</span><br><span class="line">182.168.168.226:6379&gt; strlen name</span><br><span class="line">(integer) 5</span><br><span class="line">182.168.50.160:6379&gt; object encoding name</span><br><span class="line">&quot;embstr&quot;</span><br></pre></td></tr></table></figure><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/string-embstr.png"><h5 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h5><p>int、embstr编码的字符串在条件满足的情况下会被转化为raw编码的字符串<br>原先值为<code>int</code>的对象，在执行诸如<code>append key value</code>后将会变为<code>raw</code>编码的对象。且不会变为<code>embstr</code>编码的对象，因为redis没有提供embstr编码字符串的修改程序。<br>原先为<code>embstr</code>编码的对象，执行命令时，会先将对象修改为<code>raw</code>编码的字符串，再执行修改命令。</p><h4 id="字符串分配源码"><a href="#字符串分配源码" class="headerlink" title="字符串分配源码"></a>字符串分配源码</h4><p>创建字符串对象时，会根据字符串对象的长度来使用不同的函数来创建。字符串长度大于44字节时，使用<code>createRawStringObject</code>创建，否则使用<code>createEmbeddedStringObject</code>创建。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_EMBSTR_SIZE_LIMIT 44</span></span><br><span class="line">robj *<span class="title function_">createStringObject</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= OBJ_ENCODING_EMBSTR_SIZE_LIMIT)</span><br><span class="line">        <span class="keyword">return</span> createEmbeddedStringObject(ptr,len);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> createRawStringObject(ptr,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>createEmbeddedStringObject</code>函数源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Create a string object with encoding OBJ_ENCODING_EMBSTR, that is</span></span><br><span class="line"><span class="comment"> * an object where the sds string is actually an unmodifiable string</span></span><br><span class="line"><span class="comment"> * allocated in the same chunk as the object itself. */</span></span><br><span class="line">robj *<span class="title function_">createEmbeddedStringObject</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    robj *o = zmalloc(<span class="keyword">sizeof</span>(robj)+<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr8)+len+<span class="number">1</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sdshdr8</span> *<span class="title">sh</span> =</span> (<span class="type">void</span>*)(o+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    o-&gt;type = OBJ_STRING;</span><br><span class="line">    o-&gt;encoding = OBJ_ENCODING_EMBSTR;</span><br><span class="line">    o-&gt;ptr = sh+<span class="number">1</span>;</span><br><span class="line">    o-&gt;refcount = <span class="number">1</span>;</span><br><span class="line">    o-&gt;lru = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    sh-&gt;len = len;</span><br><span class="line">    sh-&gt;alloc = len;</span><br><span class="line">    sh-&gt;flags = SDS_TYPE_8;</span><br><span class="line">    <span class="keyword">if</span> (ptr == SDS_NOINIT)</span><br><span class="line">        sh-&gt;buf[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ptr) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(sh-&gt;buf,ptr,len);</span><br><span class="line">        sh-&gt;buf[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">memset</span>(sh-&gt;buf,<span class="number">0</span>,len+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createRawStringObject</code>函数内部通过调用<code>createObject</code>函数创建字符串对象，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Create a string object with encoding OBJ_ENCODING_RAW, that is a plain</span></span><br><span class="line"><span class="comment"> * string object where o-&gt;ptr points to a proper sds string. */</span></span><br><span class="line">robj *<span class="title function_">createRawStringObject</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createObject(OBJ_STRING, sdsnewlen(ptr,len));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">robj *<span class="title function_">createObject</span><span class="params">(<span class="type">int</span> type, <span class="type">void</span> *ptr)</span> &#123;</span><br><span class="line">    robj *o = zmalloc(<span class="keyword">sizeof</span>(*o));</span><br><span class="line">    o-&gt;type = type;</span><br><span class="line">    o-&gt;encoding = OBJ_ENCODING_RAW;</span><br><span class="line">    o-&gt;ptr = ptr;</span><br><span class="line">    o-&gt;refcount = <span class="number">1</span>;</span><br><span class="line">    o-&gt;lru = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="redis内存管理基石-zmalloc-埋点预留"><a href="#redis内存管理基石-zmalloc-埋点预留" class="headerlink" title="redis内存管理基石 zmalloc [埋点预留]"></a>redis内存管理基石 zmalloc [埋点预留]</h4><p><a href="https://blog.csdn.net/guodongxiaren/article/details/44747719">redis内存管理基石</a></p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>redis使用c语言实现，没有内置链表数据结构，redis使用双向链表实现了链表，可以将元素添加到列表头部或者尾部。</p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><p>常见的list操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 将一个值或多个值的value插入到 列表键key的表头；如果key不存在，则创建后执行lpush；如果不是list类型，则返回错误</span><br><span class="line">lpush key value [value...]</span><br><span class="line"></span><br><span class="line">// 当key存在，且type为list时，将value插入到列表键key的表头，命令执行后返回列表长度；</span><br><span class="line">lpushx key value</span><br><span class="line"></span><br><span class="line">// 将一个值或多个值插入到列表尾部</span><br><span class="line">rpush key value [value...]</span><br><span class="line"></span><br><span class="line">// 将value插入到列表键的表尾</span><br><span class="line">rpushx key value</span><br><span class="line"></span><br><span class="line">// 移除key的表头元素</span><br><span class="line">lpop key </span><br><span class="line"></span><br><span class="line">// 移除key的表尾元素</span><br><span class="line"> rpop key</span><br><span class="line"></span><br><span class="line"> //  返回列表长度</span><br><span class="line"> llen key</span><br><span class="line"></span><br><span class="line">// 返回 列表key中，下标为index的元素，0代表第一个元素</span><br><span class="line">lindex key index</span><br><span class="line"></span><br><span class="line">// 返回列表 key 中指定区间的元素，0为第一个，-1为最后一个</span><br><span class="line">lrange key start stop</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">182.168.50.160:6379&gt; lpush char a b c d e f</span><br><span class="line">(integer) 6</span><br><span class="line">182.168.168.226:6379&gt; LRANGE char 0 -1 </span><br><span class="line">1) &quot;f&quot;</span><br><span class="line">2) &quot;e&quot;</span><br><span class="line">3) &quot;d&quot;</span><br><span class="line">4) &quot;c&quot;</span><br><span class="line">5) &quot;b&quot;</span><br><span class="line">6) &quot;a&quot;</span><br><span class="line">182.168.168.226:6379&gt; OBJECT encoding char</span><br><span class="line">&quot;quicklist&quot;</span><br><span class="line">182.168.168.226:6379&gt; llen char</span><br><span class="line">(integer) 6</span><br><span class="line">182.168.168.226:6379&gt; lpop key 1</span><br><span class="line">(nil)</span><br><span class="line">182.168.50.160:6379&gt; lpop char </span><br><span class="line">&quot;f&quot;</span><br><span class="line">182.168.168.226:6379&gt; llen char </span><br><span class="line">(integer) 5</span><br><span class="line">182.168.168.226:6379&gt; rpop char</span><br><span class="line">&quot;a&quot;</span><br><span class="line">182.168.168.226:6379&gt; llen char  </span><br><span class="line">(integer) 4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="type-2"><a href="#type-2" class="headerlink" title="type"></a>type</h4><p>redis中，列表对象对应的<code>redisObject</code>中type为<code>list</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; type char </span><br><span class="line">list</span><br></pre></td></tr></table></figure><h4 id="encoding-2"><a href="#encoding-2" class="headerlink" title="encoding"></a>encoding</h4><p>redis 3.2之前，列表对象采用的编码方式为 <code>ziplist</code>和<code>linkedlsit</code>，数据量小时使用ziplist，数据量大时则使用linkedlist。<br>由于链表的附加空间相对较高，prev和next指针占用16字节，每个节点的内存单独分配，会加剧内存的碎片化，影响内存管理效率。<br>后续的版本中，则使用<code>quicklist</code>替代了<code>ziplist</code>和<code>linkedlsit</code>。[为什么有这种优化?]</p><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/list-linkedlist-ziplist.png"><h5 id="ziplist"><a href="#ziplist" class="headerlink" title="ziplist"></a>ziplist</h5><p>压缩列表时为了节约内存而设计，由一系列页数编码的连续内存块组成的顺序型数据结构，一个压缩列表可以包含任意数量节点，每个节点可以保存一个字节数组或者整数值。<br>压缩链表的组成如下：<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/ziplist.png"></p><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/ziplist-2.png">- zlbytes：整个 ziplist 占用的内存字节数- zltail：到达 ziplist 表尾节点的偏移量- zllen：ziplist 中节点的数量- entryX： ziplist 所保存的节点- zlend： 用于标记 ziplist 的末端<h5 id="linkedlsit"><a href="#linkedlsit" class="headerlink" title="linkedlsit"></a>linkedlsit</h5><h5 id="quicklist"><a href="#quicklist" class="headerlink" title="quicklist"></a>quicklist</h5><p>quicklist实际上是ziplist和linkedlist的混合体，将linkedlist按段区分，每个节点使用ziplist来紧凑存储，多个ziplist之间使用双向指针相连。<br>在64位机器上占用40个字节<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/list-quickList.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* quicklist is a 40 byte struct (on 64-bit systems) describing a quicklist.</span></span><br><span class="line"><span class="comment"> * &#x27;count&#x27; is the number of total entries.</span></span><br><span class="line"><span class="comment"> * &#x27;len&#x27; is the number of quicklist nodes.</span></span><br><span class="line"><span class="comment"> * &#x27;compress&#x27; is: 0 if compression disabled, otherwise it&#x27;s the number</span></span><br><span class="line"><span class="comment"> *                of quicklistNodes to leave uncompressed at ends of quicklist.</span></span><br><span class="line"><span class="comment"> * &#x27;fill&#x27; is the user-requested (or default) fill factor.</span></span><br><span class="line"><span class="comment"> * &#x27;bookmarks are an optional feature that is used by realloc this struct,</span></span><br><span class="line"><span class="comment"> *      so that they don&#x27;t consume memory when not used. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quicklist</span> &#123;</span></span><br><span class="line">    quicklistNode *head;</span><br><span class="line">    quicklistNode *tail;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> count;        <span class="comment">/* total count of all entries in all listpacks */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> len;          <span class="comment">/* number of quicklistNodes */</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> fill : QL_FILL_BITS;       <span class="comment">/* fill factor for individual nodes */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> compress : QL_COMP_BITS; <span class="comment">/* depth of end nodes not to compress;0=off */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bookmark_count: QL_BM_BITS;</span><br><span class="line">    quicklistBookmark bookmarks[];</span><br><span class="line">&#125; quicklist;</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line"><span class="comment">/* quicklistNode is a 32 byte struct describing a listpack for a quicklist.</span></span><br><span class="line"><span class="comment"> * We use bit fields keep the quicklistNode at 32 bytes.</span></span><br><span class="line"><span class="comment"> * count: 16 bits, max 65536 (max lp bytes is 65k, so max count actually &lt; 32k).</span></span><br><span class="line"><span class="comment"> * encoding: 2 bits, RAW=1, LZF=2.</span></span><br><span class="line"><span class="comment"> * container: 2 bits, PLAIN=1 (a single item as char array), PACKED=2 (listpack with multiple items).</span></span><br><span class="line"><span class="comment"> * recompress: 1 bit, bool, true if node is temporary decompressed for usage.</span></span><br><span class="line"><span class="comment"> * attempted_compress: 1 bit, boolean, used for verifying during testing.</span></span><br><span class="line"><span class="comment"> * extra: 10 bits, free for future use; pads out the remainder of 32 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quicklistNode</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">quicklistNode</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">quicklistNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *entry;</span><br><span class="line">    <span class="type">size_t</span> sz;             <span class="comment">/* entry size in bytes */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count : <span class="number">16</span>;     <span class="comment">/* count of items in listpack */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> encoding : <span class="number">2</span>;   <span class="comment">/* RAW==1 or LZF==2 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> container : <span class="number">2</span>;  <span class="comment">/* PLAIN==1 or PACKED==2 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> recompress : <span class="number">1</span>; <span class="comment">/* was this node previous compressed? */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> attempted_compress : <span class="number">1</span>; <span class="comment">/* node can&#x27;t compress; too small */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> dont_compress : <span class="number">1</span>; <span class="comment">/* prevent compression of entry that will be used later */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> extra : <span class="number">9</span>; <span class="comment">/* more bits to steal for future usage */</span></span><br><span class="line">&#125; quicklistNode;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* quicklistLZF is a 8+N byte struct holding &#x27;sz&#x27; followed by &#x27;compressed&#x27;.</span></span><br><span class="line"><span class="comment"> * &#x27;sz&#x27; is byte length of &#x27;compressed&#x27; field.</span></span><br><span class="line"><span class="comment"> * &#x27;compressed&#x27; is LZF data with total (compressed) length &#x27;sz&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> uncompressed length is stored in quicklistNode-&gt;sz.</span></span><br><span class="line"><span class="comment"> * When quicklistNode-&gt;entry is compressed, node-&gt;entry points to a quicklistLZF */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quicklistLZF</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span> sz; <span class="comment">/* LZF size in bytes*/</span></span><br><span class="line">    <span class="type">char</span> compressed[];</span><br><span class="line">&#125; quicklistLZF;</span><br></pre></td></tr></table></figure><h5 id="编码转换-1"><a href="#编码转换-1" class="headerlink" title="编码转换"></a>编码转换</h5><p>如果列表元素小于512个，且列表的每个元素的所占空间均小于64字节，redis则使用ziplist作为底层数据结构；<br>否则将使用 linkedlist作为底层实现。<br>上述列表元素值由<code>list-max-ziplist-entries</code>配置，所占空间由<code>list-max-ziplist-value</code>配置。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>列表被用于多种功能，比如列表键、发布订阅、慢查询、监视器等</p><p>消息队列： 消息队列必须满足三个要求 <code>消息顺序、处理重复的消息、保证消息可靠性</code><br>[不推荐，redis官方推荐使用stream]<br>使用<code>lpop+rpush</code>完成，反之亦可</p><ol><li>消息保序</li><li>如何处理重复数据</li><li>如何保证消息可靠性<br>参见： <a href="https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-2">如何保证消息可靠性</a></li></ol><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>redis中哈希用以存储字符串域和值之间的映射，通常被用来存储对象。</p><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 为字典key 设置field=key</span><br><span class="line">hset key field value</span><br><span class="line">// 仅当 field 不存在时设置</span><br><span class="line">hsetnx key field value</span><br><span class="line">// 批量设置</span><br><span class="line">hmset key field value [feild value]</span><br><span class="line">// 从hash对象中获取field的value</span><br><span class="line">hget key field</span><br><span class="line">// 获取多个field的值</span><br><span class="line">hmget key field [field2]</span><br><span class="line">// 判断 field 是否存在</span><br><span class="line">hexists key field</span><br><span class="line">// 删除field元素</span><br><span class="line">hdel key field</span><br><span class="line">// 获取key中 field个数</span><br><span class="line">hlen key</span><br><span class="line">hstrlen key field  </span><br><span class="line">// 如果field值为int类型，则将value + inc</span><br><span class="line">hincrby key field inc</span><br><span class="line">// 获取哈希表中所有的域</span><br><span class="line">hkeys key</span><br><span class="line">// 获取哈希表中所有的域的值</span><br><span class="line">hvals key</span><br><span class="line">// 获取整个哈希表的元素</span><br><span class="line">hgetall key</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; hset profile name mqray</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; hmset profile age 18 gender male </span><br><span class="line">OK</span><br><span class="line">123.122.10.231:6379&gt; hget profile name</span><br><span class="line">&quot;mqray&quot;</span><br><span class="line">123.122.10.231:6379&gt; hmget profile name gender </span><br><span class="line">1) &quot;mqray&quot;</span><br><span class="line">2) &quot;male&quot;</span><br><span class="line">123.122.10.231:6379&gt; HEXISTS profile name </span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; HEXISTS profile height</span><br><span class="line">(integer) 0</span><br><span class="line">123.122.10.231:6379&gt; hlen profile</span><br><span class="line">(integer) 3</span><br><span class="line">123.122.10.231:6379&gt; hincrby profile age 2</span><br><span class="line">(integer) 20</span><br><span class="line">123.122.10.231:6379&gt; hkeys profile</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">3) &quot;gender&quot;</span><br><span class="line">123.122.10.231:6379&gt; hgetall profile</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;mqray&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;20&quot;</span><br><span class="line">5) &quot;gender&quot;</span><br><span class="line">6) &quot;male&quot;</span><br></pre></td></tr></table></figure><h4 id="type-3"><a href="#type-3" class="headerlink" title="type"></a>type</h4><p>上述命令操作是哈希表的命令，使用<code>type</code>命令查看此对象的类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; type profile</span><br><span class="line">hash</span><br></pre></td></tr></table></figure><h4 id="encoding-3"><a href="#encoding-3" class="headerlink" title="encoding"></a>encoding</h4><p>哈希中采用两种编码格式：<code>ziplist</code>和<code>hashtable</code>。<br>上述哈希对象所采用的编码格式为<code>ziplist</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; object encoding profile </span><br><span class="line">&quot;ziplist&quot;</span><br></pre></td></tr></table></figure><h5 id="ziplist-1"><a href="#ziplist-1" class="headerlink" title="ziplist"></a>ziplist</h5><p><code>ziplist</code>译作压缩列表，其定义位于<code>redis/src/ziplist.h</code>中</p><h5 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h5><h5 id="编码转换-2"><a href="#编码转换-2" class="headerlink" title="编码转换"></a>编码转换</h5><p>当哈希对象同时满足如下两个条件时，使用ziplist编码。</p><ol><li>哈希对象保存的所有键值对和值的字符串长度都小于64字节。</li><li>哈希对象保存的字符串键值对数量少于512个。<br>否则使用<code>hashtable</code>编码。<br>如上参数分别由 <code>hash-max-listpack-valuE</code>和<code>hash-max-listpack-entries</code>两个参数控制。</li></ol><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p><a href="https://blog.csdn.net/qq_40399646/article/details/108925856">redis-hash使用场景</a></p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set(集合)是redis中的无需字符串集合，添加、查找、删除的时间复杂度为O(1) [为什么时间复杂度是-1?]</p><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// </span><br><span class="line">sadd key value </span><br><span class="line">sismember key value </span><br><span class="line">spop key </span><br><span class="line">srandmember</span><br><span class="line">srem key value </span><br><span class="line">smove key value</span><br><span class="line">scard key</span><br><span class="line">smembers key</span><br><span class="line"></span><br><span class="line">// 求交集，如果其中key为空集则交集为空</span><br><span class="line">sinter key [key1]</span><br><span class="line"></span><br><span class="line">// 将 sinter key [key1] 求得的交集保存至 dest中</span><br><span class="line">sinterstore dest key [key1]</span><br><span class="line"></span><br><span class="line">// 并集</span><br><span class="line">sunion key [key1]</span><br><span class="line"></span><br><span class="line">// 将 sunion key [key1] 的结果保存至 dest， 如果dest存在，则覆盖</span><br><span class="line">sunionstore dest key [key1]</span><br><span class="line"></span><br><span class="line">// 返回差集</span><br><span class="line">sdiff key [key1] </span><br><span class="line"></span><br><span class="line">// 将 sdiff key [key1]  结果 保存至 dest</span><br><span class="line">sdiffstore dest key [key1]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; sadd dep xdr</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [3555] located at 182.168.106.129:6379</span></span><br><span class="line">(integer) 1</span><br><span class="line">182.168.106.129:6379&gt; sadd dep edr</span><br><span class="line">(integer) 1</span><br><span class="line">182.168.106.129:6379&gt; smembers dep</span><br><span class="line">1) &quot;xdr&quot;</span><br><span class="line">2) &quot;edr&quot;</span><br><span class="line">182.168.106.129:6379&gt; sadd dep af </span><br><span class="line">(integer) 1</span><br><span class="line">182.168.106.129:6379&gt; sadd dep cwpp</span><br><span class="line">(integer) 1</span><br><span class="line">182.168.50.160:6379&gt; SMEMBERS dep</span><br><span class="line">1) &quot;cwpp&quot;</span><br><span class="line">2) &quot;xdr&quot;</span><br><span class="line">3) &quot;af&quot;</span><br><span class="line">4) &quot;edr</span><br></pre></td></tr></table></figure><h4 id="encoding-4"><a href="#encoding-4" class="headerlink" title="encoding"></a>encoding</h4><p>集合对象采用的编码方式为<code>intset</code>或<code>hashtable</code><br>当使用<code>intset</code>编码作为集合对象的底层实现时，集合对象包含的所有元素都被保留在整数集合中。<br>而使用<code>hashtable</code>编码作为底层实现时，字典的每一个键都是一个字符串对象，每个字符串对象包含一个集合元素，其值则全部被设置为<code>NULL</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">182.168.106.129:6379&gt; type dep</span><br><span class="line">set</span><br><span class="line">182.168.106.129:6379&gt; OBJECT encoding dep</span><br><span class="line">&quot;hashtable&quot;</span><br></pre></td></tr></table></figure><p>如上设置的集合 dep， 其采用的编码即是<code>hashtable</code></p><h5 id="intset"><a href="#intset" class="headerlink" title="intset"></a>intset</h5><p>如下是一个使用<code>inset</code>编码的集合实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123.122.228.34:6379&gt; sadd nums 1 2 3</span><br><span class="line">(integer) 3</span><br><span class="line">123.122.10.231:6379&gt; object encoding nums</span><br><span class="line">&quot;intset&quot;</span><br></pre></td></tr></table></figure><p><code>intset</code>的源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> encoding; <span class="comment">// 编码方式 </span></span><br><span class="line">    <span class="type">uint32_t</span> length; <span class="comment">// 集合包含的元素</span></span><br><span class="line">    <span class="type">int8_t</span> contents[]; <span class="comment">// 保存的元素数组</span></span><br><span class="line">&#125; intset;</span><br></pre></td></tr></table></figure><h5 id="hashtable-1"><a href="#hashtable-1" class="headerlink" title="hashtable"></a>hashtable</h5><h5 id="编码转换-3"><a href="#编码转换-3" class="headerlink" title="编码转换"></a>编码转换</h5><p>当集合set对象同时满足如下两个条件时，集合的底层实现为<code>intset</code>：</p><ol><li>集合保存的所有元素都是整数值</li><li>集合对象保存的元素数量不超过512个<br>任意一个条件不满足时，则使用<code>hashtable</code>编码。<br>其中第2点中的元素个数限制由 <code>set-max-intset-entries</code>限制，默认是512个元素。</li></ol><h4 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li>使用交并集获取共同好友等。</li><li></li></ol><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p><code>zset</code>即有序集合，和<code>set</code>一样，存储string类型的元素集合，不允许重复的元素。<code>zset</code>中的每一个元素都会关联一个<code>double</code>类型的<code>score</code>。redis通过<code>score</code>为集合中的成员进行从小到大的排列。</p><h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 将一个或多个memeber及其score加入到zset key中</span><br><span class="line">zadd key score member [score member...]</span><br><span class="line">// 获取zset 中 成员member的score</span><br><span class="line">zscore key member</span><br><span class="line">// 为有序集 key 的成员 member的score 值加上增量 inc</span><br><span class="line">zincrby key inc member </span><br><span class="line">// 返回有序集合 key 的基数</span><br><span class="line">zcard key</span><br><span class="line">// 返回有序集合中score值在min和max之间的元素个数</span><br><span class="line">zcount key min max</span><br><span class="line">// 返回有序集合，指定区间内的成员</span><br><span class="line">zrange key  start stop </span><br><span class="line">// 返回有序集合中member的排名，按score递增排列</span><br><span class="line">zrank key member </span><br><span class="line">// 移除语序集合中的一个或多个成员，不存在则忽略</span><br><span class="line">zrem key member [member]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; zadd rank 100 mqray 90 lmq </span><br><span class="line">(integer) 2</span><br><span class="line">123.122.10.231:6379&gt; zscore mqray</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;zscore&#x27; command</span><br><span class="line">123.122.10.231:6379&gt; zscore rank mqray</span><br><span class="line">&quot;100&quot;</span><br><span class="line">123.122.10.231:6379&gt; zincrby rank 100 mqray</span><br><span class="line">&quot;200&quot;</span><br><span class="line">123.122.10.231:6379&gt; zcard rank</span><br><span class="line">(integer) 2</span><br><span class="line">123.122.10.231:6379&gt; zadd rank lm 199</span><br><span class="line">(error) ERR value is not a valid float</span><br><span class="line">123.122.10.231:6379&gt; zadd rank 199 lm</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; zcard rank</span><br><span class="line">(integer) 3</span><br><span class="line">123.122.10.231:6379&gt; zcount rank </span><br><span class="line">123.122.10.231:6379&gt; zcount rank 100 200</span><br><span class="line">(integer) 2</span><br><span class="line">123.122.10.231:6379&gt; zrem rank lm</span><br><span class="line">(integer) 1</span><br><span class="line">123.122.10.231:6379&gt; zrange rank 0 -1</span><br><span class="line">1) &quot;lmq&quot;</span><br><span class="line">2) &quot;mqray</span><br></pre></td></tr></table></figure><h4 id="type-4"><a href="#type-4" class="headerlink" title="type"></a>type</h4><p>上述的对象rank，其数据类型为<code>zset</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123.122.10.231:6379&gt; type rank</span><br><span class="line">zset</span><br></pre></td></tr></table></figure><h4 id="encoding-5"><a href="#encoding-5" class="headerlink" title="encoding"></a>encoding</h4><p><code>zset</code>所采用两种编码方式，分别为：<code>ziplist</code>、<code>zskiplist</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zset</span> &#123;</span></span><br><span class="line">    dict *dict;</span><br><span class="line">    zskiplist *zsl;</span><br><span class="line">&#125; zset;</span><br></pre></td></tr></table></figure><h5 id="ziplist-2"><a href="#ziplist-2" class="headerlink" title="ziplist"></a>ziplist</h5><p>参见4.3.1的说明</p><h5 id="zskiplist"><a href="#zskiplist" class="headerlink" title="zskiplist"></a>zskiplist</h5><p>redis的跳表由<code>redis.h/zskiplistNode</code>和<code>redis.h/zskiplist</code>两个结构定义，其中：<br><code>zskiplistNode</code>表示跳跃表节点，<code>zskiplist</code>则用于保存跳跃表节点的相关信息，比如节点数量，指向prev和post节点的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplist</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">header</span>, *<span class="title">tail</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> length;</span><br><span class="line">    <span class="type">int</span> level;</span><br><span class="line">&#125; zskiplist;</span><br></pre></td></tr></table></figure><p><code>header</code>： 指向跳跃表的表头节点<br><code>tail</code>: 指向跳跃表的表尾节点<br><code>level</code>：记录跳跃表内，层数最大的那个节点的层数[表头节点的层数不计算在内]<br><code>length</code>: 记录跳跃表的长度，即目前跳跃表中包含的节点数量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> &#123;</span></span><br><span class="line">    sds ele; </span><br><span class="line">    <span class="type">double</span> score; <span class="comment">// 分值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">backward</span>;</span> <span class="comment">// 后退指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistLevel</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">zskiplistNode</span> *<span class="title">forward</span>;</span> <span class="comment">// 前进指针</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> span; <span class="comment">// 跨度</span></span><br><span class="line">    &#125; level[];</span><br><span class="line">&#125; zskiplistNode;</span><br></pre></td></tr></table></figure><p>如下是一个跳跃表实例：<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/zskiplist.png"></p><h5 id="编码转换-4"><a href="#编码转换-4" class="headerlink" title="编码转换"></a>编码转换</h5><p>当有序集合对象同时满足如下两个条件时，采用<code>ziplist</code>编码：</p><ol><li>有序集合对象保存的元素数量小于128个；</li><li>有序集合保存的所有元素的长度都小于64字节；<br>否则，使用<code>skiplist</code>编码。上述两个值分别由配置<code>zset-max-listpack-entries</code>和<code>zset-max-listpack-value</code>控制。</li></ol><h4 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li>排行榜： 比如按关注数、浏览量等进行排名比较。</li></ol><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://github.com/redis/redis/blob/4b1fbb233848379f4085ffca02a7e7ac32155db8/src/server.h#L899">1.redis.src.server.h</a><br><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-redis-object.html">2.对象机制讲解</a><br><a href="https://github.com/redis/redis/blob/9b1d4f003de1b141ea850f01e7104e7e5c670620/redis.conf">3.redis.conf</a><br><a href="http://redisdoc.com/string/mset.html">4. redis命令参考</a><br><a href="http://redisbook.com/preview/object/string.html">5. redis设计与实现</a><br><a href="https://github.com/redis/redis/blob/unstable/src/object.c#L43">6. redis.object.c</a><br><a href="https://github.com/redis/redis/blob/4b1fbb233848379f4085ffca02a7e7ac32155db8/src/sds.h#L4">7. redis.sds.h</a><br><a href="https://www.cnblogs.com/hunternet/p/12624691.html">8. redis快速链表</a><br><a href="https://github.com/redis/redis/blob/unstable/src/quicklist.h">9. redis.quicklist.h</a><br><a href="https://github.com/redis/redis/blob/4b1fbb233848379f4085ffca02a7e7ac32155db8/src/intset.h">10. redis.intset.h</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;redis是一个开源的、基于内存的存储结构[使用C语言编写]，通常被用于缓存、消息订阅等场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于内存：redis借助RAM提供高速的数据访问，比磁盘要快几个量</summary>
      
    
    
    
    <category term="数据库" scheme="https://mqrayblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>github + hexo建站[待补充]</title>
    <link href="https://mqrayblog.cn/2023/07/15/hello-world/"/>
    <id>https://mqrayblog.cn/2023/07/15/hello-world/</id>
    <published>2023-07-15T05:32:21.739Z</published>
    <updated>2023-07-23T16:13:04.249Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://www.suyuanblog.xyz/2021/10/14/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/">1. 预部署文件渲染失败解决方案</a><br><a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC%E9%AB%98%E5%BA%A6%E9%99%90%E5%88%B6">2. hexo butteryfly设置</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java之拦截器</title>
    <link href="https://mqrayblog.cn/2023/05/01/java%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://mqrayblog.cn/2023/05/01/java%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2023-05-01T02:06:37.000Z</published>
    <updated>2023-08-01T16:23:56.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://www.modb.pro/db/158733">1. 一文了解拦截器与拦截器链的实现</a><br><a href="https://juejin.cn/post/7026150413036421127#heading-15">2. 自定义注解实现方式解析</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.modb.pro/db/158733&quot;&gt;1. 一文了解拦截器与拦截器链的实现&lt;/a&gt;&lt;br&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>专有名词</title>
    <link href="https://mqrayblog.cn/2023/05/01/%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D/"/>
    <id>https://mqrayblog.cn/2023/05/01/%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D/</id>
    <published>2023-04-30T16:21:20.000Z</published>
    <updated>2023-07-31T16:45:06.541Z</updated>
    
    <content type="html"><![CDATA[<h5 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h5><p>POSIX是由IEEE的一组标准组成，其目标是提供一套大体上基于Unix的可移植操作系统标准。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;POSIX&quot;&gt;&lt;a href=&quot;#POSIX&quot; class=&quot;headerlink&quot; title=&quot;POSIX&quot;&gt;&lt;/a&gt;POSIX&lt;/h5&gt;&lt;p&gt;POSIX是由IEEE的一组标准组成，其目标是提供一套大体上基于Unix的可移植操作系统标准。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
