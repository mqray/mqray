<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mqray&#39;s blog</title>
  
  
  <link href="https://mqrayblog.cn/atom.xml" rel="self"/>
  
  <link href="https://mqrayblog.cn/"/>
  <updated>2023-07-20T00:06:24.768Z</updated>
  <id>https://mqrayblog.cn/</id>
  
  <author>
    <name>mqray</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis基础</title>
    <link href="https://mqrayblog.cn/2023/07/19/redis%E5%9F%BA%E7%A1%80/"/>
    <id>https://mqrayblog.cn/2023/07/19/redis%E5%9F%BA%E7%A1%80/</id>
    <published>2023-07-18T17:16:20.000Z</published>
    <updated>2023-07-20T00:06:24.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>redis是一个开源的、基于内存的存储结构[使用C语言编写]，通常被用于缓存、消息订阅等场景。</p></blockquote><p>redis的特点</p><ul><li>基于内存：redis借助RAM提供高速的数据访问，比磁盘要快几个量级</li></ul><h3 id="redis的基础数据结构"><a href="#redis的基础数据结构" class="headerlink" title="redis的基础数据结构"></a>redis的基础数据结构</h3><blockquote><p>redis是键值对数据库，redis中的键均为字符串，在谈到redis数据结构时，通常是指 值 的数据结构，最常见的包括如下五种，<code>string</code>、<code>lsit</code>、<code>set</code>、<code>zset</code>、<code>hash</code><br>redis中使用<code>redisObject</code>来描述所有的key和value，<code>redisObject</code>的结构体定义如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="comment">// 数据类型， 占4bit</span></span><br><span class="line">    <span class="type">unsigned</span> type:<span class="number">4</span>; </span><br><span class="line">    <span class="comment">// 编码格式 占4bit</span></span><br><span class="line">    <span class="type">unsigned</span> encoding:<span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 此对象最后一次被访问的时间 占24bit</span></span><br><span class="line">    <span class="type">unsigned</span> lru:LRU_BITS; <span class="comment">/* LRU time (relative to global lru_clock) or</span></span><br><span class="line"><span class="comment">                            * LFU data (least significant 8 bits frequency</span></span><br><span class="line"><span class="comment">                            * and most significant 16 bits access time). */</span></span><br><span class="line">    <span class="comment">// 引用计数 </span></span><br><span class="line">    <span class="type">int</span> refcount;</span><br><span class="line">    <span class="comment">// 指向底层的数据实例的指针</span></span><br><span class="line">    <span class="type">void</span> *ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中， type 标识数据类型，占4个比特，encoding标识具体的编码格式，占4个比特，lru占24个字节，用以记录最近一次访问时间，refcount为引用计数，*ptr则指向底层的数据结构实现。</p><h4 id="redisObject-type"><a href="#redisObject-type" class="headerlink" title="redisObject.type"></a>redisObject.type</h4><p>redisObject.type的取值如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The actual Redis Object */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_STRING 0    <span class="comment">/* String object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_LIST 1      <span class="comment">/* List object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_SET 2       <span class="comment">/* Set object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ZSET 3      <span class="comment">/* Sorted set object. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_HASH 4      <span class="comment">/* Hash object. */</span></span></span><br></pre></td></tr></table></figure><p>在客户端中，可以使用<code>type</code>命令获取每种数据类型的类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">string</span></span><br><span class="line">182.168.168.226:6379&gt; set age 18</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [741] located at 182.168.106.129:6379</span></span><br><span class="line">OK</span><br><span class="line">182.168.106.129:6379&gt; type age </span><br><span class="line">string</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">list</span></span><br><span class="line">182.168.106.129:6379&gt; lpush friends a b c</span><br><span class="line">(integer) 3</span><br><span class="line">182.168.106.129:6379&gt; type friends </span><br><span class="line">list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span></span></span><br><span class="line">182.168.106.129:6379&gt; sadd ids 1 2 3 </span><br><span class="line">(integer) 3</span><br><span class="line">182.168.106.129:6379&gt; type ids</span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zset</span></span><br><span class="line">182.168.106.129:6379&gt; zadd info 100 mqray 90 lmq</span><br><span class="line">(integer) 2</span><br><span class="line">182.168.168.226:6379&gt; type info </span><br><span class="line">zset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> <span class="built_in">hash</span></span></span><br><span class="line">182.168.168.226:6379&gt; hset myhset name mqray</span><br><span class="line">(integer) 1</span><br><span class="line">182.168.50.160:6379&gt; type myhset</span><br><span class="line">hash</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h4><p>在客户端中，可以使用<code>object encoding key</code> 获取到对象所使用的编码格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">182.168.106.129:6379&gt; object encoding age</span><br><span class="line">&quot;int&quot;</span><br><span class="line">182.168.106.129:6379&gt; object encoding name</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [5798] located at 182.168.168.226:6379</span></span><br><span class="line">&quot;embstr&quot;</span><br><span class="line">182.168.168.226:6379&gt; object encoding friends</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [420] located at 182.168.106.129:6379</span></span><br><span class="line">&quot;quicklist&quot;</span><br><span class="line">182.168.50.160:6379&gt; object encoding ids</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [3296] located at 182.168.106.129:6379</span></span><br><span class="line">&quot;intset&quot;</span><br><span class="line">182.168.106.129:6379&gt; object encoding info</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [5642] located at 182.168.168.226:6379</span></span><br><span class="line">&quot;ziplist&quot;</span><br><span class="line">182.168.168.226:6379&gt; object encoding myhset</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [13092] located at 182.168.50.160:6379</span></span><br><span class="line">&quot;ziplist&quot;</span><br></pre></td></tr></table></figure><p>redisObject.encoding取值如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Objects encoding. Some kind of objects like Strings and Hashes can be</span></span><br><span class="line"><span class="comment"> * internally represented in multiple ways. The &#x27;encoding&#x27; field of the object</span></span><br><span class="line"><span class="comment"> * is set to one of this fields for this object. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_RAW 0     <span class="comment">/* Raw representation */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_INT 1     <span class="comment">/* Encoded as integer */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_HT 2      <span class="comment">/* Encoded as hash table */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_ZIPMAP 3  <span class="comment">/* No longer used: old hash encoding. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_LINKEDLIST 4 <span class="comment">/* No longer used: old list encoding. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_ZIPLIST 5 <span class="comment">/* No longer used: old list/hash/zset encoding. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_INTSET 6  <span class="comment">/* Encoded as intset */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_SKIPLIST 7  <span class="comment">/* Encoded as skiplist */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_EMBSTR 8  <span class="comment">/* Embedded sds string encoding */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_QUICKLIST 9 <span class="comment">/* Encoded as linked list of listpacks */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_STREAM 10 <span class="comment">/* Encoded as a radix tree of listpacks */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_LISTPACK 11 <span class="comment">/* Encoded as a listpack */</span></span></span><br></pre></td></tr></table></figure><p>在redis中，对于每种数据类型<code>type</code>，对用有多种编码<code>encoding</code>实现， 其映射关系如图所示：<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/redis-type-encoding.png"></p><p>redis可以根据不同的使用场景来对对象使用不同的编码，大大提高的redis的灵活性和效率.</p><h5 id="redisObject如何实现多态？"><a href="#redisObject如何实现多态？" class="headerlink" title="redisObject如何实现多态？"></a>redisObject如何实现多态？</h5><h4 id="lru"><a href="#lru" class="headerlink" title="lru"></a>lru</h4><p>记录了此对象最后一次被命令程序访问的时间。用当前时间减去lru即为此对象的空转时长。可以使用 <code>object idletime</code>获取对象的空转时长。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">182.168.50.160:6379&gt; object idletime friends</span><br><span class="line">(integer) 108</span><br></pre></td></tr></table></figure><p>如果服务器开启了<code>maxmemory</code>选项，且服务器所使用的内存回收算法为<code>volatile-lru</code>或者<code>allkeys-lru</code>时，当服务器所使用的内存超出<code>maxmemory</code>设定的上限时，服务器会优先释放空转时长高的数据库键，以此回收内存。<br>其中，redis所使用的内存淘汰策略配置包括如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><span class="line"><span class="meta"># is reached. You can select one from the following behaviors:</span></span><br><span class="line">#</span><br><span class="line"><span class="meta"># volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.</span></span><br><span class="line"><span class="meta"># allkeys-lru -&gt; Evict any key using approximated LRU.</span></span><br><span class="line"><span class="meta"># volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.</span></span><br><span class="line"><span class="meta"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span></span><br><span class="line"><span class="meta"># volatile-random -&gt; Remove a random key having an expire set.</span></span><br><span class="line"><span class="meta"># allkeys-random -&gt; Remove a random key, any key.</span></span><br><span class="line"><span class="meta"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="meta"># noeviction -&gt; Don<span class="string">&#x27;t evict anything, just return an error on write operations.</span></span></span><br></pre></td></tr></table></figure><p>通过配置<code>maxmemory-policy</code>以调整内存回收策略，默认值为<code>noeviction</code>，即不回收</p><h4 id="refcount"><a href="#refcount" class="headerlink" title="refcount"></a>refcount</h4><ul><li>当新创建一个对象时，该对象的<code>refcount</code>属性被设置为1；</li><li>当对一个对象共享时，该对象的<code>refcount</code>属性 +1；</li><li>消除一个对象引用后，该对象的<code>refcount</code>属性 -1；</li><li>当对象的<code>refcount</code>为0时，此<code>redisObject</code>及它指向的数据结构的内存将被释放。</li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>string 类型是二进制安全的，可以用于存储任何数据。所谓的二进制安全，是指该二进制在写入时是什么样的，读取时就是怎样。反例就是c语言中字符串默认以<code>\0</code>结尾，而读取时不显示末尾的<code>\0</code></p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br><span class="line">// 为多个键设置值</span><br><span class="line">mset key value [key value]</span><br><span class="line">// 只有在key不尊在的情况下将key的值设置为value</span><br><span class="line">setnx key value </span><br><span class="line">// 将键key的值设置为value，并将key的过期时间设置为 seconds；如果key已存在，则覆盖已有值</span><br><span class="line">setex key seconds value </span><br><span class="line"></span><br><span class="line">// 以毫秒形式设置key的过期时间</span><br><span class="line">psetex key millseconds value</span><br><span class="line"></span><br><span class="line">// 获取key对应的值，不存在返回nil</span><br><span class="line">get key</span><br><span class="line">// 获取过期时间</span><br><span class="line">ttl key </span><br><span class="line"></span><br><span class="line">// 返回key对应值的字符串长度， key不存在时返回0； key对应值不为string时，返回错误</span><br><span class="line">strlen key</span><br><span class="line">// 如果key对应值是字符串，则将value追加到键的末尾，返回追加之后键key的值的长度</span><br><span class="line">append key value</span><br><span class="line"></span><br><span class="line">// 如果键key的值为int，则+1；如果不存在则先初始化为0，在执行incr；如果不为int，返回错误</span><br><span class="line">incr key</span><br><span class="line">// key 是int时，增量修改</span><br><span class="line">incrby key increment</span><br><span class="line">// 为键key存储的值加上浮点数increment</span><br><span class="line">incrbyfloat key increment</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="sds-简单动态字符串"><a href="#sds-简单动态字符串" class="headerlink" title="sds 简单动态字符串"></a>sds 简单动态字符串</h4><p>尽管redis由c实现，但是redis中并未使用cyuyan中的string，而是使用其封装作为redis中的字符串实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// buf 中已占用空间的长度</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="comment">// buf 中剩余可用空间的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="built_in">free</span>;</span><br><span class="line">    <span class="comment">// 数据空间</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在redis3.2之后，为了更好地内存优化，<code>sdshdr</code>又被分为如下几种：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *sds;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Note: sdshdr5 is never used, we just access the flags byte directly.</span></span><br><span class="line"><span class="comment"> * However is here to document the layout of type 5 SDS strings. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr5</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, and 5 msb of string length */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr8</span> &#123;</span></span><br><span class="line">    <span class="type">uint8_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint8_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr16</span> &#123;</span></span><br><span class="line">    <span class="type">uint16_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint16_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr32</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint32_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">attribute__</span> ((__<span class="title">packed__</span>)) <span class="title">sdshdr64</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> len; <span class="comment">/* used */</span></span><br><span class="line">    <span class="type">uint64_t</span> alloc; <span class="comment">/* excluding the header and null terminator */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flags; <span class="comment">/* 3 lsb of type, 5 unused bits */</span></span><br><span class="line">    <span class="type">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>string 对应的 数据类型均为 string</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; type long</span><br><span class="line">string</span><br><span class="line">182.168.168.226:6379&gt; type name</span><br><span class="line">string</span><br><span class="line">182.168.168.226:6379&gt; type age</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h4 id="encoding-1"><a href="#encoding-1" class="headerlink" title="encoding"></a>encoding</h4><p>string类型对应三种编码格式，分别为<code>embstr</code>、<code>int</code>、<code>raw</code></p><h5 id="int"><a href="#int" class="headerlink" title="int"></a>int</h5><p>如果一个字符串对象保存的是整数值，且这个整数值可以用long类型标识，那么此字符串对象会将这个整数值保存在<code>redisObject.*ptr</code>中，并将<code>encoding</code>设置为<code>int</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; set age 18</span><br><span class="line">OK</span><br><span class="line">182.168.106.129:6379&gt; object encoding age</span><br><span class="line">&quot;int&quot;</span><br></pre></td></tr></table></figure><p>对应的redisObject如图所示：<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/string-int.png"></p><h5 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h5><p>如果该字符串的长度大于44个字节，则将其对象编码设置为<code>raw</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">182.168.106.129:6379&gt; set long org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert</span><br><span class="line">OK</span><br><span class="line">182.168.106.129:6379&gt; strlen long</span><br><span class="line">(integer) 83</span><br><span class="line">182.168.168.226:6379&gt; object encoding long</span><br><span class="line">&quot;raw&quot;</span><br></pre></td></tr></table></figure><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/string-raw.png"><h5 id="embstr"><a href="#embstr" class="headerlink" title="embstr"></a>embstr</h5><p>如果该字符串的长度小于等于44个字节，将使用<code>embstr</code>编码方式保存这个字符串值<br>embstr是专门用于保存短字符串的编码方式，和raw一样使用redisObject和sdshdr结构标识字符串对象，但是raw会调用两次内存分配函数分别创建redisObject和sdshdr结构，而embstr则只需要调用一次内存分配函数分配一块连续的空间，空间中依次包含redisObject和sdshdr。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10.65.196.57:32084&gt; set name mqray</span><br><span class="line">OK</span><br><span class="line">182.168.168.226:6379&gt; strlen name</span><br><span class="line">(integer) 5</span><br><span class="line">182.168.50.160:6379&gt; object encoding name</span><br><span class="line">&quot;embstr&quot;</span><br></pre></td></tr></table></figure><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/string-embstr.png"><h4 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h4><p>int、embstr编码的字符串在条件满足的情况下会被转化为raw编码的字符串<br>原先值为<code>int</code>的对象，在执行诸如<code>append key value</code>后将会变为<code>raw</code>编码的对象。且不会变为<code>embstr</code>编码的对象，因为redis没有提供embstr编码字符串的修改程序。<br>原先为<code>embstr</code>编码的对象，执行命令时，会先将对象修改为<code>raw</code>编码的字符串，再执行修改命令。</p><h4 id="字符串分配源码"><a href="#字符串分配源码" class="headerlink" title="字符串分配源码"></a>字符串分配源码</h4><p>创建字符串对象时，会根据字符串对象的长度来使用不同的函数来创建。字符串长度大于44字节时，使用<code>createRawStringObject</code>创建，否则使用<code>createEmbeddedStringObject</code>创建。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OBJ_ENCODING_EMBSTR_SIZE_LIMIT 44</span></span><br><span class="line">robj *<span class="title function_">createStringObject</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= OBJ_ENCODING_EMBSTR_SIZE_LIMIT)</span><br><span class="line">        <span class="keyword">return</span> createEmbeddedStringObject(ptr,len);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> createRawStringObject(ptr,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>createEmbeddedStringObject</code>函数源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Create a string object with encoding OBJ_ENCODING_EMBSTR, that is</span></span><br><span class="line"><span class="comment"> * an object where the sds string is actually an unmodifiable string</span></span><br><span class="line"><span class="comment"> * allocated in the same chunk as the object itself. */</span></span><br><span class="line">robj *<span class="title function_">createEmbeddedStringObject</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    robj *o = zmalloc(<span class="keyword">sizeof</span>(robj)+<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sdshdr8)+len+<span class="number">1</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sdshdr8</span> *<span class="title">sh</span> =</span> (<span class="type">void</span>*)(o+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    o-&gt;type = OBJ_STRING;</span><br><span class="line">    o-&gt;encoding = OBJ_ENCODING_EMBSTR;</span><br><span class="line">    o-&gt;ptr = sh+<span class="number">1</span>;</span><br><span class="line">    o-&gt;refcount = <span class="number">1</span>;</span><br><span class="line">    o-&gt;lru = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    sh-&gt;len = len;</span><br><span class="line">    sh-&gt;alloc = len;</span><br><span class="line">    sh-&gt;flags = SDS_TYPE_8;</span><br><span class="line">    <span class="keyword">if</span> (ptr == SDS_NOINIT)</span><br><span class="line">        sh-&gt;buf[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ptr) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(sh-&gt;buf,ptr,len);</span><br><span class="line">        sh-&gt;buf[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">memset</span>(sh-&gt;buf,<span class="number">0</span>,len+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createRawStringObject</code>函数内部通过调用<code>createObject</code>函数创建字符串对象，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Create a string object with encoding OBJ_ENCODING_RAW, that is a plain</span></span><br><span class="line"><span class="comment"> * string object where o-&gt;ptr points to a proper sds string. */</span></span><br><span class="line">robj *<span class="title function_">createRawStringObject</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ptr, <span class="type">size_t</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createObject(OBJ_STRING, sdsnewlen(ptr,len));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">robj *<span class="title function_">createObject</span><span class="params">(<span class="type">int</span> type, <span class="type">void</span> *ptr)</span> &#123;</span><br><span class="line">    robj *o = zmalloc(<span class="keyword">sizeof</span>(*o));</span><br><span class="line">    o-&gt;type = type;</span><br><span class="line">    o-&gt;encoding = OBJ_ENCODING_RAW;</span><br><span class="line">    o-&gt;ptr = ptr;</span><br><span class="line">    o-&gt;refcount = <span class="number">1</span>;</span><br><span class="line">    o-&gt;lru = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="redis内存管理基石-zmalloc-埋点预留"><a href="#redis内存管理基石-zmalloc-埋点预留" class="headerlink" title="redis内存管理基石 zmalloc [埋点预留]"></a>redis内存管理基石 zmalloc [埋点预留]</h4><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>redis使用c语言实现，没有内置链表数据结构，redis使用双向链表实现了链表，可以将元素添加到列表头部或者尾部。</p><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>常见的list操作如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 将一个值或多个值的value插入到 列表键key的表头；如果key不存在，则创建后执行lpush；如果不是list类型，则返回错误</span><br><span class="line">lpush key value [value...]</span><br><span class="line"></span><br><span class="line">// 当key存在，且type为list时，将value插入到列表键key的表头，命令执行后返回列表长度；</span><br><span class="line">lpushx key value</span><br><span class="line"></span><br><span class="line">// 将一个值或多个值插入到列表尾部</span><br><span class="line">rpush key value [value...]</span><br><span class="line"></span><br><span class="line">// 将value插入到列表键的表尾</span><br><span class="line">rpushx key value</span><br><span class="line"></span><br><span class="line">// 移除key的表头元素</span><br><span class="line">lpop key </span><br><span class="line"></span><br><span class="line">// 移除key的表尾元素</span><br><span class="line"> rpop key</span><br><span class="line"></span><br><span class="line"> //  返回列表长度</span><br><span class="line"> llen key</span><br><span class="line"></span><br><span class="line">// 返回 列表key中，下标为index的元素，0代表第一个元素</span><br><span class="line">lindex key index</span><br><span class="line"></span><br><span class="line">// 返回列表 key 中指定区间的元素，0为第一个，-1为最后一个</span><br><span class="line">lrange key start stop</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>操作示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">182.168.50.160:6379&gt; lpush char a b c d e f</span><br><span class="line">(integer) 6</span><br><span class="line">182.168.168.226:6379&gt; LRANGE char 0 -1 </span><br><span class="line">1) &quot;f&quot;</span><br><span class="line">2) &quot;e&quot;</span><br><span class="line">3) &quot;d&quot;</span><br><span class="line">4) &quot;c&quot;</span><br><span class="line">5) &quot;b&quot;</span><br><span class="line">6) &quot;a&quot;</span><br><span class="line">182.168.168.226:6379&gt; OBJECT encoding char</span><br><span class="line">&quot;quicklist&quot;</span><br><span class="line">182.168.168.226:6379&gt; llen char</span><br><span class="line">(integer) 6</span><br><span class="line">182.168.168.226:6379&gt; lpop key 1</span><br><span class="line">(nil)</span><br><span class="line">182.168.50.160:6379&gt; lpop char </span><br><span class="line">&quot;f&quot;</span><br><span class="line">182.168.168.226:6379&gt; llen char </span><br><span class="line">(integer) 5</span><br><span class="line">182.168.168.226:6379&gt; rpop char</span><br><span class="line">&quot;a&quot;</span><br><span class="line">182.168.168.226:6379&gt; llen char  </span><br><span class="line">(integer) 4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="type-1"><a href="#type-1" class="headerlink" title="type"></a>type</h4><p>redis中，列表对象对应的<code>redisObject</code>中type为<code>list</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">182.168.168.226:6379&gt; type char </span><br><span class="line">list</span><br></pre></td></tr></table></figure><h4 id="encoding-2"><a href="#encoding-2" class="headerlink" title="encoding"></a>encoding</h4><p>redis 3.2之前，列表对象采用的编码方式为 <code>ziplist</code>和<code>linkedlsit</code>，数据量小时使用ziplist，数据量大时则使用linkedlist。<br>由于链表的附加空间相对较高，prev和next指针占用16字节，每个节点的内存单独分配，会加剧内存的碎片化，影响内存管理效率。<br>后续的版本中，则使用<code>quicklist</code>替代了<code>ziplist</code>和<code>linkedlsit</code>。</p><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/list-linkedlist-ziplist.png"><p>如果列表元素小于512个，且列表的每个元素的所占空间均小于64字节，redis则使用ziplist作为底层数据结构；<br>否则将使用 linkedlist作为底层实现。<br>上述列表元素值由<code>list-max-ziplist-entries</code>配置，所占空间由<code>list-max-ziplist-value</code>配置。</p><p>quicklist实际上是ziplist和linkedlist的混合体，将linkedlist按段区分，每个节点使用ziplist来紧凑存储，多个ziplist之间使用双向指针相连。<br>在64位机器上占用40个字节<br><img src="/2023/07/19/redis%E5%9F%BA%E7%A1%80/list-quickList.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* quicklist is a 40 byte struct (on 64-bit systems) describing a quicklist.</span></span><br><span class="line"><span class="comment"> * &#x27;count&#x27; is the number of total entries.</span></span><br><span class="line"><span class="comment"> * &#x27;len&#x27; is the number of quicklist nodes.</span></span><br><span class="line"><span class="comment"> * &#x27;compress&#x27; is: 0 if compression disabled, otherwise it&#x27;s the number</span></span><br><span class="line"><span class="comment"> *                of quicklistNodes to leave uncompressed at ends of quicklist.</span></span><br><span class="line"><span class="comment"> * &#x27;fill&#x27; is the user-requested (or default) fill factor.</span></span><br><span class="line"><span class="comment"> * &#x27;bookmarks are an optional feature that is used by realloc this struct,</span></span><br><span class="line"><span class="comment"> *      so that they don&#x27;t consume memory when not used. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quicklist</span> &#123;</span></span><br><span class="line">    quicklistNode *head;</span><br><span class="line">    quicklistNode *tail;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> count;        <span class="comment">/* total count of all entries in all listpacks */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> len;          <span class="comment">/* number of quicklistNodes */</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> fill : QL_FILL_BITS;       <span class="comment">/* fill factor for individual nodes */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> compress : QL_COMP_BITS; <span class="comment">/* depth of end nodes not to compress;0=off */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bookmark_count: QL_BM_BITS;</span><br><span class="line">    quicklistBookmark bookmarks[];</span><br><span class="line">&#125; quicklist;</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line"><span class="comment">/* quicklistNode is a 32 byte struct describing a listpack for a quicklist.</span></span><br><span class="line"><span class="comment"> * We use bit fields keep the quicklistNode at 32 bytes.</span></span><br><span class="line"><span class="comment"> * count: 16 bits, max 65536 (max lp bytes is 65k, so max count actually &lt; 32k).</span></span><br><span class="line"><span class="comment"> * encoding: 2 bits, RAW=1, LZF=2.</span></span><br><span class="line"><span class="comment"> * container: 2 bits, PLAIN=1 (a single item as char array), PACKED=2 (listpack with multiple items).</span></span><br><span class="line"><span class="comment"> * recompress: 1 bit, bool, true if node is temporary decompressed for usage.</span></span><br><span class="line"><span class="comment"> * attempted_compress: 1 bit, boolean, used for verifying during testing.</span></span><br><span class="line"><span class="comment"> * extra: 10 bits, free for future use; pads out the remainder of 32 bits */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quicklistNode</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">quicklistNode</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">quicklistNode</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *entry;</span><br><span class="line">    <span class="type">size_t</span> sz;             <span class="comment">/* entry size in bytes */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> count : <span class="number">16</span>;     <span class="comment">/* count of items in listpack */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> encoding : <span class="number">2</span>;   <span class="comment">/* RAW==1 or LZF==2 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> container : <span class="number">2</span>;  <span class="comment">/* PLAIN==1 or PACKED==2 */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> recompress : <span class="number">1</span>; <span class="comment">/* was this node previous compressed? */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> attempted_compress : <span class="number">1</span>; <span class="comment">/* node can&#x27;t compress; too small */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> dont_compress : <span class="number">1</span>; <span class="comment">/* prevent compression of entry that will be used later */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> extra : <span class="number">9</span>; <span class="comment">/* more bits to steal for future usage */</span></span><br><span class="line">&#125; quicklistNode;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* quicklistLZF is a 8+N byte struct holding &#x27;sz&#x27; followed by &#x27;compressed&#x27;.</span></span><br><span class="line"><span class="comment"> * &#x27;sz&#x27; is byte length of &#x27;compressed&#x27; field.</span></span><br><span class="line"><span class="comment"> * &#x27;compressed&#x27; is LZF data with total (compressed) length &#x27;sz&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> uncompressed length is stored in quicklistNode-&gt;sz.</span></span><br><span class="line"><span class="comment"> * When quicklistNode-&gt;entry is compressed, node-&gt;entry points to a quicklistLZF */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">quicklistLZF</span> &#123;</span></span><br><span class="line">    <span class="type">size_t</span> sz; <span class="comment">/* LZF size in bytes*/</span></span><br><span class="line">    <span class="type">char</span> compressed[];</span><br><span class="line">&#125; quicklistLZF;</span><br></pre></td></tr></table></figure><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>消息队列： 消息队列必须满足三个要求 <code>消息顺序、处理重复的消息、保证消息可靠性</code><br>[不推荐，redis官方推荐使用stream]<br>使用<code>lpop+rpush</code>完成，反之亦可</p><ol><li>消息保序</li><li>如何处理重复数据</li><li>如何保证消息可靠性<br>参见： <a href="https://www.xiaolincoding.com/redis/data_struct/command.html#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-2">如何保证消息可靠性</a></li></ol><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://github.com/redis/redis/blob/4b1fbb233848379f4085ffca02a7e7ac32155db8/src/server.h#L899">1.redis.src.server.h</a><br><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-redis-object.html">2.对象机制讲解</a><br><a href="https://github.com/redis/redis/blob/9b1d4f003de1b141ea850f01e7104e7e5c670620/redis.conf">3.redis.conf</a><br><a href="http://redisdoc.com/string/mset.html">4. redis命令参考</a><br><a href="http://redisbook.com/preview/object/string.html">5. redis设计与实现</a><br><a href="https://github.com/redis/redis/blob/unstable/src/object.c#L43">6. redis.object.c</a><br><a href="https://github.com/redis/redis/blob/4b1fbb233848379f4085ffca02a7e7ac32155db8/src/sds.h#L4">7. redis.sds.h</a><br><a href="https://www.cnblogs.com/hunternet/p/12624691.html">8. redis快速链表</a><br><a href="https://github.com/redis/redis/blob/unstable/src/quicklist.h">9. redis.quicklist.h</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;redis是一个开源的、基于内存的存储结构[使用C语言编写]，通常被用于缓存、消息订阅等场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;redis的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于内存：redis借助RAM提供高速的数据访问，比磁盘要快几个量</summary>
      
    
    
    
    <category term="数据库" scheme="https://mqrayblog.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://mqrayblog.cn/tags/redis/"/>
    
    <category term="源码阅读" scheme="https://mqrayblog.cn/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>github + hexo建站[待补充]</title>
    <link href="https://mqrayblog.cn/2023/07/15/hello-world/"/>
    <id>https://mqrayblog.cn/2023/07/15/hello-world/</id>
    <published>2023-07-15T05:32:21.739Z</published>
    <updated>2023-07-18T17:44:02.377Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://www.suyuanblog.xyz/2021/10/14/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/">1. 预部署文件渲染失败解决方案</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
